#![feature(assert_matches)]
#![feature(decl_macro)]
#![cfg(not(feature = "location"))]
//
// This file was generated with
//   target/debug/build-spec-tests -i 9,30,118,154,168,207,208,219,246,260,262,263,267,272,282,283 commonmark-spec.txt commonmark-deviations.md
//

mod common;
use common::*;

fn space2tab(mut body: Vec<Block>) -> Vec<Block> {
    body.iter_mut().for_each(|e| {
        match e {
            Block::Code(_, ref mut txt, _) | Block::Html(ref mut txt, _)
                | Block::LinkDef(ref mut txt, ..) =>
            {
                *txt = txt.replace(' ', "\t");
            }

            Block::Paragraph(par, _) => {
                par.iter_mut().for_each(|e| {
                    match e {
                        Inline::Code(txt, _) => *txt = txt.replace(' ', "\t"),
                        _ => (),
                    }
                })
            }

            _ => (),
        }
    });

    body
}

#[test]
/// Test case generated from Commonmark Spec line 352
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L352>
/// <https://spec.commonmark.org/0.29/#example-1>
fn t1() {
    init!("→foo→baz→→bim\n");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("\tfoo\tbaz\t\tbim\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 352
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L352>
/// <https://spec.commonmark.org/0.29/#example-1>
fn t1_cr() {
    init!("→foo→baz→→bim\r");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("\tfoo\tbaz\t\tbim\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 352
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L352>
/// <https://spec.commonmark.org/0.29/#example-1>
fn t1_cr_nl() {
    init!("→foo→baz→→bim\r\n");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("\tfoo\tbaz\t\tbim\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 352
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L352>
/// <https://spec.commonmark.org/0.29/#example-1>
fn t1_no_nl() {
    init!("→foo→baz→→bim");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("\tfoo\tbaz\t\tbim", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L359>
/// <https://spec.commonmark.org/0.29/#example-2>
fn t2() {
    init!("  →foo→baz→→bim\n");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("  \tfoo\tbaz\t\tbim\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L359>
/// <https://spec.commonmark.org/0.29/#example-2>
fn t2_cr() {
    init!("  →foo→baz→→bim\r");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("  \tfoo\tbaz\t\tbim\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L359>
/// <https://spec.commonmark.org/0.29/#example-2>
fn t2_cr_nl() {
    init!("  →foo→baz→→bim\r\n");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("  \tfoo\tbaz\t\tbim\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L359>
/// <https://spec.commonmark.org/0.29/#example-2>
fn t2_no_nl() {
    init!("  →foo→baz→→bim");

    assert_eq!(
        // from spec: <p>foo→baz→→bim</p>
        [
            paragraph!(plain!("foo\tbaz\t\tbim"))
        ].as_slice(),
        body(&mut StringData::new("  \tfoo\tbaz\t\tbim", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 366
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L366>
/// <https://spec.commonmark.org/0.29/#example-3>
fn t3() {
    init!("    a→a\n    ὐ→a\n");

    assert_eq!(
        // from spec: <p>a→a\nὐ→a</p>
        [
            paragraph!(plain!("a\ta"), SoftBreak, plain!("ὐ\ta"))
        ].as_slice(),
        body(&mut StringData::new("    a\ta\n    \u{1f50}\ta\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 366
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L366>
/// <https://spec.commonmark.org/0.29/#example-3>
fn t3_cr() {
    init!("    a→a\r    ὐ→a\r");

    assert_eq!(
        // from spec: <p>a→a\nὐ→a</p>
        [
            paragraph!(plain!("a\ta"), SoftBreak, plain!("ὐ\ta"))
        ].as_slice(),
        body(&mut StringData::new("    a\ta\r    \u{1f50}\ta\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 366
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L366>
/// <https://spec.commonmark.org/0.29/#example-3>
fn t3_cr_nl() {
    init!("    a→a\r\n    ὐ→a\r\n");

    assert_eq!(
        // from spec: <p>a→a\nὐ→a</p>
        [
            paragraph!(plain!("a\ta"), SoftBreak, plain!("ὐ\ta"))
        ].as_slice(),
        body(&mut StringData::new("    a\ta\r\n    \u{1f50}\ta\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 366
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L366>
/// <https://spec.commonmark.org/0.29/#example-3>
fn t3_no_nl() {
    init!("    a→a\n    ὐ→a");

    assert_eq!(
        // from spec: <p>a→a\nὐ→a</p>
        [
            paragraph!(plain!("a\ta"), SoftBreak, plain!("ὐ\ta"))
        ].as_slice(),
        body(&mut StringData::new("    a\ta\n    \u{1f50}\ta", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L379>
/// <https://spec.commonmark.org/0.29/#example-4>
fn t4() {
    init!("  - foo\n\n→bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\n\n\tbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L379>
/// <https://spec.commonmark.org/0.29/#example-4>
fn t4_cr() {
    init!("  - foo\r\r→bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\r\r\tbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L379>
/// <https://spec.commonmark.org/0.29/#example-4>
fn t4_cr_nl() {
    init!("  - foo\r\n\r\n→bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\r\n\r\n\tbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L379>
/// <https://spec.commonmark.org/0.29/#example-4>
fn t4_no_nl() {
    init!("  - foo\n\n→bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\n\n\tbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L379>
/// <https://spec.commonmark.org/0.29/#example-4>
fn t4_tab() {
    init!("  -\tfoo\n\n→bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  -\tfoo\n\n\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L392>
/// <https://spec.commonmark.org/0.29/#example-5>
fn t5() {
    init!("- foo\n\n→→bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n\t\tbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L392>
/// <https://spec.commonmark.org/0.29/#example-5>
fn t5_cr() {
    init!("- foo\r\r→→bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\r\t\tbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L392>
/// <https://spec.commonmark.org/0.29/#example-5>
fn t5_cr_nl() {
    init!("- foo\r\n\r\n→→bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n\r\n\t\tbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L392>
/// <https://spec.commonmark.org/0.29/#example-5>
fn t5_no_nl() {
    init!("- foo\n\n→→bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n\t\tbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L392>
/// <https://spec.commonmark.org/0.29/#example-5>
fn t5_tab() {
    init!("-\tfoo\n\n→→bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n\n\t\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L415>
/// <https://spec.commonmark.org/0.29/#example-6>
fn t6() {
    init!(">→→foo\n");

    assert_eq!(
        // from spec: <blockquote><p>foo</p></blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\t\tfoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L415>
/// <https://spec.commonmark.org/0.29/#example-6>
fn t6_cr() {
    init!(">→→foo\r");

    assert_eq!(
        // from spec: <blockquote><p>foo</p></blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\t\tfoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L415>
/// <https://spec.commonmark.org/0.29/#example-6>
fn t6_cr_nl() {
    init!(">→→foo\r\n");

    assert_eq!(
        // from spec: <blockquote><p>foo</p></blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\t\tfoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L415>
/// <https://spec.commonmark.org/0.29/#example-6>
fn t6_no_nl() {
    init!(">→→foo");

    assert_eq!(
        // from spec: <blockquote><p>foo</p></blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\t\tfoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 424
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L424>
/// <https://spec.commonmark.org/0.29/#example-7>
fn t7() {
    init!("-→→foo\n");

    assert_eq!(
        // from spec: <ul><li>foo</li></ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-\t\tfoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 424
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L424>
/// <https://spec.commonmark.org/0.29/#example-7>
fn t7_cr() {
    init!("-→→foo\r");

    assert_eq!(
        // from spec: <ul><li>foo</li></ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-\t\tfoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 424
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L424>
/// <https://spec.commonmark.org/0.29/#example-7>
fn t7_cr_nl() {
    init!("-→→foo\r\n");

    assert_eq!(
        // from spec: <ul><li>foo</li></ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-\t\tfoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 424
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L424>
/// <https://spec.commonmark.org/0.29/#example-7>
fn t7_no_nl() {
    init!("-→→foo");

    assert_eq!(
        // from spec: <ul><li>foo</li></ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-\t\tfoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L436>
/// <https://spec.commonmark.org/0.29/#example-8>
fn t8() {
    init!("    foo\n→bar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\n\tbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L436>
/// <https://spec.commonmark.org/0.29/#example-8>
fn t8_cr() {
    init!("    foo\r→bar\r");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\r\tbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L436>
/// <https://spec.commonmark.org/0.29/#example-8>
fn t8_cr_nl() {
    init!("    foo\r\n→bar\r\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\r\n\tbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L436>
/// <https://spec.commonmark.org/0.29/#example-8>
fn t8_no_nl() {
    init!("    foo\n→bar");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\n\tbar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 445
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L445>
/// <https://spec.commonmark.org/0.29/#example-9>
fn t9() {
    init!(" - foo\n   - bar\n→ - baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz"))])])])
        ].as_slice(),
        body(&mut StringData::new(" - foo\n   - bar\n\t - baz\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 445
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L445>
/// <https://spec.commonmark.org/0.29/#example-9>
fn t9_cr() {
    init!(" - foo\r   - bar\r→ - baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz"))])])])
        ].as_slice(),
        body(&mut StringData::new(" - foo\r   - bar\r\t - baz\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 445
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L445>
/// <https://spec.commonmark.org/0.29/#example-9>
fn t9_cr_nl() {
    init!(" - foo\r\n   - bar\r\n→ - baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz"))])])])
        ].as_slice(),
        body(&mut StringData::new(" - foo\r\n   - bar\r\n\t - baz\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 445
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L445>
/// <https://spec.commonmark.org/0.29/#example-9>
fn t9_no_nl() {
    init!(" - foo\n   - bar\n→ - baz");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz"))])])])
        ].as_slice(),
        body(&mut StringData::new(" - foo\n   - bar\n\t - baz", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 445
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L445>
/// <https://spec.commonmark.org/0.29/#example-9>
fn t9_tab() {
    init!(" -\tfoo\n   -\tbar\n→\t-\tbaz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz"))])])])
        ].as_slice(),
        space2tab(body(&mut StringData::new(" -\tfoo\n   -\tbar\n\t\t-\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 463
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L463>
/// <https://spec.commonmark.org/0.29/#example-10>
fn t10() {
    init!("#→Foo\n");

    assert_eq!(
        // from spec: <h1>Foo</h1>
        [
            heading!(1, plain!("Foo"))
        ].as_slice(),
        body(&mut StringData::new("#\tFoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 463
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L463>
/// <https://spec.commonmark.org/0.29/#example-10>
fn t10_cr() {
    init!("#→Foo\r");

    assert_eq!(
        // from spec: <h1>Foo</h1>
        [
            heading!(1, plain!("Foo"))
        ].as_slice(),
        body(&mut StringData::new("#\tFoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 463
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L463>
/// <https://spec.commonmark.org/0.29/#example-10>
fn t10_cr_nl() {
    init!("#→Foo\r\n");

    assert_eq!(
        // from spec: <h1>Foo</h1>
        [
            heading!(1, plain!("Foo"))
        ].as_slice(),
        body(&mut StringData::new("#\tFoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 463
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L463>
/// <https://spec.commonmark.org/0.29/#example-10>
fn t10_no_nl() {
    init!("#→Foo");

    assert_eq!(
        // from spec: <h1>Foo</h1>
        [
            heading!(1, plain!("Foo"))
        ].as_slice(),
        body(&mut StringData::new("#\tFoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 469
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L469>
/// <https://spec.commonmark.org/0.29/#example-11>
fn t11() {
    init!("*→*→*→\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("*\t*\t*\t\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 469
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L469>
/// <https://spec.commonmark.org/0.29/#example-11>
fn t11_cr() {
    init!("*→*→*→\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("*\t*\t*\t\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 469
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L469>
/// <https://spec.commonmark.org/0.29/#example-11>
fn t11_cr_nl() {
    init!("*→*→*→\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("*\t*\t*\t\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 469
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L469>
/// <https://spec.commonmark.org/0.29/#example-11>
fn t11_no_nl() {
    init!("*→*→*→");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("*\t*\t*\t", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 496
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L496>
/// <https://spec.commonmark.org/0.29/#example-12>
fn t12() {
    init!("- `one\n- two`\n");

    assert_eq!(
        // from spec: <ul>\n<li>`one</li>\n<li>two`</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("`one"))], vec![paragraph!(plain!("two`"))])
        ].as_slice(),
        body(&mut StringData::new("- `one\n- two`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 496
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L496>
/// <https://spec.commonmark.org/0.29/#example-12>
fn t12_cr() {
    init!("- `one\r- two`\r");

    assert_eq!(
        // from spec: <ul>\n<li>`one</li>\n<li>two`</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("`one"))], vec![paragraph!(plain!("two`"))])
        ].as_slice(),
        body(&mut StringData::new("- `one\r- two`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 496
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L496>
/// <https://spec.commonmark.org/0.29/#example-12>
fn t12_cr_nl() {
    init!("- `one\r\n- two`\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>`one</li>\n<li>two`</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("`one"))], vec![paragraph!(plain!("two`"))])
        ].as_slice(),
        body(&mut StringData::new("- `one\r\n- two`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 496
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L496>
/// <https://spec.commonmark.org/0.29/#example-12>
fn t12_no_nl() {
    init!("- `one\n- two`");

    assert_eq!(
        // from spec: <ul>\n<li>`one</li>\n<li>two`</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("`one"))], vec![paragraph!(plain!("two`"))])
        ].as_slice(),
        body(&mut StringData::new("- `one\n- two`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 496
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L496>
/// <https://spec.commonmark.org/0.29/#example-12>
fn t12_tab() {
    init!("-\t`one\n-\ttwo`\n");

    assert_eq!(
        // from spec: <ul>\n<li>`one</li>\n<li>two`</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("`one"))], vec![paragraph!(plain!("two`"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t`one\n-\ttwo`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L535>
/// <https://spec.commonmark.org/0.29/#example-13>
fn t13() {
    init!("***\n---\n___\n");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new("***\n---\n___\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L535>
/// <https://spec.commonmark.org/0.29/#example-13>
fn t13_cr() {
    init!("***\r---\r___\r");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new("***\r---\r___\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L535>
/// <https://spec.commonmark.org/0.29/#example-13>
fn t13_cr_nl() {
    init!("***\r\n---\r\n___\r\n");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new("***\r\n---\r\n___\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L535>
/// <https://spec.commonmark.org/0.29/#example-13>
fn t13_no_nl() {
    init!("***\n---\n___");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new("***\n---\n___", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 548
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L548>
/// <https://spec.commonmark.org/0.29/#example-14>
fn t14() {
    init!("+++\n");

    assert_eq!(
        // from spec: <p>+++</p>
        [
            paragraph!(plain!("+++"))
        ].as_slice(),
        body(&mut StringData::new("+++\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 548
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L548>
/// <https://spec.commonmark.org/0.29/#example-14>
fn t14_cr() {
    init!("+++\r");

    assert_eq!(
        // from spec: <p>+++</p>
        [
            paragraph!(plain!("+++"))
        ].as_slice(),
        body(&mut StringData::new("+++\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 548
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L548>
/// <https://spec.commonmark.org/0.29/#example-14>
fn t14_cr_nl() {
    init!("+++\r\n");

    assert_eq!(
        // from spec: <p>+++</p>
        [
            paragraph!(plain!("+++"))
        ].as_slice(),
        body(&mut StringData::new("+++\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 548
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L548>
/// <https://spec.commonmark.org/0.29/#example-14>
fn t14_no_nl() {
    init!("+++");

    assert_eq!(
        // from spec: <p>+++</p>
        [
            paragraph!(plain!("+++"))
        ].as_slice(),
        body(&mut StringData::new("+++", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L555>
/// <https://spec.commonmark.org/0.29/#example-15>
fn t15() {
    init!("===\n");

    assert_eq!(
        // from spec: <p>===</p>
        [
            paragraph!(plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("===\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L555>
/// <https://spec.commonmark.org/0.29/#example-15>
fn t15_cr() {
    init!("===\r");

    assert_eq!(
        // from spec: <p>===</p>
        [
            paragraph!(plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("===\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L555>
/// <https://spec.commonmark.org/0.29/#example-15>
fn t15_cr_nl() {
    init!("===\r\n");

    assert_eq!(
        // from spec: <p>===</p>
        [
            paragraph!(plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("===\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L555>
/// <https://spec.commonmark.org/0.29/#example-15>
fn t15_no_nl() {
    init!("===");

    assert_eq!(
        // from spec: <p>===</p>
        [
            paragraph!(plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("===", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 564
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L564>
/// <https://spec.commonmark.org/0.29/#example-16>
fn t16() {
    init!("--\n**\n__\n");

    assert_eq!(
        // from spec: <p>--\n**\n__</p>
        [
            paragraph!(plain!("--"), SoftBreak, plain!("**"), SoftBreak, plain!("__"))
        ].as_slice(),
        body(&mut StringData::new("--\n**\n__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 564
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L564>
/// <https://spec.commonmark.org/0.29/#example-16>
fn t16_cr() {
    init!("--\r**\r__\r");

    assert_eq!(
        // from spec: <p>--\n**\n__</p>
        [
            paragraph!(plain!("--"), SoftBreak, plain!("**"), SoftBreak, plain!("__"))
        ].as_slice(),
        body(&mut StringData::new("--\r**\r__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 564
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L564>
/// <https://spec.commonmark.org/0.29/#example-16>
fn t16_cr_nl() {
    init!("--\r\n**\r\n__\r\n");

    assert_eq!(
        // from spec: <p>--\n**\n__</p>
        [
            paragraph!(plain!("--"), SoftBreak, plain!("**"), SoftBreak, plain!("__"))
        ].as_slice(),
        body(&mut StringData::new("--\r\n**\r\n__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 564
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L564>
/// <https://spec.commonmark.org/0.29/#example-16>
fn t16_no_nl() {
    init!("--\n**\n__");

    assert_eq!(
        // from spec: <p>--\n**\n__</p>
        [
            paragraph!(plain!("--"), SoftBreak, plain!("**"), SoftBreak, plain!("__"))
        ].as_slice(),
        body(&mut StringData::new("--\n**\n__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 577
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L577>
/// <https://spec.commonmark.org/0.29/#example-17>
fn t17() {
    init!(" ***\n  ***\n   ***\n");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new(" ***\n  ***\n   ***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 577
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L577>
/// <https://spec.commonmark.org/0.29/#example-17>
fn t17_cr() {
    init!(" ***\r  ***\r   ***\r");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new(" ***\r  ***\r   ***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 577
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L577>
/// <https://spec.commonmark.org/0.29/#example-17>
fn t17_cr_nl() {
    init!(" ***\r\n  ***\r\n   ***\r\n");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new(" ***\r\n  ***\r\n   ***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 577
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L577>
/// <https://spec.commonmark.org/0.29/#example-17>
fn t17_no_nl() {
    init!(" ***\n  ***\n   ***");

    assert_eq!(
        // from spec: <hr />\n<hr />\n<hr />
        [
            Break, Break, Break
        ].as_slice(),
        body(&mut StringData::new(" ***\n  ***\n   ***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L590>
/// <https://spec.commonmark.org/0.29/#example-18>
fn t18() {
    init!("    ***\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("    ***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L590>
/// <https://spec.commonmark.org/0.29/#example-18>
fn t18_cr() {
    init!("    ***\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("    ***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L590>
/// <https://spec.commonmark.org/0.29/#example-18>
fn t18_cr_nl() {
    init!("    ***\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("    ***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L590>
/// <https://spec.commonmark.org/0.29/#example-18>
fn t18_no_nl() {
    init!("    ***");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("    ***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L598>
/// <https://spec.commonmark.org/0.29/#example-19>
fn t19() {
    init!("Foo\n    ***\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n    ***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L598>
/// <https://spec.commonmark.org/0.29/#example-19>
fn t19_cr() {
    init!("Foo\r    ***\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r    ***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L598>
/// <https://spec.commonmark.org/0.29/#example-19>
fn t19_cr_nl() {
    init!("Foo\r\n    ***\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n    ***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L598>
/// <https://spec.commonmark.org/0.29/#example-19>
fn t19_no_nl() {
    init!("Foo\n    ***");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n    ***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L609>
/// <https://spec.commonmark.org/0.29/#example-20>
fn t20() {
    init!("_____________________________________\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("_____________________________________\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L609>
/// <https://spec.commonmark.org/0.29/#example-20>
fn t20_cr() {
    init!("_____________________________________\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("_____________________________________\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L609>
/// <https://spec.commonmark.org/0.29/#example-20>
fn t20_cr_nl() {
    init!("_____________________________________\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("_____________________________________\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L609>
/// <https://spec.commonmark.org/0.29/#example-20>
fn t20_no_nl() {
    init!("_____________________________________");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("_____________________________________", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L618>
/// <https://spec.commonmark.org/0.29/#example-21>
fn t21() {
    init!(" - - -\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" - - -\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L618>
/// <https://spec.commonmark.org/0.29/#example-21>
fn t21_cr() {
    init!(" - - -\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" - - -\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L618>
/// <https://spec.commonmark.org/0.29/#example-21>
fn t21_cr_nl() {
    init!(" - - -\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" - - -\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L618>
/// <https://spec.commonmark.org/0.29/#example-21>
fn t21_no_nl() {
    init!(" - - -");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" - - -", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L618>
/// <https://spec.commonmark.org/0.29/#example-21>
fn t21_tab() {
    init!(" -\t-\t-\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        space2tab(body(&mut StringData::new(" -\t-\t-\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L625>
/// <https://spec.commonmark.org/0.29/#example-22>
fn t22() {
    init!(" **  * ** * ** * **\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" **  * ** * ** * **\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L625>
/// <https://spec.commonmark.org/0.29/#example-22>
fn t22_cr() {
    init!(" **  * ** * ** * **\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" **  * ** * ** * **\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L625>
/// <https://spec.commonmark.org/0.29/#example-22>
fn t22_cr_nl() {
    init!(" **  * ** * ** * **\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" **  * ** * ** * **\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L625>
/// <https://spec.commonmark.org/0.29/#example-22>
fn t22_no_nl() {
    init!(" **  * ** * ** * **");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new(" **  * ** * ** * **", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L625>
/// <https://spec.commonmark.org/0.29/#example-22>
fn t22_tab() {
    init!(" **\t\t*\t**\t*\t**\t*\t**\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        space2tab(body(&mut StringData::new(" **\t\t*\t**\t*\t**\t*\t**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L632>
/// <https://spec.commonmark.org/0.29/#example-23>
fn t23() {
    init!("-     -      -      -\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("-     -      -      -\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L632>
/// <https://spec.commonmark.org/0.29/#example-23>
fn t23_cr() {
    init!("-     -      -      -\r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("-     -      -      -\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L632>
/// <https://spec.commonmark.org/0.29/#example-23>
fn t23_cr_nl() {
    init!("-     -      -      -\r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("-     -      -      -\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L632>
/// <https://spec.commonmark.org/0.29/#example-23>
fn t23_no_nl() {
    init!("-     -      -      -");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("-     -      -      -", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L632>
/// <https://spec.commonmark.org/0.29/#example-23>
fn t23_tab() {
    init!("-\t\t\t\t\t-\t\t\t\t\t\t-\t\t\t\t\t\t-\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t\t\t\t\t-\t\t\t\t\t\t-\t\t\t\t\t\t-\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L641>
/// <https://spec.commonmark.org/0.29/#example-24>
fn t24() {
    init!("- - - -    \n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("- - - -    \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L641>
/// <https://spec.commonmark.org/0.29/#example-24>
fn t24_cr() {
    init!("- - - -    \r");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("- - - -    \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L641>
/// <https://spec.commonmark.org/0.29/#example-24>
fn t24_cr_nl() {
    init!("- - - -    \r\n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("- - - -    \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L641>
/// <https://spec.commonmark.org/0.29/#example-24>
fn t24_no_nl() {
    init!("- - - -    ");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        body(&mut StringData::new("- - - -    ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L641>
/// <https://spec.commonmark.org/0.29/#example-24>
fn t24_tab() {
    init!("-\t-\t-\t-\t\t  \n");

    assert_eq!(
        // from spec: <hr />
        [
            Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t-\t-\t-\t\t  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L650>
/// <https://spec.commonmark.org/0.29/#example-25>
fn t25() {
    init!("_ _ _ _ a\n\na------\n\n---a---\n");

    assert_eq!(
        // from spec: <p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>
        [
            paragraph!(plain!("_ _ _ _ a")), paragraph!(plain!("a------")), paragraph!(plain!("---a---"))
        ].as_slice(),
        body(&mut StringData::new("_ _ _ _ a\n\na------\n\n---a---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L650>
/// <https://spec.commonmark.org/0.29/#example-25>
fn t25_cr() {
    init!("_ _ _ _ a\r\ra------\r\r---a---\r");

    assert_eq!(
        // from spec: <p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>
        [
            paragraph!(plain!("_ _ _ _ a")), paragraph!(plain!("a------")), paragraph!(plain!("---a---"))
        ].as_slice(),
        body(&mut StringData::new("_ _ _ _ a\r\ra------\r\r---a---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L650>
/// <https://spec.commonmark.org/0.29/#example-25>
fn t25_cr_nl() {
    init!("_ _ _ _ a\r\n\r\na------\r\n\r\n---a---\r\n");

    assert_eq!(
        // from spec: <p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>
        [
            paragraph!(plain!("_ _ _ _ a")), paragraph!(plain!("a------")), paragraph!(plain!("---a---"))
        ].as_slice(),
        body(&mut StringData::new("_ _ _ _ a\r\n\r\na------\r\n\r\n---a---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L650>
/// <https://spec.commonmark.org/0.29/#example-25>
fn t25_no_nl() {
    init!("_ _ _ _ a\n\na------\n\n---a---");

    assert_eq!(
        // from spec: <p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>
        [
            paragraph!(plain!("_ _ _ _ a")), paragraph!(plain!("a------")), paragraph!(plain!("---a---"))
        ].as_slice(),
        body(&mut StringData::new("_ _ _ _ a\n\na------\n\n---a---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L650>
/// <https://spec.commonmark.org/0.29/#example-25>
fn t25_tab() {
    init!("_\t_\t_\t_\ta\n\na------\n\n---a---\n");

    assert_eq!(
        // from spec: <p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>
        [
            paragraph!(plain!("_	_	_	_	a")), paragraph!(plain!("a------")), paragraph!(plain!("---a---"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_\t_\t_\t_\ta\n\na------\n\n---a---\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L666>
/// <https://spec.commonmark.org/0.29/#example-26>
fn t26() {
    init!(" *-*\n");

    assert_eq!(
        // from spec: <p><em>-</em></p>
        [
            paragraph!(emph!(plain!("-")))
        ].as_slice(),
        body(&mut StringData::new(" *-*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L666>
/// <https://spec.commonmark.org/0.29/#example-26>
fn t26_cr() {
    init!(" *-*\r");

    assert_eq!(
        // from spec: <p><em>-</em></p>
        [
            paragraph!(emph!(plain!("-")))
        ].as_slice(),
        body(&mut StringData::new(" *-*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L666>
/// <https://spec.commonmark.org/0.29/#example-26>
fn t26_cr_nl() {
    init!(" *-*\r\n");

    assert_eq!(
        // from spec: <p><em>-</em></p>
        [
            paragraph!(emph!(plain!("-")))
        ].as_slice(),
        body(&mut StringData::new(" *-*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L666>
/// <https://spec.commonmark.org/0.29/#example-26>
fn t26_no_nl() {
    init!(" *-*");

    assert_eq!(
        // from spec: <p><em>-</em></p>
        [
            paragraph!(emph!(plain!("-")))
        ].as_slice(),
        body(&mut StringData::new(" *-*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 675
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L675>
/// <https://spec.commonmark.org/0.29/#example-27>
fn t27() {
    init!("- foo\n***\n- bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break, unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n***\n- bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 675
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L675>
/// <https://spec.commonmark.org/0.29/#example-27>
fn t27_cr() {
    init!("- foo\r***\r- bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break, unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r***\r- bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 675
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L675>
/// <https://spec.commonmark.org/0.29/#example-27>
fn t27_cr_nl() {
    init!("- foo\r\n***\r\n- bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break, unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n***\r\n- bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 675
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L675>
/// <https://spec.commonmark.org/0.29/#example-27>
fn t27_no_nl() {
    init!("- foo\n***\n- bar");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break, unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n***\n- bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 675
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L675>
/// <https://spec.commonmark.org/0.29/#example-27>
fn t27_tab() {
    init!("-\tfoo\n***\n-\tbar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break, unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n***\n-\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 692
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L692>
/// <https://spec.commonmark.org/0.29/#example-28>
fn t28() {
    init!("Foo\n***\nbar\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n***\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 692
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L692>
/// <https://spec.commonmark.org/0.29/#example-28>
fn t28_cr() {
    init!("Foo\r***\rbar\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r***\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 692
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L692>
/// <https://spec.commonmark.org/0.29/#example-28>
fn t28_cr_nl() {
    init!("Foo\r\n***\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n***\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 692
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L692>
/// <https://spec.commonmark.org/0.29/#example-28>
fn t28_no_nl() {
    init!("Foo\n***\nbar");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n***\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 709
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L709>
/// <https://spec.commonmark.org/0.29/#example-29>
fn t29() {
    init!("Foo\n---\nbar\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n---\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 709
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L709>
/// <https://spec.commonmark.org/0.29/#example-29>
fn t29_cr() {
    init!("Foo\r---\rbar\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r---\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 709
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L709>
/// <https://spec.commonmark.org/0.29/#example-29>
fn t29_cr_nl() {
    init!("Foo\r\n---\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n---\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 709
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L709>
/// <https://spec.commonmark.org/0.29/#example-29>
fn t29_no_nl() {
    init!("Foo\n---\nbar");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>bar</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n---\nbar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 722
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L722>
/// <https://spec.commonmark.org/0.29/#example-30>
fn t30() {
    init!("* Foo\n* * *\n* Bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break, unordered_list!(vec![paragraph!(plain!("Bar"))])
        ].as_slice(),
        body(&mut StringData::new("* Foo\n* * *\n* Bar\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 722
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L722>
/// <https://spec.commonmark.org/0.29/#example-30>
fn t30_cr() {
    init!("* Foo\r* * *\r* Bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break, unordered_list!(vec![paragraph!(plain!("Bar"))])
        ].as_slice(),
        body(&mut StringData::new("* Foo\r* * *\r* Bar\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 722
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L722>
/// <https://spec.commonmark.org/0.29/#example-30>
fn t30_cr_nl() {
    init!("* Foo\r\n* * *\r\n* Bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break, unordered_list!(vec![paragraph!(plain!("Bar"))])
        ].as_slice(),
        body(&mut StringData::new("* Foo\r\n* * *\r\n* Bar\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 722
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L722>
/// <https://spec.commonmark.org/0.29/#example-30>
fn t30_no_nl() {
    init!("* Foo\n* * *\n* Bar");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break, unordered_list!(vec![paragraph!(plain!("Bar"))])
        ].as_slice(),
        body(&mut StringData::new("* Foo\n* * *\n* Bar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 722
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L722>
/// <https://spec.commonmark.org/0.29/#example-30>
fn t30_tab() {
    init!("*\tFoo\n*\t*\t*\n*\tBar\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break, unordered_list!(vec![paragraph!(plain!("Bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("*\tFoo\n*\t*\t*\n*\tBar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 739
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L739>
/// <https://spec.commonmark.org/0.29/#example-31>
fn t31() {
    init!("- Foo\n- * * *\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))], vec![Break])
        ].as_slice(),
        body(&mut StringData::new("- Foo\n- * * *\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 739
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L739>
/// <https://spec.commonmark.org/0.29/#example-31>
fn t31_cr() {
    init!("- Foo\r- * * *\r");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))], vec![Break])
        ].as_slice(),
        body(&mut StringData::new("- Foo\r- * * *\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 739
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L739>
/// <https://spec.commonmark.org/0.29/#example-31>
fn t31_cr_nl() {
    init!("- Foo\r\n- * * *\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))], vec![Break])
        ].as_slice(),
        body(&mut StringData::new("- Foo\r\n- * * *\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 739
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L739>
/// <https://spec.commonmark.org/0.29/#example-31>
fn t31_no_nl() {
    init!("- Foo\n- * * *");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))], vec![Break])
        ].as_slice(),
        body(&mut StringData::new("- Foo\n- * * *", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 739
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L739>
/// <https://spec.commonmark.org/0.29/#example-31>
fn t31_tab() {
    init!("-\tFoo\n-\t*\t*\t*\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))], vec![Break])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tFoo\n-\t*\t*\t*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L768>
/// <https://spec.commonmark.org/0.29/#example-32>
fn t32() {
    init!("# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n");

    assert_eq!(
        // from spec: <h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>
        [
            heading!(1, plain!("foo")), heading!(2, plain!("foo")), heading!(3, plain!("foo")), heading!(4, plain!("foo")), heading!(5, plain!("foo")), heading!(6, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L768>
/// <https://spec.commonmark.org/0.29/#example-32>
fn t32_cr() {
    init!("# foo\r## foo\r### foo\r#### foo\r##### foo\r###### foo\r");

    assert_eq!(
        // from spec: <h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>
        [
            heading!(1, plain!("foo")), heading!(2, plain!("foo")), heading!(3, plain!("foo")), heading!(4, plain!("foo")), heading!(5, plain!("foo")), heading!(6, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("# foo\r## foo\r### foo\r#### foo\r##### foo\r###### foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L768>
/// <https://spec.commonmark.org/0.29/#example-32>
fn t32_cr_nl() {
    init!("# foo\r\n## foo\r\n### foo\r\n#### foo\r\n##### foo\r\n###### foo\r\n");

    assert_eq!(
        // from spec: <h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>
        [
            heading!(1, plain!("foo")), heading!(2, plain!("foo")), heading!(3, plain!("foo")), heading!(4, plain!("foo")), heading!(5, plain!("foo")), heading!(6, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("# foo\r\n## foo\r\n### foo\r\n#### foo\r\n##### foo\r\n###### foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L768>
/// <https://spec.commonmark.org/0.29/#example-32>
fn t32_no_nl() {
    init!("# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo");

    assert_eq!(
        // from spec: <h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>
        [
            heading!(1, plain!("foo")), heading!(2, plain!("foo")), heading!(3, plain!("foo")), heading!(4, plain!("foo")), heading!(5, plain!("foo")), heading!(6, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L768>
/// <https://spec.commonmark.org/0.29/#example-32>
fn t32_tab() {
    init!("#\tfoo\n##\tfoo\n###\tfoo\n####\tfoo\n#####\tfoo\n######\tfoo\n");

    assert_eq!(
        // from spec: <h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>
        [
            heading!(1, plain!("foo")), heading!(2, plain!("foo")), heading!(3, plain!("foo")), heading!(4, plain!("foo")), heading!(5, plain!("foo")), heading!(6, plain!("foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\tfoo\n##\tfoo\n###\tfoo\n####\tfoo\n#####\tfoo\n######\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 787
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L787>
/// <https://spec.commonmark.org/0.29/#example-33>
fn t33() {
    init!("####### foo\n");

    assert_eq!(
        // from spec: <p>####### foo</p>
        [
            paragraph!(plain!("####### foo"))
        ].as_slice(),
        body(&mut StringData::new("####### foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 787
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L787>
/// <https://spec.commonmark.org/0.29/#example-33>
fn t33_cr() {
    init!("####### foo\r");

    assert_eq!(
        // from spec: <p>####### foo</p>
        [
            paragraph!(plain!("####### foo"))
        ].as_slice(),
        body(&mut StringData::new("####### foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 787
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L787>
/// <https://spec.commonmark.org/0.29/#example-33>
fn t33_cr_nl() {
    init!("####### foo\r\n");

    assert_eq!(
        // from spec: <p>####### foo</p>
        [
            paragraph!(plain!("####### foo"))
        ].as_slice(),
        body(&mut StringData::new("####### foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 787
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L787>
/// <https://spec.commonmark.org/0.29/#example-33>
fn t33_no_nl() {
    init!("####### foo");

    assert_eq!(
        // from spec: <p>####### foo</p>
        [
            paragraph!(plain!("####### foo"))
        ].as_slice(),
        body(&mut StringData::new("####### foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 787
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L787>
/// <https://spec.commonmark.org/0.29/#example-33>
fn t33_tab() {
    init!("#######\tfoo\n");

    assert_eq!(
        // from spec: <p>####### foo</p>
        [
            paragraph!(plain!("#######	foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#######\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 802
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L802>
/// <https://spec.commonmark.org/0.29/#example-34>
fn t34() {
    init!("#5 bolt\n\n#hashtag\n");

    assert_eq!(
        // from spec: <p>#5 bolt</p>\n<p>#hashtag</p>
        [
            paragraph!(plain!("#5 bolt")), paragraph!(plain!("#hashtag"))
        ].as_slice(),
        body(&mut StringData::new("#5 bolt\n\n#hashtag\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 802
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L802>
/// <https://spec.commonmark.org/0.29/#example-34>
fn t34_cr() {
    init!("#5 bolt\r\r#hashtag\r");

    assert_eq!(
        // from spec: <p>#5 bolt</p>\n<p>#hashtag</p>
        [
            paragraph!(plain!("#5 bolt")), paragraph!(plain!("#hashtag"))
        ].as_slice(),
        body(&mut StringData::new("#5 bolt\r\r#hashtag\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 802
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L802>
/// <https://spec.commonmark.org/0.29/#example-34>
fn t34_cr_nl() {
    init!("#5 bolt\r\n\r\n#hashtag\r\n");

    assert_eq!(
        // from spec: <p>#5 bolt</p>\n<p>#hashtag</p>
        [
            paragraph!(plain!("#5 bolt")), paragraph!(plain!("#hashtag"))
        ].as_slice(),
        body(&mut StringData::new("#5 bolt\r\n\r\n#hashtag\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 802
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L802>
/// <https://spec.commonmark.org/0.29/#example-34>
fn t34_no_nl() {
    init!("#5 bolt\n\n#hashtag");

    assert_eq!(
        // from spec: <p>#5 bolt</p>\n<p>#hashtag</p>
        [
            paragraph!(plain!("#5 bolt")), paragraph!(plain!("#hashtag"))
        ].as_slice(),
        body(&mut StringData::new("#5 bolt\n\n#hashtag", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 802
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L802>
/// <https://spec.commonmark.org/0.29/#example-34>
fn t34_tab() {
    init!("#5\tbolt\n\n#hashtag\n");

    assert_eq!(
        // from spec: <p>#5 bolt</p>\n<p>#hashtag</p>
        [
            paragraph!(plain!("#5	bolt")), paragraph!(plain!("#hashtag"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#5\tbolt\n\n#hashtag\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 814
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L814>
/// <https://spec.commonmark.org/0.29/#example-35>
fn t35() {
    init!("\\## foo\n");

    assert_eq!(
        // from spec: <p>## foo</p>
        [
            paragraph!(plain!("## foo"))
        ].as_slice(),
        body(&mut StringData::new("\\## foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 814
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L814>
/// <https://spec.commonmark.org/0.29/#example-35>
fn t35_cr() {
    init!("\\## foo\r");

    assert_eq!(
        // from spec: <p>## foo</p>
        [
            paragraph!(plain!("## foo"))
        ].as_slice(),
        body(&mut StringData::new("\\## foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 814
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L814>
/// <https://spec.commonmark.org/0.29/#example-35>
fn t35_cr_nl() {
    init!("\\## foo\r\n");

    assert_eq!(
        // from spec: <p>## foo</p>
        [
            paragraph!(plain!("## foo"))
        ].as_slice(),
        body(&mut StringData::new("\\## foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 814
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L814>
/// <https://spec.commonmark.org/0.29/#example-35>
fn t35_no_nl() {
    init!("\\## foo");

    assert_eq!(
        // from spec: <p>## foo</p>
        [
            paragraph!(plain!("## foo"))
        ].as_slice(),
        body(&mut StringData::new("\\## foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 814
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L814>
/// <https://spec.commonmark.org/0.29/#example-35>
fn t35_tab() {
    init!("\\##\tfoo\n");

    assert_eq!(
        // from spec: <p>## foo</p>
        [
            paragraph!(plain!("##	foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\##\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 823
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L823>
/// <https://spec.commonmark.org/0.29/#example-36>
fn t36() {
    init!("# foo *bar* \\*baz\\*\n");

    assert_eq!(
        // from spec: <h1>foo <em>bar</em> *baz*</h1>
        [
            heading!(1, plain!("foo "), emph!(plain!("bar")), plain!(" *baz*"))
        ].as_slice(),
        body(&mut StringData::new("# foo *bar* \\*baz\\*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 823
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L823>
/// <https://spec.commonmark.org/0.29/#example-36>
fn t36_cr() {
    init!("# foo *bar* \\*baz\\*\r");

    assert_eq!(
        // from spec: <h1>foo <em>bar</em> *baz*</h1>
        [
            heading!(1, plain!("foo "), emph!(plain!("bar")), plain!(" *baz*"))
        ].as_slice(),
        body(&mut StringData::new("# foo *bar* \\*baz\\*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 823
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L823>
/// <https://spec.commonmark.org/0.29/#example-36>
fn t36_cr_nl() {
    init!("# foo *bar* \\*baz\\*\r\n");

    assert_eq!(
        // from spec: <h1>foo <em>bar</em> *baz*</h1>
        [
            heading!(1, plain!("foo "), emph!(plain!("bar")), plain!(" *baz*"))
        ].as_slice(),
        body(&mut StringData::new("# foo *bar* \\*baz\\*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 823
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L823>
/// <https://spec.commonmark.org/0.29/#example-36>
fn t36_no_nl() {
    init!("# foo *bar* \\*baz\\*");

    assert_eq!(
        // from spec: <h1>foo <em>bar</em> *baz*</h1>
        [
            heading!(1, plain!("foo "), emph!(plain!("bar")), plain!(" *baz*"))
        ].as_slice(),
        body(&mut StringData::new("# foo *bar* \\*baz\\*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 823
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L823>
/// <https://spec.commonmark.org/0.29/#example-36>
fn t36_tab() {
    init!("#\tfoo\t*bar*\t\\*baz\\*\n");

    assert_eq!(
        // from spec: <h1>foo <em>bar</em> *baz*</h1>
        [
            heading!(1, plain!("foo	"), emph!(plain!("bar")), plain!("	*baz*"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\tfoo\t*bar*\t\\*baz\\*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 832
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L832>
/// <https://spec.commonmark.org/0.29/#example-37>
fn t37() {
    init!("#                  foo                     \n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("#                  foo                     \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 832
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L832>
/// <https://spec.commonmark.org/0.29/#example-37>
fn t37_cr() {
    init!("#                  foo                     \r");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("#                  foo                     \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 832
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L832>
/// <https://spec.commonmark.org/0.29/#example-37>
fn t37_cr_nl() {
    init!("#                  foo                     \r\n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("#                  foo                     \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 832
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L832>
/// <https://spec.commonmark.org/0.29/#example-37>
fn t37_no_nl() {
    init!("#                  foo                     ");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("#                  foo                     ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 832
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L832>
/// <https://spec.commonmark.org/0.29/#example-37>
fn t37_tab() {
    init!("#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfoo\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfoo\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 841
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L841>
/// <https://spec.commonmark.org/0.29/#example-38>
fn t38() {
    init!(" ### foo\n  ## foo\n   # foo\n");

    assert_eq!(
        // from spec: <h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>
        [
            heading!(3, plain!("foo")), heading!(2, plain!("foo")), heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new(" ### foo\n  ## foo\n   # foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 841
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L841>
/// <https://spec.commonmark.org/0.29/#example-38>
fn t38_cr() {
    init!(" ### foo\r  ## foo\r   # foo\r");

    assert_eq!(
        // from spec: <h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>
        [
            heading!(3, plain!("foo")), heading!(2, plain!("foo")), heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new(" ### foo\r  ## foo\r   # foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 841
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L841>
/// <https://spec.commonmark.org/0.29/#example-38>
fn t38_cr_nl() {
    init!(" ### foo\r\n  ## foo\r\n   # foo\r\n");

    assert_eq!(
        // from spec: <h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>
        [
            heading!(3, plain!("foo")), heading!(2, plain!("foo")), heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new(" ### foo\r\n  ## foo\r\n   # foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 841
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L841>
/// <https://spec.commonmark.org/0.29/#example-38>
fn t38_no_nl() {
    init!(" ### foo\n  ## foo\n   # foo");

    assert_eq!(
        // from spec: <h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>
        [
            heading!(3, plain!("foo")), heading!(2, plain!("foo")), heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new(" ### foo\n  ## foo\n   # foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 841
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L841>
/// <https://spec.commonmark.org/0.29/#example-38>
fn t38_tab() {
    init!(" ###\tfoo\n  ##\tfoo\n   #\tfoo\n");

    assert_eq!(
        // from spec: <h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>
        [
            heading!(3, plain!("foo")), heading!(2, plain!("foo")), heading!(1, plain!("foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new(" ###\tfoo\n  ##\tfoo\n   #\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 854
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L854>
/// <https://spec.commonmark.org/0.29/#example-39>
fn t39() {
    init!("    # foo\n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    # foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 854
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L854>
/// <https://spec.commonmark.org/0.29/#example-39>
fn t39_cr() {
    init!("    # foo\r");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    # foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 854
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L854>
/// <https://spec.commonmark.org/0.29/#example-39>
fn t39_cr_nl() {
    init!("    # foo\r\n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    # foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 854
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L854>
/// <https://spec.commonmark.org/0.29/#example-39>
fn t39_no_nl() {
    init!("    # foo");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    # foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 854
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L854>
/// <https://spec.commonmark.org/0.29/#example-39>
fn t39_tab() {
    init!("    #\tfoo\n");

    assert_eq!(
        // from spec: <h1>foo</h1>
        [
            heading!(1, plain!("foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    #\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 862
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L862>
/// <https://spec.commonmark.org/0.29/#example-40>
fn t40() {
    init!("foo\n    # bar\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<h1>bar</h1>
        [
            paragraph!(plain!("foo")), heading!(1, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\n    # bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 862
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L862>
/// <https://spec.commonmark.org/0.29/#example-40>
fn t40_cr() {
    init!("foo\r    # bar\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<h1>bar</h1>
        [
            paragraph!(plain!("foo")), heading!(1, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\r    # bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 862
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L862>
/// <https://spec.commonmark.org/0.29/#example-40>
fn t40_cr_nl() {
    init!("foo\r\n    # bar\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<h1>bar</h1>
        [
            paragraph!(plain!("foo")), heading!(1, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\r\n    # bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 862
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L862>
/// <https://spec.commonmark.org/0.29/#example-40>
fn t40_no_nl() {
    init!("foo\n    # bar");

    assert_eq!(
        // from spec: <p>foo</p>\n<h1>bar</h1>
        [
            paragraph!(plain!("foo")), heading!(1, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\n    # bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 862
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L862>
/// <https://spec.commonmark.org/0.29/#example-40>
fn t40_tab() {
    init!("foo\n    #\tbar\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<h1>bar</h1>
        [
            paragraph!(plain!("foo")), heading!(1, plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\n    #\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L873>
/// <https://spec.commonmark.org/0.29/#example-41>
fn t41() {
    init!("## foo ##\n  ###   bar    ###\n");

    assert_eq!(
        // from spec: <h2>foo ##</h2>\n<h3>bar    ###</h3>
        [
            heading!(2, plain!("foo ##")), heading!(3, plain!("bar    ###"))
        ].as_slice(),
        body(&mut StringData::new("## foo ##\n  ###   bar    ###\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L873>
/// <https://spec.commonmark.org/0.29/#example-41>
fn t41_cr() {
    init!("## foo ##\r  ###   bar    ###\r");

    assert_eq!(
        // from spec: <h2>foo ##</h2>\n<h3>bar    ###</h3>
        [
            heading!(2, plain!("foo ##")), heading!(3, plain!("bar    ###"))
        ].as_slice(),
        body(&mut StringData::new("## foo ##\r  ###   bar    ###\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L873>
/// <https://spec.commonmark.org/0.29/#example-41>
fn t41_cr_nl() {
    init!("## foo ##\r\n  ###   bar    ###\r\n");

    assert_eq!(
        // from spec: <h2>foo ##</h2>\n<h3>bar    ###</h3>
        [
            heading!(2, plain!("foo ##")), heading!(3, plain!("bar    ###"))
        ].as_slice(),
        body(&mut StringData::new("## foo ##\r\n  ###   bar    ###\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L873>
/// <https://spec.commonmark.org/0.29/#example-41>
fn t41_no_nl() {
    init!("## foo ##\n  ###   bar    ###");

    assert_eq!(
        // from spec: <h2>foo ##</h2>\n<h3>bar    ###</h3>
        [
            heading!(2, plain!("foo ##")), heading!(3, plain!("bar    ###"))
        ].as_slice(),
        body(&mut StringData::new("## foo ##\n  ###   bar    ###", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L873>
/// <https://spec.commonmark.org/0.29/#example-41>
fn t41_tab() {
    init!("##\tfoo\t##\n  ###\t\t\tbar\t\t\t\t###\n");

    assert_eq!(
        // from spec: <h2>foo ##</h2>\n<h3>bar    ###</h3>
        [
            heading!(2, plain!("foo	##")), heading!(3, plain!("bar				###"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("##\tfoo\t##\n  ###\t\t\tbar\t\t\t\t###\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 884
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L884>
/// <https://spec.commonmark.org/0.29/#example-42>
fn t42() {
    init!("# foo ##################################\n##### foo ##\n");

    assert_eq!(
        // from spec: <h1>foo ##################################</h1>\n<h5>foo ##</h5>
        [
            heading!(1, plain!("foo ##################################")), heading!(5, plain!("foo ##"))
        ].as_slice(),
        body(&mut StringData::new("# foo ##################################\n##### foo ##\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 884
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L884>
/// <https://spec.commonmark.org/0.29/#example-42>
fn t42_cr() {
    init!("# foo ##################################\r##### foo ##\r");

    assert_eq!(
        // from spec: <h1>foo ##################################</h1>\n<h5>foo ##</h5>
        [
            heading!(1, plain!("foo ##################################")), heading!(5, plain!("foo ##"))
        ].as_slice(),
        body(&mut StringData::new("# foo ##################################\r##### foo ##\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 884
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L884>
/// <https://spec.commonmark.org/0.29/#example-42>
fn t42_cr_nl() {
    init!("# foo ##################################\r\n##### foo ##\r\n");

    assert_eq!(
        // from spec: <h1>foo ##################################</h1>\n<h5>foo ##</h5>
        [
            heading!(1, plain!("foo ##################################")), heading!(5, plain!("foo ##"))
        ].as_slice(),
        body(&mut StringData::new("# foo ##################################\r\n##### foo ##\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 884
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L884>
/// <https://spec.commonmark.org/0.29/#example-42>
fn t42_no_nl() {
    init!("# foo ##################################\n##### foo ##");

    assert_eq!(
        // from spec: <h1>foo ##################################</h1>\n<h5>foo ##</h5>
        [
            heading!(1, plain!("foo ##################################")), heading!(5, plain!("foo ##"))
        ].as_slice(),
        body(&mut StringData::new("# foo ##################################\n##### foo ##", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 884
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L884>
/// <https://spec.commonmark.org/0.29/#example-42>
fn t42_tab() {
    init!("#\tfoo\t##################################\n#####\tfoo\t##\n");

    assert_eq!(
        // from spec: <h1>foo ##################################</h1>\n<h5>foo ##</h5>
        [
            heading!(1, plain!("foo	##################################")), heading!(5, plain!("foo	##"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\tfoo\t##################################\n#####\tfoo\t##\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L895>
/// <https://spec.commonmark.org/0.29/#example-43>
fn t43() {
    init!("### foo ###     \n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>
        [
            heading!(3, plain!("foo ###"))
        ].as_slice(),
        body(&mut StringData::new("### foo ###     \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L895>
/// <https://spec.commonmark.org/0.29/#example-43>
fn t43_cr() {
    init!("### foo ###     \r");

    assert_eq!(
        // from spec: <h3>foo ###</h3>
        [
            heading!(3, plain!("foo ###"))
        ].as_slice(),
        body(&mut StringData::new("### foo ###     \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L895>
/// <https://spec.commonmark.org/0.29/#example-43>
fn t43_cr_nl() {
    init!("### foo ###     \r\n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>
        [
            heading!(3, plain!("foo ###"))
        ].as_slice(),
        body(&mut StringData::new("### foo ###     \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L895>
/// <https://spec.commonmark.org/0.29/#example-43>
fn t43_no_nl() {
    init!("### foo ###     ");

    assert_eq!(
        // from spec: <h3>foo ###</h3>
        [
            heading!(3, plain!("foo ###"))
        ].as_slice(),
        body(&mut StringData::new("### foo ###     ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L895>
/// <https://spec.commonmark.org/0.29/#example-43>
fn t43_tab() {
    init!("###\tfoo\t###\t\t\t  \n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>
        [
            heading!(3, plain!("foo	###"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("###\tfoo\t###\t\t\t  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 906
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L906>
/// <https://spec.commonmark.org/0.29/#example-44>
fn t44() {
    init!("### foo ### b\n");

    assert_eq!(
        // from spec: <h3>foo ### b</h3>
        [
            heading!(3, plain!("foo ### b"))
        ].as_slice(),
        body(&mut StringData::new("### foo ### b\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 906
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L906>
/// <https://spec.commonmark.org/0.29/#example-44>
fn t44_cr() {
    init!("### foo ### b\r");

    assert_eq!(
        // from spec: <h3>foo ### b</h3>
        [
            heading!(3, plain!("foo ### b"))
        ].as_slice(),
        body(&mut StringData::new("### foo ### b\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 906
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L906>
/// <https://spec.commonmark.org/0.29/#example-44>
fn t44_cr_nl() {
    init!("### foo ### b\r\n");

    assert_eq!(
        // from spec: <h3>foo ### b</h3>
        [
            heading!(3, plain!("foo ### b"))
        ].as_slice(),
        body(&mut StringData::new("### foo ### b\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 906
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L906>
/// <https://spec.commonmark.org/0.29/#example-44>
fn t44_no_nl() {
    init!("### foo ### b");

    assert_eq!(
        // from spec: <h3>foo ### b</h3>
        [
            heading!(3, plain!("foo ### b"))
        ].as_slice(),
        body(&mut StringData::new("### foo ### b", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 906
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L906>
/// <https://spec.commonmark.org/0.29/#example-44>
fn t44_tab() {
    init!("###\tfoo\t###\tb\n");

    assert_eq!(
        // from spec: <h3>foo ### b</h3>
        [
            heading!(3, plain!("foo	###	b"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("###\tfoo\t###\tb\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 915
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L915>
/// <https://spec.commonmark.org/0.29/#example-45>
fn t45() {
    init!("# foo#\n");

    assert_eq!(
        // from spec: <h1>foo#</h1>
        [
            heading!(1, plain!("foo#"))
        ].as_slice(),
        body(&mut StringData::new("# foo#\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 915
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L915>
/// <https://spec.commonmark.org/0.29/#example-45>
fn t45_cr() {
    init!("# foo#\r");

    assert_eq!(
        // from spec: <h1>foo#</h1>
        [
            heading!(1, plain!("foo#"))
        ].as_slice(),
        body(&mut StringData::new("# foo#\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 915
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L915>
/// <https://spec.commonmark.org/0.29/#example-45>
fn t45_cr_nl() {
    init!("# foo#\r\n");

    assert_eq!(
        // from spec: <h1>foo#</h1>
        [
            heading!(1, plain!("foo#"))
        ].as_slice(),
        body(&mut StringData::new("# foo#\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 915
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L915>
/// <https://spec.commonmark.org/0.29/#example-45>
fn t45_no_nl() {
    init!("# foo#");

    assert_eq!(
        // from spec: <h1>foo#</h1>
        [
            heading!(1, plain!("foo#"))
        ].as_slice(),
        body(&mut StringData::new("# foo#", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 915
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L915>
/// <https://spec.commonmark.org/0.29/#example-45>
fn t45_tab() {
    init!("#\tfoo#\n");

    assert_eq!(
        // from spec: <h1>foo#</h1>
        [
            heading!(1, plain!("foo#"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\tfoo#\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L925>
/// <https://spec.commonmark.org/0.29/#example-46>
fn t46() {
    init!("### foo \\###\n## foo #\\##\n# foo \\#\n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>
        [
            heading!(3, plain!("foo ###")), heading!(2, plain!("foo ###")), heading!(1, plain!("foo #"))
        ].as_slice(),
        body(&mut StringData::new("### foo \\###\n## foo #\\##\n# foo \\#\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L925>
/// <https://spec.commonmark.org/0.29/#example-46>
fn t46_cr() {
    init!("### foo \\###\r## foo #\\##\r# foo \\#\r");

    assert_eq!(
        // from spec: <h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>
        [
            heading!(3, plain!("foo ###")), heading!(2, plain!("foo ###")), heading!(1, plain!("foo #"))
        ].as_slice(),
        body(&mut StringData::new("### foo \\###\r## foo #\\##\r# foo \\#\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L925>
/// <https://spec.commonmark.org/0.29/#example-46>
fn t46_cr_nl() {
    init!("### foo \\###\r\n## foo #\\##\r\n# foo \\#\r\n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>
        [
            heading!(3, plain!("foo ###")), heading!(2, plain!("foo ###")), heading!(1, plain!("foo #"))
        ].as_slice(),
        body(&mut StringData::new("### foo \\###\r\n## foo #\\##\r\n# foo \\#\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L925>
/// <https://spec.commonmark.org/0.29/#example-46>
fn t46_no_nl() {
    init!("### foo \\###\n## foo #\\##\n# foo \\#");

    assert_eq!(
        // from spec: <h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>
        [
            heading!(3, plain!("foo ###")), heading!(2, plain!("foo ###")), heading!(1, plain!("foo #"))
        ].as_slice(),
        body(&mut StringData::new("### foo \\###\n## foo #\\##\n# foo \\#", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L925>
/// <https://spec.commonmark.org/0.29/#example-46>
fn t46_tab() {
    init!("###\tfoo\t\\###\n##\tfoo\t#\\##\n#\tfoo\t\\#\n");

    assert_eq!(
        // from spec: <h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>
        [
            heading!(3, plain!("foo	###")), heading!(2, plain!("foo	###")), heading!(1, plain!("foo	#"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("###\tfoo\t\\###\n##\tfoo\t#\\##\n#\tfoo\t\\#\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 939
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L939>
/// <https://spec.commonmark.org/0.29/#example-47>
fn t47() {
    init!("****\n## foo\n****\n");

    assert_eq!(
        // from spec: <hr />\n<h2>foo</h2>\n<hr />
        [
            Break, heading!(2, plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("****\n## foo\n****\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 939
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L939>
/// <https://spec.commonmark.org/0.29/#example-47>
fn t47_cr() {
    init!("****\r## foo\r****\r");

    assert_eq!(
        // from spec: <hr />\n<h2>foo</h2>\n<hr />
        [
            Break, heading!(2, plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("****\r## foo\r****\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 939
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L939>
/// <https://spec.commonmark.org/0.29/#example-47>
fn t47_cr_nl() {
    init!("****\r\n## foo\r\n****\r\n");

    assert_eq!(
        // from spec: <hr />\n<h2>foo</h2>\n<hr />
        [
            Break, heading!(2, plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("****\r\n## foo\r\n****\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 939
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L939>
/// <https://spec.commonmark.org/0.29/#example-47>
fn t47_no_nl() {
    init!("****\n## foo\n****");

    assert_eq!(
        // from spec: <hr />\n<h2>foo</h2>\n<hr />
        [
            Break, heading!(2, plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("****\n## foo\n****", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 939
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L939>
/// <https://spec.commonmark.org/0.29/#example-47>
fn t47_tab() {
    init!("****\n##\tfoo\n****\n");

    assert_eq!(
        // from spec: <hr />\n<h2>foo</h2>\n<hr />
        [
            Break, heading!(2, plain!("foo")), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("****\n##\tfoo\n****\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 950
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L950>
/// <https://spec.commonmark.org/0.29/#example-48>
fn t48() {
    init!("Foo bar\n# baz\nBar foo\n");

    assert_eq!(
        // from spec: <p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>
        [
            paragraph!(plain!("Foo bar")), heading!(1, plain!("baz")), paragraph!(plain!("Bar foo"))
        ].as_slice(),
        body(&mut StringData::new("Foo bar\n# baz\nBar foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 950
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L950>
/// <https://spec.commonmark.org/0.29/#example-48>
fn t48_cr() {
    init!("Foo bar\r# baz\rBar foo\r");

    assert_eq!(
        // from spec: <p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>
        [
            paragraph!(plain!("Foo bar")), heading!(1, plain!("baz")), paragraph!(plain!("Bar foo"))
        ].as_slice(),
        body(&mut StringData::new("Foo bar\r# baz\rBar foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 950
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L950>
/// <https://spec.commonmark.org/0.29/#example-48>
fn t48_cr_nl() {
    init!("Foo bar\r\n# baz\r\nBar foo\r\n");

    assert_eq!(
        // from spec: <p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>
        [
            paragraph!(plain!("Foo bar")), heading!(1, plain!("baz")), paragraph!(plain!("Bar foo"))
        ].as_slice(),
        body(&mut StringData::new("Foo bar\r\n# baz\r\nBar foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 950
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L950>
/// <https://spec.commonmark.org/0.29/#example-48>
fn t48_no_nl() {
    init!("Foo bar\n# baz\nBar foo");

    assert_eq!(
        // from spec: <p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>
        [
            paragraph!(plain!("Foo bar")), heading!(1, plain!("baz")), paragraph!(plain!("Bar foo"))
        ].as_slice(),
        body(&mut StringData::new("Foo bar\n# baz\nBar foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 950
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L950>
/// <https://spec.commonmark.org/0.29/#example-48>
fn t48_tab() {
    init!("Foo\tbar\n#\tbaz\nBar\tfoo\n");

    assert_eq!(
        // from spec: <p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>
        [
            paragraph!(plain!("Foo	bar")), heading!(1, plain!("baz")), paragraph!(plain!("Bar	foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\tbar\n#\tbaz\nBar\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L963>
/// <https://spec.commonmark.org/0.29/#example-49>
fn t49() {
    init!("## \n#\n### ###\n");

    assert_eq!(
        // from spec: <h2></h2>\n<h1></h1>\n<h3>###</h3>
        [
            heading!(2), heading!(1), heading!(3, plain!("###"))
        ].as_slice(),
        body(&mut StringData::new("## \n#\n### ###\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L963>
/// <https://spec.commonmark.org/0.29/#example-49>
fn t49_cr() {
    init!("## \r#\r### ###\r");

    assert_eq!(
        // from spec: <h2></h2>\n<h1></h1>\n<h3>###</h3>
        [
            heading!(2), heading!(1), heading!(3, plain!("###"))
        ].as_slice(),
        body(&mut StringData::new("## \r#\r### ###\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L963>
/// <https://spec.commonmark.org/0.29/#example-49>
fn t49_cr_nl() {
    init!("## \r\n#\r\n### ###\r\n");

    assert_eq!(
        // from spec: <h2></h2>\n<h1></h1>\n<h3>###</h3>
        [
            heading!(2), heading!(1), heading!(3, plain!("###"))
        ].as_slice(),
        body(&mut StringData::new("## \r\n#\r\n### ###\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L963>
/// <https://spec.commonmark.org/0.29/#example-49>
fn t49_no_nl() {
    init!("## \n#\n### ###");

    assert_eq!(
        // from spec: <h2></h2>\n<h1></h1>\n<h3>###</h3>
        [
            heading!(2), heading!(1), heading!(3, plain!("###"))
        ].as_slice(),
        body(&mut StringData::new("## \n#\n### ###", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L963>
/// <https://spec.commonmark.org/0.29/#example-49>
fn t49_tab() {
    init!("##\t\n#\n###\t###\n");

    assert_eq!(
        // from spec: <h2></h2>\n<h1></h1>\n<h3>###</h3>
        [
            heading!(2), heading!(1), heading!(3, plain!("###"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("##\t\n#\n###\t###\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1006
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1006>
/// <https://spec.commonmark.org/0.29/#example-50>
fn t50() {
    init!("Foo *bar*\n=========\n\nFoo *bar*\n---------\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar</em>\n=========</p>\n<p>Foo <em>bar</em></p>\n<hr />
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar")), SoftBreak, plain!("=========")), paragraph!(plain!("Foo "), emph!(plain!("bar"))), Break
        ].as_slice(),
        body(&mut StringData::new("Foo *bar*\n=========\n\nFoo *bar*\n---------\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1006
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1006>
/// <https://spec.commonmark.org/0.29/#example-50>
fn t50_cr() {
    init!("Foo *bar*\r=========\r\rFoo *bar*\r---------\r");

    assert_eq!(
        // from spec: <p>Foo <em>bar</em>\n=========</p>\n<p>Foo <em>bar</em></p>\n<hr />
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar")), SoftBreak, plain!("=========")), paragraph!(plain!("Foo "), emph!(plain!("bar"))), Break
        ].as_slice(),
        body(&mut StringData::new("Foo *bar*\r=========\r\rFoo *bar*\r---------\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1006
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1006>
/// <https://spec.commonmark.org/0.29/#example-50>
fn t50_cr_nl() {
    init!("Foo *bar*\r\n=========\r\n\r\nFoo *bar*\r\n---------\r\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar</em>\n=========</p>\n<p>Foo <em>bar</em></p>\n<hr />
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar")), SoftBreak, plain!("=========")), paragraph!(plain!("Foo "), emph!(plain!("bar"))), Break
        ].as_slice(),
        body(&mut StringData::new("Foo *bar*\r\n=========\r\n\r\nFoo *bar*\r\n---------\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1006
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1006>
/// <https://spec.commonmark.org/0.29/#example-50>
fn t50_no_nl() {
    init!("Foo *bar*\n=========\n\nFoo *bar*\n---------");

    assert_eq!(
        // from spec: <p>Foo <em>bar</em>\n=========</p>\n<p>Foo <em>bar</em></p>\n<hr />
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar")), SoftBreak, plain!("=========")), paragraph!(plain!("Foo "), emph!(plain!("bar"))), Break
        ].as_slice(),
        body(&mut StringData::new("Foo *bar*\n=========\n\nFoo *bar*\n---------", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1006
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1006>
/// <https://spec.commonmark.org/0.29/#example-50>
fn t50_tab() {
    init!("Foo\t*bar*\n=========\n\nFoo\t*bar*\n---------\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar</em>\n=========</p>\n<p>Foo <em>bar</em></p>\n<hr />
        [
            paragraph!(plain!("Foo	"), emph!(plain!("bar")), SoftBreak, plain!("=========")), paragraph!(plain!("Foo	"), emph!(plain!("bar"))), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\t*bar*\n=========\n\nFoo\t*bar*\n---------\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1020
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1020>
/// <https://spec.commonmark.org/0.29/#example-51>
fn t51() {
    init!("Foo *bar\nbaz*\n====\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("Foo *bar\nbaz*\n====\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1020
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1020>
/// <https://spec.commonmark.org/0.29/#example-51>
fn t51_cr() {
    init!("Foo *bar\rbaz*\r====\r");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("Foo *bar\rbaz*\r====\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1020
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1020>
/// <https://spec.commonmark.org/0.29/#example-51>
fn t51_cr_nl() {
    init!("Foo *bar\r\nbaz*\r\n====\r\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("Foo *bar\r\nbaz*\r\n====\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1020
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1020>
/// <https://spec.commonmark.org/0.29/#example-51>
fn t51_no_nl() {
    init!("Foo *bar\nbaz*\n====");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("Foo *bar\nbaz*\n====", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1020
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1020>
/// <https://spec.commonmark.org/0.29/#example-51>
fn t51_tab() {
    init!("Foo\t*bar\nbaz*\n====\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo	"), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\t*bar\nbaz*\n====\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1034
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1034>
/// <https://spec.commonmark.org/0.29/#example-52>
fn t52() {
    init!("  Foo *bar\nbaz*→\n====\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("  Foo *bar\nbaz*\t\n====\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1034
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1034>
/// <https://spec.commonmark.org/0.29/#example-52>
fn t52_cr() {
    init!("  Foo *bar\rbaz*→\r====\r");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("  Foo *bar\rbaz*\t\r====\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1034
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1034>
/// <https://spec.commonmark.org/0.29/#example-52>
fn t52_cr_nl() {
    init!("  Foo *bar\r\nbaz*→\r\n====\r\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("  Foo *bar\r\nbaz*\t\r\n====\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1034
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1034>
/// <https://spec.commonmark.org/0.29/#example-52>
fn t52_no_nl() {
    init!("  Foo *bar\nbaz*→\n====");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo "), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("  Foo *bar\nbaz*\t\n====", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1034
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1034>
/// <https://spec.commonmark.org/0.29/#example-52>
fn t52_tab() {
    init!("  Foo\t*bar\nbaz*→\n====\n");

    assert_eq!(
        // from spec: <p>Foo <em>bar\nbaz</em>\n====</p>
        [
            paragraph!(plain!("Foo	"), emph!(plain!("bar"), SoftBreak, plain!("baz")), SoftBreak, plain!("===="))
        ].as_slice(),
        space2tab(body(&mut StringData::new("  Foo\t*bar\nbaz*\t\n====\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1046
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1046>
/// <https://spec.commonmark.org/0.29/#example-53>
fn t53() {
    init!("Foo\n-------------------------\n\nFoo\n=\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo\n=</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("="))
        ].as_slice(),
        body(&mut StringData::new("Foo\n-------------------------\n\nFoo\n=\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1046
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1046>
/// <https://spec.commonmark.org/0.29/#example-53>
fn t53_cr() {
    init!("Foo\r-------------------------\r\rFoo\r=\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo\n=</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("="))
        ].as_slice(),
        body(&mut StringData::new("Foo\r-------------------------\r\rFoo\r=\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1046
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1046>
/// <https://spec.commonmark.org/0.29/#example-53>
fn t53_cr_nl() {
    init!("Foo\r\n-------------------------\r\n\r\nFoo\r\n=\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo\n=</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("="))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n-------------------------\r\n\r\nFoo\r\n=\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1046
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1046>
/// <https://spec.commonmark.org/0.29/#example-53>
fn t53_no_nl() {
    init!("Foo\n-------------------------\n\nFoo\n=");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo\n=</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("="))
        ].as_slice(),
        body(&mut StringData::new("Foo\n-------------------------\n\nFoo\n=", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1061
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1061>
/// <https://spec.commonmark.org/0.29/#example-54>
fn t54() {
    init!("   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />\n<p>Foo\n===</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1061
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1061>
/// <https://spec.commonmark.org/0.29/#example-54>
fn t54_cr() {
    init!("   Foo\r---\r\r  Foo\r-----\r\r  Foo\r  ===\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />\n<p>Foo\n===</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("   Foo\r---\r\r  Foo\r-----\r\r  Foo\r  ===\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1061
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1061>
/// <https://spec.commonmark.org/0.29/#example-54>
fn t54_cr_nl() {
    init!("   Foo\r\n---\r\n\r\n  Foo\r\n-----\r\n\r\n  Foo\r\n  ===\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />\n<p>Foo\n===</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("   Foo\r\n---\r\n\r\n  Foo\r\n-----\r\n\r\n  Foo\r\n  ===\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1061
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1061>
/// <https://spec.commonmark.org/0.29/#example-54>
fn t54_no_nl() {
    init!("   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />\n<p>Foo\n===</p>
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo"), SoftBreak, plain!("==="))
        ].as_slice(),
        body(&mut StringData::new("   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1079
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1079>
/// <https://spec.commonmark.org/0.29/#example-55>
fn t55() {
    init!("    Foo\n    ---\n\n    Foo\n---\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    Foo\n    ---\n\n    Foo\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1079
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1079>
/// <https://spec.commonmark.org/0.29/#example-55>
fn t55_cr() {
    init!("    Foo\r    ---\r\r    Foo\r---\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    Foo\r    ---\r\r    Foo\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1079
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1079>
/// <https://spec.commonmark.org/0.29/#example-55>
fn t55_cr_nl() {
    init!("    Foo\r\n    ---\r\n\r\n    Foo\r\n---\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    Foo\r\n    ---\r\n\r\n    Foo\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1079
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1079>
/// <https://spec.commonmark.org/0.29/#example-55>
fn t55_no_nl() {
    init!("    Foo\n    ---\n\n    Foo\n---");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break, paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    Foo\n    ---\n\n    Foo\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1098
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1098>
/// <https://spec.commonmark.org/0.29/#example-56>
fn t56() {
    init!("Foo\n   ----      \n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n   ----      \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1098
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1098>
/// <https://spec.commonmark.org/0.29/#example-56>
fn t56_cr() {
    init!("Foo\r   ----      \r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r   ----      \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1098
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1098>
/// <https://spec.commonmark.org/0.29/#example-56>
fn t56_cr_nl() {
    init!("Foo\r\n   ----      \r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n   ----      \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1098
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1098>
/// <https://spec.commonmark.org/0.29/#example-56>
fn t56_no_nl() {
    init!("Foo\n   ----      ");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n   ----      ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1098
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1098>
/// <https://spec.commonmark.org/0.29/#example-56>
fn t56_tab() {
    init!("Foo\n   ----\t\t\t\t  \n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\n   ----\t\t\t\t  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1108
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1108>
/// <https://spec.commonmark.org/0.29/#example-57>
fn t57() {
    init!("Foo\n    ---\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n    ---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1108
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1108>
/// <https://spec.commonmark.org/0.29/#example-57>
fn t57_cr() {
    init!("Foo\r    ---\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r    ---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1108
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1108>
/// <https://spec.commonmark.org/0.29/#example-57>
fn t57_cr_nl() {
    init!("Foo\r\n    ---\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n    ---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1108
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1108>
/// <https://spec.commonmark.org/0.29/#example-57>
fn t57_no_nl() {
    init!("Foo\n    ---");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n    ---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1119
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1119>
/// <https://spec.commonmark.org/0.29/#example-58>
fn t58() {
    init!("Foo\n= =\n\nFoo\n--- -\n");

    assert_eq!(
        // from spec: <p>Foo\n= =</p>\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("= =")), paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n= =\n\nFoo\n--- -\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1119
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1119>
/// <https://spec.commonmark.org/0.29/#example-58>
fn t58_cr() {
    init!("Foo\r= =\r\rFoo\r--- -\r");

    assert_eq!(
        // from spec: <p>Foo\n= =</p>\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("= =")), paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r= =\r\rFoo\r--- -\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1119
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1119>
/// <https://spec.commonmark.org/0.29/#example-58>
fn t58_cr_nl() {
    init!("Foo\r\n= =\r\n\r\nFoo\r\n--- -\r\n");

    assert_eq!(
        // from spec: <p>Foo\n= =</p>\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("= =")), paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n= =\r\n\r\nFoo\r\n--- -\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1119
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1119>
/// <https://spec.commonmark.org/0.29/#example-58>
fn t58_no_nl() {
    init!("Foo\n= =\n\nFoo\n--- -");

    assert_eq!(
        // from spec: <p>Foo\n= =</p>\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("= =")), paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\n= =\n\nFoo\n--- -", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1119
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1119>
/// <https://spec.commonmark.org/0.29/#example-58>
fn t58_tab() {
    init!("Foo\n=\t=\n\nFoo\n---\t-\n");

    assert_eq!(
        // from spec: <p>Foo\n= =</p>\n<p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("=	=")), paragraph!(plain!("Foo")), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\n=\t=\n\nFoo\n---\t-\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1135>
/// <https://spec.commonmark.org/0.29/#example-59>
fn t59() {
    init!("Foo  \n-----\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo  \n-----\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1135>
/// <https://spec.commonmark.org/0.29/#example-59>
fn t59_cr() {
    init!("Foo  \r-----\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo  \r-----\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1135>
/// <https://spec.commonmark.org/0.29/#example-59>
fn t59_cr_nl() {
    init!("Foo  \r\n-----\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo  \r\n-----\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1135>
/// <https://spec.commonmark.org/0.29/#example-59>
fn t59_no_nl() {
    init!("Foo  \n-----");

    assert_eq!(
        // from spec: <p>Foo</p>\n<hr />
        [
            paragraph!(plain!("Foo")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo  \n-----", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1145
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1145>
/// <https://spec.commonmark.org/0.29/#example-60>
fn t60() {
    init!("Foo\\\n----\n");

    assert_eq!(
        // from spec: <p>Foo\\</p>\n<hr />
        [
            paragraph!(plain!("Foo\\")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\\\n----\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1145
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1145>
/// <https://spec.commonmark.org/0.29/#example-60>
fn t60_cr() {
    init!("Foo\\\r----\r");

    assert_eq!(
        // from spec: <p>Foo\\</p>\n<hr />
        [
            paragraph!(plain!("Foo\\")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\\\r----\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1145
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1145>
/// <https://spec.commonmark.org/0.29/#example-60>
fn t60_cr_nl() {
    init!("Foo\\\r\n----\r\n");

    assert_eq!(
        // from spec: <p>Foo\\</p>\n<hr />
        [
            paragraph!(plain!("Foo\\")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\\\r\n----\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1145
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1145>
/// <https://spec.commonmark.org/0.29/#example-60>
fn t60_no_nl() {
    init!("Foo\\\n----");

    assert_eq!(
        // from spec: <p>Foo\\</p>\n<hr />
        [
            paragraph!(plain!("Foo\\")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\\\n----", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1156
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1156>
/// <https://spec.commonmark.org/0.29/#example-61>
fn t61() {
    init!("`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n");

    assert_eq!(
        // from spec: <p>`Foo</p>\n<hr />\n<p>`</p>\n<p>&lt;a title=&quot;a lot</p>\n<hr />\n<p>of dashes&quot;/&gt;</p>
        [
            paragraph!(plain!("`Foo")), Break, paragraph!(plain!("`")), paragraph!(plain!("<a title=\"a lot")), Break, paragraph!(plain!("of dashes\"/>"))
        ].as_slice(),
        body(&mut StringData::new("`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1156
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1156>
/// <https://spec.commonmark.org/0.29/#example-61>
fn t61_cr() {
    init!("`Foo\r----\r`\r\r<a title=\"a lot\r---\rof dashes\"/>\r");

    assert_eq!(
        // from spec: <p>`Foo</p>\n<hr />\n<p>`</p>\n<p>&lt;a title=&quot;a lot</p>\n<hr />\n<p>of dashes&quot;/&gt;</p>
        [
            paragraph!(plain!("`Foo")), Break, paragraph!(plain!("`")), paragraph!(plain!("<a title=\"a lot")), Break, paragraph!(plain!("of dashes\"/>"))
        ].as_slice(),
        body(&mut StringData::new("`Foo\r----\r`\r\r<a title=\"a lot\r---\rof dashes\"/>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1156
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1156>
/// <https://spec.commonmark.org/0.29/#example-61>
fn t61_cr_nl() {
    init!("`Foo\r\n----\r\n`\r\n\r\n<a title=\"a lot\r\n---\r\nof dashes\"/>\r\n");

    assert_eq!(
        // from spec: <p>`Foo</p>\n<hr />\n<p>`</p>\n<p>&lt;a title=&quot;a lot</p>\n<hr />\n<p>of dashes&quot;/&gt;</p>
        [
            paragraph!(plain!("`Foo")), Break, paragraph!(plain!("`")), paragraph!(plain!("<a title=\"a lot")), Break, paragraph!(plain!("of dashes\"/>"))
        ].as_slice(),
        body(&mut StringData::new("`Foo\r\n----\r\n`\r\n\r\n<a title=\"a lot\r\n---\r\nof dashes\"/>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1156
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1156>
/// <https://spec.commonmark.org/0.29/#example-61>
fn t61_no_nl() {
    init!("`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>");

    assert_eq!(
        // from spec: <p>`Foo</p>\n<hr />\n<p>`</p>\n<p>&lt;a title=&quot;a lot</p>\n<hr />\n<p>of dashes&quot;/&gt;</p>
        [
            paragraph!(plain!("`Foo")), Break, paragraph!(plain!("`")), paragraph!(plain!("<a title=\"a lot")), Break, paragraph!(plain!("of dashes\"/>"))
        ].as_slice(),
        body(&mut StringData::new("`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1156
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1156>
/// <https://spec.commonmark.org/0.29/#example-61>
fn t61_tab() {
    init!("`Foo\n----\n`\n\n<a\ttitle=\"a\tlot\n---\nof\tdashes\"/>\n");

    assert_eq!(
        // from spec: <p>`Foo</p>\n<hr />\n<p>`</p>\n<p>&lt;a title=&quot;a lot</p>\n<hr />\n<p>of dashes&quot;/&gt;</p>
        [
            paragraph!(plain!("`Foo")), Break, paragraph!(plain!("`")), paragraph!(plain!("<a	title=\"a	lot")), Break, paragraph!(plain!("of	dashes\"/>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`Foo\n----\n`\n\n<a\ttitle=\"a\tlot\n---\nof\tdashes\"/>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1175
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1175>
/// <https://spec.commonmark.org/0.29/#example-62>
fn t62() {
    init!("> Foo\n---\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("Foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> Foo\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1175
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1175>
/// <https://spec.commonmark.org/0.29/#example-62>
fn t62_cr() {
    init!("> Foo\r---\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("Foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> Foo\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1175
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1175>
/// <https://spec.commonmark.org/0.29/#example-62>
fn t62_cr_nl() {
    init!("> Foo\r\n---\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("Foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> Foo\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1175
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1175>
/// <https://spec.commonmark.org/0.29/#example-62>
fn t62_no_nl() {
    init!("> Foo\n---");

    assert_eq!(
        // from spec: <blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("Foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> Foo\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1175
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1175>
/// <https://spec.commonmark.org/0.29/#example-62>
fn t62_tab() {
    init!(">\tFoo\n---\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("Foo"))), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tFoo\n---\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1186
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1186>
/// <https://spec.commonmark.org/0.29/#example-63>
fn t63() {
    init!("> foo\nbar\n===\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("===")))
        ].as_slice(),
        body(&mut StringData::new("> foo\nbar\n===\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1186
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1186>
/// <https://spec.commonmark.org/0.29/#example-63>
fn t63_cr() {
    init!("> foo\rbar\r===\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("===")))
        ].as_slice(),
        body(&mut StringData::new("> foo\rbar\r===\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1186
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1186>
/// <https://spec.commonmark.org/0.29/#example-63>
fn t63_cr_nl() {
    init!("> foo\r\nbar\r\n===\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("===")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\nbar\r\n===\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1186
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1186>
/// <https://spec.commonmark.org/0.29/#example-63>
fn t63_no_nl() {
    init!("> foo\nbar\n===");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("===")))
        ].as_slice(),
        body(&mut StringData::new("> foo\nbar\n===", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1186
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1186>
/// <https://spec.commonmark.org/0.29/#example-63>
fn t63_tab() {
    init!(">\tfoo\nbar\n===\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("===")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\nbar\n===\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1199>
/// <https://spec.commonmark.org/0.29/#example-64>
fn t64() {
    init!("- Foo\n---\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- Foo\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1199>
/// <https://spec.commonmark.org/0.29/#example-64>
fn t64_cr() {
    init!("- Foo\r---\r");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- Foo\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1199>
/// <https://spec.commonmark.org/0.29/#example-64>
fn t64_cr_nl() {
    init!("- Foo\r\n---\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- Foo\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1199>
/// <https://spec.commonmark.org/0.29/#example-64>
fn t64_no_nl() {
    init!("- Foo\n---");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- Foo\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1199>
/// <https://spec.commonmark.org/0.29/#example-64>
fn t64_tab() {
    init!("-\tFoo\n---\n");

    assert_eq!(
        // from spec: <ul>\n<li>Foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("Foo"))]), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tFoo\n---\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1214>
/// <https://spec.commonmark.org/0.29/#example-65>
fn t65() {
    init!("Foo\nBar\n---\n");

    assert_eq!(
        // from spec: <p>Foo\nBar</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("Bar")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\nBar\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1214>
/// <https://spec.commonmark.org/0.29/#example-65>
fn t65_cr() {
    init!("Foo\rBar\r---\r");

    assert_eq!(
        // from spec: <p>Foo\nBar</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("Bar")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\rBar\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1214>
/// <https://spec.commonmark.org/0.29/#example-65>
fn t65_cr_nl() {
    init!("Foo\r\nBar\r\n---\r\n");

    assert_eq!(
        // from spec: <p>Foo\nBar</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("Bar")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\r\nBar\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1214>
/// <https://spec.commonmark.org/0.29/#example-65>
fn t65_no_nl() {
    init!("Foo\nBar\n---");

    assert_eq!(
        // from spec: <p>Foo\nBar</p>\n<hr />
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("Bar")), Break
        ].as_slice(),
        body(&mut StringData::new("Foo\nBar\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1227>
/// <https://spec.commonmark.org/0.29/#example-66>
fn t66() {
    init!("---\nFoo\n---\nBar\n---\nBaz\n");

    assert_eq!(
        // from spec: <hr />\n<p>Foo</p>\n<hr />\n<p>Bar</p>\n<hr />\n<p>Baz</p>
        [
            Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Bar")), Break, paragraph!(plain!("Baz"))
        ].as_slice(),
        body(&mut StringData::new("---\nFoo\n---\nBar\n---\nBaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1227>
/// <https://spec.commonmark.org/0.29/#example-66>
fn t66_cr() {
    init!("---\rFoo\r---\rBar\r---\rBaz\r");

    assert_eq!(
        // from spec: <hr />\n<p>Foo</p>\n<hr />\n<p>Bar</p>\n<hr />\n<p>Baz</p>
        [
            Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Bar")), Break, paragraph!(plain!("Baz"))
        ].as_slice(),
        body(&mut StringData::new("---\rFoo\r---\rBar\r---\rBaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1227>
/// <https://spec.commonmark.org/0.29/#example-66>
fn t66_cr_nl() {
    init!("---\r\nFoo\r\n---\r\nBar\r\n---\r\nBaz\r\n");

    assert_eq!(
        // from spec: <hr />\n<p>Foo</p>\n<hr />\n<p>Bar</p>\n<hr />\n<p>Baz</p>
        [
            Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Bar")), Break, paragraph!(plain!("Baz"))
        ].as_slice(),
        body(&mut StringData::new("---\r\nFoo\r\n---\r\nBar\r\n---\r\nBaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1227>
/// <https://spec.commonmark.org/0.29/#example-66>
fn t66_no_nl() {
    init!("---\nFoo\n---\nBar\n---\nBaz");

    assert_eq!(
        // from spec: <hr />\n<p>Foo</p>\n<hr />\n<p>Bar</p>\n<hr />\n<p>Baz</p>
        [
            Break, paragraph!(plain!("Foo")), Break, paragraph!(plain!("Bar")), Break, paragraph!(plain!("Baz"))
        ].as_slice(),
        body(&mut StringData::new("---\nFoo\n---\nBar\n---\nBaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1244
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1244>
/// <https://spec.commonmark.org/0.29/#example-67>
fn t67() {
    init!("\n====\n");

    assert_eq!(
        // from spec: <p>====</p>
        [
            paragraph!(plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("\n====\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1244
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1244>
/// <https://spec.commonmark.org/0.29/#example-67>
fn t67_cr() {
    init!("\r====\r");

    assert_eq!(
        // from spec: <p>====</p>
        [
            paragraph!(plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("\r====\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1244
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1244>
/// <https://spec.commonmark.org/0.29/#example-67>
fn t67_cr_nl() {
    init!("\r\n====\r\n");

    assert_eq!(
        // from spec: <p>====</p>
        [
            paragraph!(plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("\r\n====\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1244
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1244>
/// <https://spec.commonmark.org/0.29/#example-67>
fn t67_no_nl() {
    init!("\n====");

    assert_eq!(
        // from spec: <p>====</p>
        [
            paragraph!(plain!("===="))
        ].as_slice(),
        body(&mut StringData::new("\n====", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1256
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1256>
/// <https://spec.commonmark.org/0.29/#example-68>
fn t68() {
    init!("---\n---\n");

    assert_eq!(
        // from spec: <hr />\n<hr />
        [
            Break, Break
        ].as_slice(),
        body(&mut StringData::new("---\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1256
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1256>
/// <https://spec.commonmark.org/0.29/#example-68>
fn t68_cr() {
    init!("---\r---\r");

    assert_eq!(
        // from spec: <hr />\n<hr />
        [
            Break, Break
        ].as_slice(),
        body(&mut StringData::new("---\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1256
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1256>
/// <https://spec.commonmark.org/0.29/#example-68>
fn t68_cr_nl() {
    init!("---\r\n---\r\n");

    assert_eq!(
        // from spec: <hr />\n<hr />
        [
            Break, Break
        ].as_slice(),
        body(&mut StringData::new("---\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1256
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1256>
/// <https://spec.commonmark.org/0.29/#example-68>
fn t68_no_nl() {
    init!("---\n---");

    assert_eq!(
        // from spec: <hr />\n<hr />
        [
            Break, Break
        ].as_slice(),
        body(&mut StringData::new("---\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1265>
/// <https://spec.commonmark.org/0.29/#example-69>
fn t69() {
    init!("- foo\n-----\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- foo\n-----\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1265>
/// <https://spec.commonmark.org/0.29/#example-69>
fn t69_cr() {
    init!("- foo\r-----\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- foo\r-----\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1265>
/// <https://spec.commonmark.org/0.29/#example-69>
fn t69_cr_nl() {
    init!("- foo\r\n-----\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n-----\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1265>
/// <https://spec.commonmark.org/0.29/#example-69>
fn t69_no_nl() {
    init!("- foo\n-----");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break
        ].as_slice(),
        body(&mut StringData::new("- foo\n-----", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1265>
/// <https://spec.commonmark.org/0.29/#example-69>
fn t69_tab() {
    init!("-\tfoo\n-----\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<hr />
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n-----\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1276
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1276>
/// <https://spec.commonmark.org/0.29/#example-70>
fn t70() {
    init!("    foo\n---\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />
        [
            paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    foo\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1276
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1276>
/// <https://spec.commonmark.org/0.29/#example-70>
fn t70_cr() {
    init!("    foo\r---\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />
        [
            paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    foo\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1276
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1276>
/// <https://spec.commonmark.org/0.29/#example-70>
fn t70_cr_nl() {
    init!("    foo\r\n---\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />
        [
            paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    foo\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1276
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1276>
/// <https://spec.commonmark.org/0.29/#example-70>
fn t70_no_nl() {
    init!("    foo\n---");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />
        [
            paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("    foo\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1286>
/// <https://spec.commonmark.org/0.29/#example-71>
fn t71() {
    init!("> foo\n-----\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\n-----\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1286>
/// <https://spec.commonmark.org/0.29/#example-71>
fn t71_cr() {
    init!("> foo\r-----\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\r-----\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1286>
/// <https://spec.commonmark.org/0.29/#example-71>
fn t71_cr_nl() {
    init!("> foo\r\n-----\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n-----\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1286>
/// <https://spec.commonmark.org/0.29/#example-71>
fn t71_no_nl() {
    init!("> foo\n-----");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\n-----", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1286>
/// <https://spec.commonmark.org/0.29/#example-71>
fn t71_tab() {
    init!(">\tfoo\n-----\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n-----\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1300
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1300>
/// <https://spec.commonmark.org/0.29/#example-72>
fn t72() {
    init!("\\> foo\n------\n");

    assert_eq!(
        // from spec: <p>&gt; foo</p>\n<hr />
        [
            paragraph!(plain!("> foo")), Break
        ].as_slice(),
        body(&mut StringData::new("\\> foo\n------\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1300
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1300>
/// <https://spec.commonmark.org/0.29/#example-72>
fn t72_cr() {
    init!("\\> foo\r------\r");

    assert_eq!(
        // from spec: <p>&gt; foo</p>\n<hr />
        [
            paragraph!(plain!("> foo")), Break
        ].as_slice(),
        body(&mut StringData::new("\\> foo\r------\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1300
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1300>
/// <https://spec.commonmark.org/0.29/#example-72>
fn t72_cr_nl() {
    init!("\\> foo\r\n------\r\n");

    assert_eq!(
        // from spec: <p>&gt; foo</p>\n<hr />
        [
            paragraph!(plain!("> foo")), Break
        ].as_slice(),
        body(&mut StringData::new("\\> foo\r\n------\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1300
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1300>
/// <https://spec.commonmark.org/0.29/#example-72>
fn t72_no_nl() {
    init!("\\> foo\n------");

    assert_eq!(
        // from spec: <p>&gt; foo</p>\n<hr />
        [
            paragraph!(plain!("> foo")), Break
        ].as_slice(),
        body(&mut StringData::new("\\> foo\n------", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1300
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1300>
/// <https://spec.commonmark.org/0.29/#example-72>
fn t72_tab() {
    init!("\\>\tfoo\n------\n");

    assert_eq!(
        // from spec: <p>&gt; foo</p>\n<hr />
        [
            paragraph!(plain!(">	foo")), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\>\tfoo\n------\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1331>
/// <https://spec.commonmark.org/0.29/#example-73>
fn t73() {
    init!("Foo\n\nbar\n---\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<p>bar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo")), paragraph!(plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n\nbar\n---\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1331>
/// <https://spec.commonmark.org/0.29/#example-73>
fn t73_cr() {
    init!("Foo\r\rbar\r---\rbaz\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<p>bar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo")), paragraph!(plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\rbar\r---\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1331>
/// <https://spec.commonmark.org/0.29/#example-73>
fn t73_cr_nl() {
    init!("Foo\r\n\r\nbar\r\n---\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<p>bar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo")), paragraph!(plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n\r\nbar\r\n---\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1331>
/// <https://spec.commonmark.org/0.29/#example-73>
fn t73_no_nl() {
    init!("Foo\n\nbar\n---\nbaz");

    assert_eq!(
        // from spec: <p>Foo</p>\n<p>bar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo")), paragraph!(plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n\nbar\n---\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1347>
/// <https://spec.commonmark.org/0.29/#example-74>
fn t74() {
    init!("Foo\nbar\n\n---\n\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n\n---\n\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1347>
/// <https://spec.commonmark.org/0.29/#example-74>
fn t74_cr() {
    init!("Foo\rbar\r\r---\r\rbaz\r");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\rbar\r\r---\r\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1347>
/// <https://spec.commonmark.org/0.29/#example-74>
fn t74_cr_nl() {
    init!("Foo\r\nbar\r\n\r\n---\r\n\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\nbar\r\n\r\n---\r\n\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1347>
/// <https://spec.commonmark.org/0.29/#example-74>
fn t74_no_nl() {
    init!("Foo\nbar\n\n---\n\nbaz");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n\n---\n\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1365
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1365>
/// <https://spec.commonmark.org/0.29/#example-75>
fn t75() {
    init!("Foo\nbar\n* * *\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n* * *\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1365
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1365>
/// <https://spec.commonmark.org/0.29/#example-75>
fn t75_cr() {
    init!("Foo\rbar\r* * *\rbaz\r");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\rbar\r* * *\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1365
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1365>
/// <https://spec.commonmark.org/0.29/#example-75>
fn t75_cr_nl() {
    init!("Foo\r\nbar\r\n* * *\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\nbar\r\n* * *\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1365
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1365>
/// <https://spec.commonmark.org/0.29/#example-75>
fn t75_no_nl() {
    init!("Foo\nbar\n* * *\nbaz");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n* * *\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1365
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1365>
/// <https://spec.commonmark.org/0.29/#example-75>
fn t75_tab() {
    init!("Foo\nbar\n*\t*\t*\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>\n<hr />\n<p>baz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar")), Break, paragraph!(plain!("baz"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\nbar\n*\t*\t*\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1380
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1380>
/// <https://spec.commonmark.org/0.29/#example-76>
fn t76() {
    init!("Foo\nbar\n\\---\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\nbar\n---\nbaz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("---"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n\\---\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1380
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1380>
/// <https://spec.commonmark.org/0.29/#example-76>
fn t76_cr() {
    init!("Foo\rbar\r\\---\rbaz\r");

    assert_eq!(
        // from spec: <p>Foo\nbar\n---\nbaz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("---"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\rbar\r\\---\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1380
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1380>
/// <https://spec.commonmark.org/0.29/#example-76>
fn t76_cr_nl() {
    init!("Foo\r\nbar\r\n\\---\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>Foo\nbar\n---\nbaz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("---"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\nbar\r\n\\---\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1380
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1380>
/// <https://spec.commonmark.org/0.29/#example-76>
fn t76_no_nl() {
    init!("Foo\nbar\n\\---\nbaz");

    assert_eq!(
        // from spec: <p>Foo\nbar\n---\nbaz</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("---"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("Foo\nbar\n\\---\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1408
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1408>
/// <https://spec.commonmark.org/0.29/#example-77>
fn t77() {
    init!("    a simple\n      indented code block\n");

    assert_eq!(
        // from spec: <p>a simple\nindented code block</p>
        [
            paragraph!(plain!("a simple"), SoftBreak, plain!("indented code block"))
        ].as_slice(),
        body(&mut StringData::new("    a simple\n      indented code block\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1408
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1408>
/// <https://spec.commonmark.org/0.29/#example-77>
fn t77_cr() {
    init!("    a simple\r      indented code block\r");

    assert_eq!(
        // from spec: <p>a simple\nindented code block</p>
        [
            paragraph!(plain!("a simple"), SoftBreak, plain!("indented code block"))
        ].as_slice(),
        body(&mut StringData::new("    a simple\r      indented code block\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1408
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1408>
/// <https://spec.commonmark.org/0.29/#example-77>
fn t77_cr_nl() {
    init!("    a simple\r\n      indented code block\r\n");

    assert_eq!(
        // from spec: <p>a simple\nindented code block</p>
        [
            paragraph!(plain!("a simple"), SoftBreak, plain!("indented code block"))
        ].as_slice(),
        body(&mut StringData::new("    a simple\r\n      indented code block\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1408
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1408>
/// <https://spec.commonmark.org/0.29/#example-77>
fn t77_no_nl() {
    init!("    a simple\n      indented code block");

    assert_eq!(
        // from spec: <p>a simple\nindented code block</p>
        [
            paragraph!(plain!("a simple"), SoftBreak, plain!("indented code block"))
        ].as_slice(),
        body(&mut StringData::new("    a simple\n      indented code block", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1408
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1408>
/// <https://spec.commonmark.org/0.29/#example-77>
fn t77_tab() {
    init!("    a\tsimple\n    \t\tindented\tcode\tblock\n");

    assert_eq!(
        // from spec: <p>a simple\nindented code block</p>
        [
            paragraph!(plain!("a	simple"), SoftBreak, plain!("indented	code	block"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    a\tsimple\n    \t\tindented\tcode\tblock\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1422
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1422>
/// <https://spec.commonmark.org/0.29/#example-78>
fn t78() {
    init!("  - foo\n\n    bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\n\n    bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1422
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1422>
/// <https://spec.commonmark.org/0.29/#example-78>
fn t78_cr() {
    init!("  - foo\r\r    bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\r\r    bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1422
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1422>
/// <https://spec.commonmark.org/0.29/#example-78>
fn t78_cr_nl() {
    init!("  - foo\r\n\r\n    bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\r\n\r\n    bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1422
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1422>
/// <https://spec.commonmark.org/0.29/#example-78>
fn t78_no_nl() {
    init!("  - foo\n\n    bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  - foo\n\n    bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1422
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1422>
/// <https://spec.commonmark.org/0.29/#example-78>
fn t78_tab() {
    init!("  -\tfoo\n\n    bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  -\tfoo\n\n    bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1436>
/// <https://spec.commonmark.org/0.29/#example-79>
fn t79() {
    init!("1.  foo\n\n    - bar\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\n\n    - bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1436>
/// <https://spec.commonmark.org/0.29/#example-79>
fn t79_cr() {
    init!("1.  foo\r\r    - bar\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\r\r    - bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1436>
/// <https://spec.commonmark.org/0.29/#example-79>
fn t79_cr_nl() {
    init!("1.  foo\r\n\r\n    - bar\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\r\n\r\n    - bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1436>
/// <https://spec.commonmark.org/0.29/#example-79>
fn t79_no_nl() {
    init!("1.  foo\n\n    - bar");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\n\n    - bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1436
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1436>
/// <https://spec.commonmark.org/0.29/#example-79>
fn t79_tab() {
    init!("1.\t\tfoo\n\n    -\tbar\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t\tfoo\n\n    -\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1456
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1456>
/// <https://spec.commonmark.org/0.29/#example-80>
fn t80() {
    init!("    <a/>\n    *hi*\n\n    - one\n");

    assert_eq!(
        // from spec: <pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>
        [
            html_block!("    <a/>\n    *hi*\n"),
            unordered_list!(vec![ paragraph!(plain!("one")) ])
        ].as_slice(),
        body(&mut StringData::new("    <a/>\n    *hi*\n\n    - one\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1456
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1456>
/// <https://spec.commonmark.org/0.29/#example-80>
fn t80_cr() {
    init!("    <a/>\r    *hi*\r\r    - one\r");

    assert_eq!(
        // from spec: <pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>
        [
            html_block!("    <a/>\r    *hi*\r"),
            unordered_list!(vec![ paragraph!(plain!("one")) ])
        ].as_slice(),
        body(&mut StringData::new("    <a/>\r    *hi*\r\r    - one\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1456
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1456>
/// <https://spec.commonmark.org/0.29/#example-80>
fn t80_cr_nl() {
    init!("    <a/>\r\n    *hi*\r\n\r\n    - one\r\n");

    assert_eq!(
        // from spec: <pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>
        [
            html_block!("    <a/>\r\n    *hi*\r\n"),
            unordered_list!(vec![ paragraph!(plain!("one")) ])
        ].as_slice(),
        body(&mut StringData::new("    <a/>\r\n    *hi*\r\n\r\n    - one\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1456
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1456>
/// <https://spec.commonmark.org/0.29/#example-80>
fn t80_no_nl() {
    init!("    <a/>\n    *hi*\n\n    - one");

    assert_eq!(
        // from spec: <pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>
        [
            html_block!("    <a/>\n    *hi*\n"),
            unordered_list!(vec![ paragraph!(plain!("one")) ])
        ].as_slice(),
        body(&mut StringData::new("    <a/>\n    *hi*\n\n    - one", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1456
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1456>
/// <https://spec.commonmark.org/0.29/#example-80>
fn t80_tab() {
    init!("    <a/>\n    *hi*\n\n    -\tone\n");

    assert_eq!(
        // from spec: <pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>
        [
            html_block!("				<a/>\n				*hi*\n"),
            unordered_list!(vec![	paragraph!(plain!("one"))	])
        ].as_slice(),
        space2tab(body(&mut StringData::new("    <a/>\n    *hi*\n\n    -\tone\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1472
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1472>
/// <https://spec.commonmark.org/0.29/#example-81>
fn t81() {
    init!("    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>\n<p>chunk3</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2")), paragraph!(plain!("chunk3"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1472
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1472>
/// <https://spec.commonmark.org/0.29/#example-81>
fn t81_cr() {
    init!("    chunk1\r\r    chunk2\r  \r \r \r    chunk3\r");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>\n<p>chunk3</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2")), paragraph!(plain!("chunk3"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\r\r    chunk2\r  \r \r \r    chunk3\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1472
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1472>
/// <https://spec.commonmark.org/0.29/#example-81>
fn t81_cr_nl() {
    init!("    chunk1\r\n\r\n    chunk2\r\n  \r\n \r\n \r\n    chunk3\r\n");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>\n<p>chunk3</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2")), paragraph!(plain!("chunk3"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\r\n\r\n    chunk2\r\n  \r\n \r\n \r\n    chunk3\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1472
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1472>
/// <https://spec.commonmark.org/0.29/#example-81>
fn t81_no_nl() {
    init!("    chunk1\n\n    chunk2\n  \n \n \n    chunk3");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>\n<p>chunk3</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2")), paragraph!(plain!("chunk3"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\n\n    chunk2\n  \n \n \n    chunk3", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1495>
/// <https://spec.commonmark.org/0.29/#example-82>
fn t82() {
    init!("    chunk1\n      \n      chunk2\n");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\n      \n      chunk2\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1495>
/// <https://spec.commonmark.org/0.29/#example-82>
fn t82_cr() {
    init!("    chunk1\r      \r      chunk2\r");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\r      \r      chunk2\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1495>
/// <https://spec.commonmark.org/0.29/#example-82>
fn t82_cr_nl() {
    init!("    chunk1\r\n      \r\n      chunk2\r\n");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\r\n      \r\n      chunk2\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1495>
/// <https://spec.commonmark.org/0.29/#example-82>
fn t82_no_nl() {
    init!("    chunk1\n      \n      chunk2");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2"))
        ].as_slice(),
        body(&mut StringData::new("    chunk1\n      \n      chunk2", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1495>
/// <https://spec.commonmark.org/0.29/#example-82>
fn t82_tab() {
    init!("    chunk1\n      \n    \t\tchunk2\n");

    assert_eq!(
        // from spec: <p>chunk1</p>\n<p>chunk2</p>
        [
            paragraph!(plain!("chunk1")), paragraph!(plain!("chunk2"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    chunk1\n      \n    \t\tchunk2\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1510
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1510>
/// <https://spec.commonmark.org/0.29/#example-83>
fn t83() {
    init!("Foo\n    bar\n\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n    bar\n\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1510
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1510>
/// <https://spec.commonmark.org/0.29/#example-83>
fn t83_cr() {
    init!("Foo\r    bar\r\r");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r    bar\r\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1510
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1510>
/// <https://spec.commonmark.org/0.29/#example-83>
fn t83_cr_nl() {
    init!("Foo\r\n    bar\r\n\r\n");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n    bar\r\n\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1510
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1510>
/// <https://spec.commonmark.org/0.29/#example-83>
fn t83_no_nl() {
    init!("Foo\n    bar");

    assert_eq!(
        // from spec: <p>Foo\nbar</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("Foo\n    bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1524>
/// <https://spec.commonmark.org/0.29/#example-84>
fn t84() {
    init!("    foo\nbar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1524>
/// <https://spec.commonmark.org/0.29/#example-84>
fn t84_cr() {
    init!("    foo\rbar\r");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1524>
/// <https://spec.commonmark.org/0.29/#example-84>
fn t84_cr_nl() {
    init!("    foo\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1524>
/// <https://spec.commonmark.org/0.29/#example-84>
fn t84_no_nl() {
    init!("    foo\nbar");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("    foo\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1537>
/// <https://spec.commonmark.org/0.29/#example-85>
fn t85() {
    init!("# Heading\n    foo\nHeading\n------\n    foo\n----\n");

    assert_eq!(
        // from spec: <h1>Heading</h1>\n<p>foo\nHeading</p>\n<hr />\n<p>foo</p>\n<hr />
        [
            heading!(1, plain!("Heading")), paragraph!(plain!("foo"), SoftBreak, plain!("Heading")), Break, paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("# Heading\n    foo\nHeading\n------\n    foo\n----\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1537>
/// <https://spec.commonmark.org/0.29/#example-85>
fn t85_cr() {
    init!("# Heading\r    foo\rHeading\r------\r    foo\r----\r");

    assert_eq!(
        // from spec: <h1>Heading</h1>\n<p>foo\nHeading</p>\n<hr />\n<p>foo</p>\n<hr />
        [
            heading!(1, plain!("Heading")), paragraph!(plain!("foo"), SoftBreak, plain!("Heading")), Break, paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("# Heading\r    foo\rHeading\r------\r    foo\r----\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1537>
/// <https://spec.commonmark.org/0.29/#example-85>
fn t85_cr_nl() {
    init!("# Heading\r\n    foo\r\nHeading\r\n------\r\n    foo\r\n----\r\n");

    assert_eq!(
        // from spec: <h1>Heading</h1>\n<p>foo\nHeading</p>\n<hr />\n<p>foo</p>\n<hr />
        [
            heading!(1, plain!("Heading")), paragraph!(plain!("foo"), SoftBreak, plain!("Heading")), Break, paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("# Heading\r\n    foo\r\nHeading\r\n------\r\n    foo\r\n----\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1537>
/// <https://spec.commonmark.org/0.29/#example-85>
fn t85_no_nl() {
    init!("# Heading\n    foo\nHeading\n------\n    foo\n----");

    assert_eq!(
        // from spec: <h1>Heading</h1>\n<p>foo\nHeading</p>\n<hr />\n<p>foo</p>\n<hr />
        [
            heading!(1, plain!("Heading")), paragraph!(plain!("foo"), SoftBreak, plain!("Heading")), Break, paragraph!(plain!("foo")), Break
        ].as_slice(),
        body(&mut StringData::new("# Heading\n    foo\nHeading\n------\n    foo\n----", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1537>
/// <https://spec.commonmark.org/0.29/#example-85>
fn t85_tab() {
    init!("#\tHeading\n    foo\nHeading\n------\n    foo\n----\n");

    assert_eq!(
        // from spec: <h1>Heading</h1>\n<p>foo\nHeading</p>\n<hr />\n<p>foo</p>\n<hr />
        [
            heading!(1, plain!("Heading")), paragraph!(plain!("foo"), SoftBreak, plain!("Heading")), Break, paragraph!(plain!("foo")), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\tHeading\n    foo\nHeading\n------\n    foo\n----\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1557
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1557>
/// <https://spec.commonmark.org/0.29/#example-86>
fn t86() {
    init!("        foo\n    bar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("        foo\n    bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1557
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1557>
/// <https://spec.commonmark.org/0.29/#example-86>
fn t86_cr() {
    init!("        foo\r    bar\r");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("        foo\r    bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1557
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1557>
/// <https://spec.commonmark.org/0.29/#example-86>
fn t86_cr_nl() {
    init!("        foo\r\n    bar\r\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("        foo\r\n    bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1557
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1557>
/// <https://spec.commonmark.org/0.29/#example-86>
fn t86_no_nl() {
    init!("        foo\n    bar");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("        foo\n    bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1557
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1557>
/// <https://spec.commonmark.org/0.29/#example-86>
fn t86_tab() {
    init!("    \t\t\t\tfoo\n    bar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    \t\t\t\tfoo\n    bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1570>
/// <https://spec.commonmark.org/0.29/#example-87>
fn t87() {
    init!("\n    \n    foo\n    \n\n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("\n    \n    foo\n    \n\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1570>
/// <https://spec.commonmark.org/0.29/#example-87>
fn t87_cr() {
    init!("\r    \r    foo\r    \r\r");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("\r    \r    foo\r    \r\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1570>
/// <https://spec.commonmark.org/0.29/#example-87>
fn t87_cr_nl() {
    init!("\r\n    \r\n    foo\r\n    \r\n\r\n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("\r\n    \r\n    foo\r\n    \r\n\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1570>
/// <https://spec.commonmark.org/0.29/#example-87>
fn t87_no_nl() {
    init!("\n    \n    foo\n    ");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("\n    \n    foo\n    ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1584
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1584>
/// <https://spec.commonmark.org/0.29/#example-88>
fn t88() {
    init!("    foo  \n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    foo  \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1584
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1584>
/// <https://spec.commonmark.org/0.29/#example-88>
fn t88_cr() {
    init!("    foo  \r");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    foo  \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1584
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1584>
/// <https://spec.commonmark.org/0.29/#example-88>
fn t88_cr_nl() {
    init!("    foo  \r\n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    foo  \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1584
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1584>
/// <https://spec.commonmark.org/0.29/#example-88>
fn t88_no_nl() {
    init!("    foo  ");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("    foo  ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1639>
/// <https://spec.commonmark.org/0.29/#example-89>
fn t89() {
    init!("```\n<\n >\n```\n");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\n >\n")
        ].as_slice(),
        body(&mut StringData::new("```\n<\n >\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1639>
/// <https://spec.commonmark.org/0.29/#example-89>
fn t89_cr() {
    init!("```\r<\r >\r```\r");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\r >\r")
        ].as_slice(),
        body(&mut StringData::new("```\r<\r >\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1639>
/// <https://spec.commonmark.org/0.29/#example-89>
fn t89_cr_nl() {
    init!("```\r\n<\r\n >\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\r\n >\r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\n<\r\n >\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1639>
/// <https://spec.commonmark.org/0.29/#example-89>
fn t89_no_nl() {
    init!("```\n<\n >\n```");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\n >\n")
        ].as_slice(),
        body(&mut StringData::new("```\n<\n >\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1653
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1653>
/// <https://spec.commonmark.org/0.29/#example-90>
fn t90() {
    init!("~~~\n<\n >\n~~~\n");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\n >\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\n<\n >\n~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1653
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1653>
/// <https://spec.commonmark.org/0.29/#example-90>
fn t90_cr() {
    init!("~~~\r<\r >\r~~~\r");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\r >\r")
        ].as_slice(),
        body(&mut StringData::new("~~~\r<\r >\r~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1653
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1653>
/// <https://spec.commonmark.org/0.29/#example-90>
fn t90_cr_nl() {
    init!("~~~\r\n<\r\n >\r\n~~~\r\n");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\r\n >\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\r\n<\r\n >\r\n~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1653
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1653>
/// <https://spec.commonmark.org/0.29/#example-90>
fn t90_no_nl() {
    init!("~~~\n<\n >\n~~~");

    assert_eq!(
        // from spec: <pre><code>&lt;\n &gt;\n</code></pre>
        [
            code_block!("", "<\n >\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\n<\n >\n~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1666>
/// <https://spec.commonmark.org/0.29/#example-91>
fn t91() {
    init!("``\nfoo\n``\n");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo\n``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1666>
/// <https://spec.commonmark.org/0.29/#example-91>
fn t91_cr() {
    init!("``\rfoo\r``\r");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``\rfoo\r``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1666>
/// <https://spec.commonmark.org/0.29/#example-91>
fn t91_cr_nl() {
    init!("``\r\nfoo\r\n``\r\n");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``\r\nfoo\r\n``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1666
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1666>
/// <https://spec.commonmark.org/0.29/#example-91>
fn t91_no_nl() {
    init!("``\nfoo\n``");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo\n``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1677
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1677>
/// <https://spec.commonmark.org/0.29/#example-92>
fn t92() {
    init!("```\naaa\n~~~\n```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n~~~\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1677
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1677>
/// <https://spec.commonmark.org/0.29/#example-92>
fn t92_cr() {
    init!("```\raaa\r~~~\r```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\r~~~\r")
        ].as_slice(),
        body(&mut StringData::new("```\raaa\r~~~\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1677
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1677>
/// <https://spec.commonmark.org/0.29/#example-92>
fn t92_cr_nl() {
    init!("```\r\naaa\r\n~~~\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\r\n~~~\r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\naaa\r\n~~~\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1677
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1677>
/// <https://spec.commonmark.org/0.29/#example-92>
fn t92_no_nl() {
    init!("```\naaa\n~~~\n```");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n~~~\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1689
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1689>
/// <https://spec.commonmark.org/0.29/#example-93>
fn t93() {
    init!("~~~\naaa\n```\n~~~\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\n```\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\naaa\n```\n~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1689
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1689>
/// <https://spec.commonmark.org/0.29/#example-93>
fn t93_cr() {
    init!("~~~\raaa\r```\r~~~\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\r```\r")
        ].as_slice(),
        body(&mut StringData::new("~~~\raaa\r```\r~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1689
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1689>
/// <https://spec.commonmark.org/0.29/#example-93>
fn t93_cr_nl() {
    init!("~~~\r\naaa\r\n```\r\n~~~\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\r\n```\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\r\naaa\r\n```\r\n~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1689
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1689>
/// <https://spec.commonmark.org/0.29/#example-93>
fn t93_no_nl() {
    init!("~~~\naaa\n```\n~~~");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\n```\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\naaa\n```\n~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1703>
/// <https://spec.commonmark.org/0.29/#example-94>
fn t94() {
    init!("````\naaa\n```\n``````\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\n```\n")
        ].as_slice(),
        body(&mut StringData::new("````\naaa\n```\n``````\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1703>
/// <https://spec.commonmark.org/0.29/#example-94>
fn t94_cr() {
    init!("````\raaa\r```\r``````\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\r```\r")
        ].as_slice(),
        body(&mut StringData::new("````\raaa\r```\r``````\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1703>
/// <https://spec.commonmark.org/0.29/#example-94>
fn t94_cr_nl() {
    init!("````\r\naaa\r\n```\r\n``````\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\r\n```\r\n")
        ].as_slice(),
        body(&mut StringData::new("````\r\naaa\r\n```\r\n``````\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1703>
/// <https://spec.commonmark.org/0.29/#example-94>
fn t94_no_nl() {
    init!("````\naaa\n```\n``````");

    assert_eq!(
        // from spec: <pre><code>aaa\n```\n</code></pre>
        [
            code_block!("", "aaa\n```\n")
        ].as_slice(),
        body(&mut StringData::new("````\naaa\n```\n``````", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1715>
/// <https://spec.commonmark.org/0.29/#example-95>
fn t95() {
    init!("~~~~\naaa\n~~~\n~~~~\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~\naaa\n~~~\n~~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1715>
/// <https://spec.commonmark.org/0.29/#example-95>
fn t95_cr() {
    init!("~~~~\raaa\r~~~\r~~~~\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\r~~~\r")
        ].as_slice(),
        body(&mut StringData::new("~~~~\raaa\r~~~\r~~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1715>
/// <https://spec.commonmark.org/0.29/#example-95>
fn t95_cr_nl() {
    init!("~~~~\r\naaa\r\n~~~\r\n~~~~\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\r\n~~~\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~\r\naaa\r\n~~~\r\n~~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1715>
/// <https://spec.commonmark.org/0.29/#example-95>
fn t95_no_nl() {
    init!("~~~~\naaa\n~~~\n~~~~");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~\naaa\n~~~\n~~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1730
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1730>
/// <https://spec.commonmark.org/0.29/#example-96>
fn t96() {
    init!("```\n");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1730
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1730>
/// <https://spec.commonmark.org/0.29/#example-96>
fn t96_cr() {
    init!("```\r");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1730
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1730>
/// <https://spec.commonmark.org/0.29/#example-96>
fn t96_cr_nl() {
    init!("```\r\n");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1730
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1730>
/// <https://spec.commonmark.org/0.29/#example-96>
fn t96_no_nl() {
    init!("```");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1737
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1737>
/// <https://spec.commonmark.org/0.29/#example-97>
fn t97() {
    init!("`````\n\n```\naaa\n");

    assert_eq!(
        // from spec: <pre><code>\n```\naaa\n</code></pre>
        [
            code_block!("", "\n```\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("`````\n\n```\naaa\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1737
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1737>
/// <https://spec.commonmark.org/0.29/#example-97>
fn t97_cr() {
    init!("`````\r\r```\raaa\r");

    assert_eq!(
        // from spec: <pre><code>\n```\naaa\n</code></pre>
        [
            code_block!("", "\r```\raaa\r")
        ].as_slice(),
        body(&mut StringData::new("`````\r\r```\raaa\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1737
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1737>
/// <https://spec.commonmark.org/0.29/#example-97>
fn t97_cr_nl() {
    init!("`````\r\n\r\n```\r\naaa\r\n");

    assert_eq!(
        // from spec: <pre><code>\n```\naaa\n</code></pre>
        [
            code_block!("", "\r\n```\r\naaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("`````\r\n\r\n```\r\naaa\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1737
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1737>
/// <https://spec.commonmark.org/0.29/#example-97>
fn t97_no_nl() {
    init!("`````\n\n```\naaa");

    assert_eq!(
        // from spec: <pre><code>\n```\naaa\n</code></pre>
        [
            code_block!("", "\n```\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("`````\n\n```\naaa", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1750
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1750>
/// <https://spec.commonmark.org/0.29/#example-98>
fn t98() {
    init!("> ```\n> aaa\n\nbbb\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>
        [
            quote!(code_block!("", "aaa\n")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("> ```\n> aaa\n\nbbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1750
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1750>
/// <https://spec.commonmark.org/0.29/#example-98>
fn t98_cr() {
    init!("> ```\r> aaa\r\rbbb\r");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>
        [
            quote!(code_block!("", "aaa\r")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("> ```\r> aaa\r\rbbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1750
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1750>
/// <https://spec.commonmark.org/0.29/#example-98>
fn t98_cr_nl() {
    init!("> ```\r\n> aaa\r\n\r\nbbb\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>
        [
            quote!(code_block!("", "aaa\r\n")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("> ```\r\n> aaa\r\n\r\nbbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1750
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1750>
/// <https://spec.commonmark.org/0.29/#example-98>
fn t98_no_nl() {
    init!("> ```\n> aaa\n\nbbb");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>
        [
            quote!(code_block!("", "aaa\n")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("> ```\n> aaa\n\nbbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1750
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1750>
/// <https://spec.commonmark.org/0.29/#example-98>
fn t98_tab() {
    init!(">\t```\n>\taaa\n\nbbb\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>
        [
            quote!(code_block!("", "aaa\n")), paragraph!(plain!("bbb"))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t```\n>\taaa\n\nbbb\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1766
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1766>
/// <https://spec.commonmark.org/0.29/#example-99>
fn t99() {
    init!("```\n\n  \n```\n");

    assert_eq!(
        // from spec: <pre><code>\n  \n</code></pre>
        [
            code_block!("", "\n  \n")
        ].as_slice(),
        body(&mut StringData::new("```\n\n  \n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1766
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1766>
/// <https://spec.commonmark.org/0.29/#example-99>
fn t99_cr() {
    init!("```\r\r  \r```\r");

    assert_eq!(
        // from spec: <pre><code>\n  \n</code></pre>
        [
            code_block!("", "\r  \r")
        ].as_slice(),
        body(&mut StringData::new("```\r\r  \r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1766
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1766>
/// <https://spec.commonmark.org/0.29/#example-99>
fn t99_cr_nl() {
    init!("```\r\n\r\n  \r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code>\n  \n</code></pre>
        [
            code_block!("", "\r\n  \r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\n\r\n  \r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1766
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1766>
/// <https://spec.commonmark.org/0.29/#example-99>
fn t99_no_nl() {
    init!("```\n\n  \n```");

    assert_eq!(
        // from spec: <pre><code>\n  \n</code></pre>
        [
            code_block!("", "\n  \n")
        ].as_slice(),
        body(&mut StringData::new("```\n\n  \n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1780
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1780>
/// <https://spec.commonmark.org/0.29/#example-100>
fn t100() {
    init!("```\n```\n");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1780
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1780>
/// <https://spec.commonmark.org/0.29/#example-100>
fn t100_cr() {
    init!("```\r```\r");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1780
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1780>
/// <https://spec.commonmark.org/0.29/#example-100>
fn t100_cr_nl() {
    init!("```\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1780
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1780>
/// <https://spec.commonmark.org/0.29/#example-100>
fn t100_no_nl() {
    init!("```\n```");

    assert_eq!(
        // from spec: <pre><code></code></pre>
        [
            code_block!("")
        ].as_slice(),
        body(&mut StringData::new("```\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1792
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1792>
/// <https://spec.commonmark.org/0.29/#example-101>
fn t101() {
    init!(" ```\n aaa\naaa\n```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new(" ```\n aaa\naaa\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1792
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1792>
/// <https://spec.commonmark.org/0.29/#example-101>
fn t101_cr() {
    init!(" ```\r aaa\raaa\r```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\raaa\r")
        ].as_slice(),
        body(&mut StringData::new(" ```\r aaa\raaa\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1792
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1792>
/// <https://spec.commonmark.org/0.29/#example-101>
fn t101_cr_nl() {
    init!(" ```\r\n aaa\r\naaa\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\r\naaa\r\n")
        ].as_slice(),
        body(&mut StringData::new(" ```\r\n aaa\r\naaa\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1792
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1792>
/// <https://spec.commonmark.org/0.29/#example-101>
fn t101_no_nl() {
    init!(" ```\n aaa\naaa\n```");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new(" ```\n aaa\naaa\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1804>
/// <https://spec.commonmark.org/0.29/#example-102>
fn t102() {
    init!("  ```\naaa\n  aaa\naaa\n  ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\naaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("  ```\naaa\n  aaa\naaa\n  ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1804>
/// <https://spec.commonmark.org/0.29/#example-102>
fn t102_cr() {
    init!("  ```\raaa\r  aaa\raaa\r  ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\raaa\raaa\r")
        ].as_slice(),
        body(&mut StringData::new("  ```\raaa\r  aaa\raaa\r  ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1804>
/// <https://spec.commonmark.org/0.29/#example-102>
fn t102_cr_nl() {
    init!("  ```\r\naaa\r\n  aaa\r\naaa\r\n  ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\r\naaa\r\naaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("  ```\r\naaa\r\n  aaa\r\naaa\r\n  ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1804>
/// <https://spec.commonmark.org/0.29/#example-102>
fn t102_no_nl() {
    init!("  ```\naaa\n  aaa\naaa\n  ```");

    assert_eq!(
        // from spec: <pre><code>aaa\naaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\naaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("  ```\naaa\n  aaa\naaa\n  ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1818
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1818>
/// <https://spec.commonmark.org/0.29/#example-103>
fn t103() {
    init!("   ```\n   aaa\n    aaa\n  aaa\n   ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\n aaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\n   aaa\n    aaa\n  aaa\n   ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1818
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1818>
/// <https://spec.commonmark.org/0.29/#example-103>
fn t103_cr() {
    init!("   ```\r   aaa\r    aaa\r  aaa\r   ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\r aaa\raaa\r")
        ].as_slice(),
        body(&mut StringData::new("   ```\r   aaa\r    aaa\r  aaa\r   ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1818
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1818>
/// <https://spec.commonmark.org/0.29/#example-103>
fn t103_cr_nl() {
    init!("   ```\r\n   aaa\r\n    aaa\r\n  aaa\r\n   ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\r\n aaa\r\naaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\r\n   aaa\r\n    aaa\r\n  aaa\r\n   ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1818
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1818>
/// <https://spec.commonmark.org/0.29/#example-103>
fn t103_no_nl() {
    init!("   ```\n   aaa\n    aaa\n  aaa\n   ```");

    assert_eq!(
        // from spec: <pre><code>aaa\n aaa\naaa\n</code></pre>
        [
            code_block!("", "aaa\n aaa\naaa\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\n   aaa\n    aaa\n  aaa\n   ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1834>
/// <https://spec.commonmark.org/0.29/#example-104>
fn t104() {
    init!("    ```\n    aaa\n    ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("    ```\n    aaa\n    ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1834>
/// <https://spec.commonmark.org/0.29/#example-104>
fn t104_cr() {
    init!("    ```\r    aaa\r    ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r")
        ].as_slice(),
        body(&mut StringData::new("    ```\r    aaa\r    ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1834>
/// <https://spec.commonmark.org/0.29/#example-104>
fn t104_cr_nl() {
    init!("    ```\r\n    aaa\r\n    ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("    ```\r\n    aaa\r\n    ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1834>
/// <https://spec.commonmark.org/0.29/#example-104>
fn t104_no_nl() {
    init!("    ```\n    aaa\n    ```");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("    ```\n    aaa\n    ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1849>
/// <https://spec.commonmark.org/0.29/#example-105>
fn t105() {
    init!("```\naaa\n  ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n  ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1849>
/// <https://spec.commonmark.org/0.29/#example-105>
fn t105_cr() {
    init!("```\raaa\r  ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r")
        ].as_slice(),
        body(&mut StringData::new("```\raaa\r  ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1849>
/// <https://spec.commonmark.org/0.29/#example-105>
fn t105_cr_nl() {
    init!("```\r\naaa\r\n  ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\naaa\r\n  ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1849>
/// <https://spec.commonmark.org/0.29/#example-105>
fn t105_no_nl() {
    init!("```\naaa\n  ```");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n  ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1859
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1859>
/// <https://spec.commonmark.org/0.29/#example-106>
fn t106() {
    init!("   ```\naaa\n  ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\naaa\n  ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1859
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1859>
/// <https://spec.commonmark.org/0.29/#example-106>
fn t106_cr() {
    init!("   ```\raaa\r  ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r")
        ].as_slice(),
        body(&mut StringData::new("   ```\raaa\r  ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1859
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1859>
/// <https://spec.commonmark.org/0.29/#example-106>
fn t106_cr_nl() {
    init!("   ```\r\naaa\r\n  ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\r\naaa\r\n  ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1859
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1859>
/// <https://spec.commonmark.org/0.29/#example-106>
fn t106_no_nl() {
    init!("   ```\naaa\n  ```");

    assert_eq!(
        // from spec: <pre><code>aaa\n</code></pre>
        [
            code_block!("", "aaa\n")
        ].as_slice(),
        body(&mut StringData::new("   ```\naaa\n  ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1871
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1871>
/// <https://spec.commonmark.org/0.29/#example-107>
fn t107() {
    init!("```\naaa\n    ```\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n    ```\n</code></pre>
        [
            code_block!("", "aaa\n    ```\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n    ```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1871
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1871>
/// <https://spec.commonmark.org/0.29/#example-107>
fn t107_cr() {
    init!("```\raaa\r    ```\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n    ```\n</code></pre>
        [
            code_block!("", "aaa\r    ```\r")
        ].as_slice(),
        body(&mut StringData::new("```\raaa\r    ```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1871
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1871>
/// <https://spec.commonmark.org/0.29/#example-107>
fn t107_cr_nl() {
    init!("```\r\naaa\r\n    ```\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n    ```\n</code></pre>
        [
            code_block!("", "aaa\r\n    ```\r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\naaa\r\n    ```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1871
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1871>
/// <https://spec.commonmark.org/0.29/#example-107>
fn t107_no_nl() {
    init!("```\naaa\n    ```");

    assert_eq!(
        // from spec: <pre><code>aaa\n    ```\n</code></pre>
        [
            code_block!("", "aaa\n    ```\n")
        ].as_slice(),
        body(&mut StringData::new("```\naaa\n    ```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1885
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1885>
/// <https://spec.commonmark.org/0.29/#example-108>
fn t108() {
    init!("``` ```\naaa\n");

    assert_eq!(
        // from spec: <p><code> </code>\naaa</p>
        [
            paragraph!(code!(" "), SoftBreak, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("``` ```\naaa\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1885
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1885>
/// <https://spec.commonmark.org/0.29/#example-108>
fn t108_cr() {
    init!("``` ```\raaa\r");

    assert_eq!(
        // from spec: <p><code> </code>\naaa</p>
        [
            paragraph!(code!(" "), SoftBreak, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("``` ```\raaa\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1885
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1885>
/// <https://spec.commonmark.org/0.29/#example-108>
fn t108_cr_nl() {
    init!("``` ```\r\naaa\r\n");

    assert_eq!(
        // from spec: <p><code> </code>\naaa</p>
        [
            paragraph!(code!(" "), SoftBreak, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("``` ```\r\naaa\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1885
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1885>
/// <https://spec.commonmark.org/0.29/#example-108>
fn t108_no_nl() {
    init!("``` ```\naaa");

    assert_eq!(
        // from spec: <p><code> </code>\naaa</p>
        [
            paragraph!(code!(" "), SoftBreak, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("``` ```\naaa", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1885
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1885>
/// <https://spec.commonmark.org/0.29/#example-108>
fn t108_tab() {
    init!("```\t```\naaa\n");

    assert_eq!(
        // from spec: <p><code> </code>\naaa</p>
        [
            paragraph!(code!("\t"), SoftBreak, plain!("aaa"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("```\t```\naaa\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1894>
/// <https://spec.commonmark.org/0.29/#example-109>
fn t109() {
    init!("~~~~~~\naaa\n~~~ ~~\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~ ~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~ ~~\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~~~\naaa\n~~~ ~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1894>
/// <https://spec.commonmark.org/0.29/#example-109>
fn t109_cr() {
    init!("~~~~~~\raaa\r~~~ ~~\r");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~ ~~\n</code></pre>
        [
            code_block!("", "aaa\r~~~ ~~\r")
        ].as_slice(),
        body(&mut StringData::new("~~~~~~\raaa\r~~~ ~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1894>
/// <https://spec.commonmark.org/0.29/#example-109>
fn t109_cr_nl() {
    init!("~~~~~~\r\naaa\r\n~~~ ~~\r\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~ ~~\n</code></pre>
        [
            code_block!("", "aaa\r\n~~~ ~~\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~~~\r\naaa\r\n~~~ ~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1894>
/// <https://spec.commonmark.org/0.29/#example-109>
fn t109_no_nl() {
    init!("~~~~~~\naaa\n~~~ ~~");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~ ~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~ ~~\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~~~\naaa\n~~~ ~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1894>
/// <https://spec.commonmark.org/0.29/#example-109>
fn t109_tab() {
    init!("~~~~~~\naaa\n~~~\t~~\n");

    assert_eq!(
        // from spec: <pre><code>aaa\n~~~ ~~\n</code></pre>
        [
            code_block!("", "aaa\n~~~\t~~\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("~~~~~~\naaa\n~~~\t~~\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1908>
/// <https://spec.commonmark.org/0.29/#example-110>
fn t110() {
    init!("foo\n```\nbar\n```\nbaz\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>
        [
            paragraph!(plain!("foo")), code_block!("", "bar\n"), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\n```\nbar\n```\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1908>
/// <https://spec.commonmark.org/0.29/#example-110>
fn t110_cr() {
    init!("foo\r```\rbar\r```\rbaz\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>
        [
            paragraph!(plain!("foo")), code_block!("", "bar\r"), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\r```\rbar\r```\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1908>
/// <https://spec.commonmark.org/0.29/#example-110>
fn t110_cr_nl() {
    init!("foo\r\n```\r\nbar\r\n```\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>
        [
            paragraph!(plain!("foo")), code_block!("", "bar\r\n"), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\r\n```\r\nbar\r\n```\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1908>
/// <https://spec.commonmark.org/0.29/#example-110>
fn t110_no_nl() {
    init!("foo\n```\nbar\n```\nbaz");

    assert_eq!(
        // from spec: <p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>
        [
            paragraph!(plain!("foo")), code_block!("", "bar\n"), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\n```\nbar\n```\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1925>
/// <https://spec.commonmark.org/0.29/#example-111>
fn t111() {
    init!("foo\n---\n~~~\nbar\n~~~\n# baz\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>
        [
            paragraph!(plain!("foo")), Break, code_block!("", "bar\n"), heading!(1, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\n---\n~~~\nbar\n~~~\n# baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1925>
/// <https://spec.commonmark.org/0.29/#example-111>
fn t111_cr() {
    init!("foo\r---\r~~~\rbar\r~~~\r# baz\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>
        [
            paragraph!(plain!("foo")), Break, code_block!("", "bar\r"), heading!(1, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\r---\r~~~\rbar\r~~~\r# baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1925>
/// <https://spec.commonmark.org/0.29/#example-111>
fn t111_cr_nl() {
    init!("foo\r\n---\r\n~~~\r\nbar\r\n~~~\r\n# baz\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>
        [
            paragraph!(plain!("foo")), Break, code_block!("", "bar\r\n"), heading!(1, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\r\n---\r\n~~~\r\nbar\r\n~~~\r\n# baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1925>
/// <https://spec.commonmark.org/0.29/#example-111>
fn t111_no_nl() {
    init!("foo\n---\n~~~\nbar\n~~~\n# baz");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>
        [
            paragraph!(plain!("foo")), Break, code_block!("", "bar\n"), heading!(1, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\n---\n~~~\nbar\n~~~\n# baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1925>
/// <https://spec.commonmark.org/0.29/#example-111>
fn t111_tab() {
    init!("foo\n---\n~~~\nbar\n~~~\n#\tbaz\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<hr />\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>
        [
            paragraph!(plain!("foo")), Break, code_block!("", "bar\n"), heading!(1, plain!("baz"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\n---\n~~~\nbar\n~~~\n#\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1947
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1947>
/// <https://spec.commonmark.org/0.29/#example-112>
fn t112() {
    init!("```ruby\ndef foo(x)\n  return 3\nend\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby", "def foo(x)\n  return 3\nend\n")
        ].as_slice(),
        body(&mut StringData::new("```ruby\ndef foo(x)\n  return 3\nend\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1947
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1947>
/// <https://spec.commonmark.org/0.29/#example-112>
fn t112_cr() {
    init!("```ruby\rdef foo(x)\r  return 3\rend\r```\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby", "def foo(x)\r  return 3\rend\r")
        ].as_slice(),
        body(&mut StringData::new("```ruby\rdef foo(x)\r  return 3\rend\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1947
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1947>
/// <https://spec.commonmark.org/0.29/#example-112>
fn t112_cr_nl() {
    init!("```ruby\r\ndef foo(x)\r\n  return 3\r\nend\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby", "def foo(x)\r\n  return 3\r\nend\r\n")
        ].as_slice(),
        body(&mut StringData::new("```ruby\r\ndef foo(x)\r\n  return 3\r\nend\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1947
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1947>
/// <https://spec.commonmark.org/0.29/#example-112>
fn t112_no_nl() {
    init!("```ruby\ndef foo(x)\n  return 3\nend\n```");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby", "def foo(x)\n  return 3\nend\n")
        ].as_slice(),
        body(&mut StringData::new("```ruby\ndef foo(x)\n  return 3\nend\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1947
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1947>
/// <https://spec.commonmark.org/0.29/#example-112>
fn t112_tab() {
    init!("```ruby\ndef\tfoo(x)\n  return\t3\nend\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby", "def\tfoo(x)\n\t\treturn\t3\nend\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("```ruby\ndef\tfoo(x)\n  return\t3\nend\n```\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1961
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1961>
/// <https://spec.commonmark.org/0.29/#example-113>
fn t113() {
    init!("~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby startline=3 $%@#$", "def foo(x)\n  return 3\nend\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1961
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1961>
/// <https://spec.commonmark.org/0.29/#example-113>
fn t113_cr() {
    init!("~~~~    ruby startline=3 $%@#$\rdef foo(x)\r  return 3\rend\r~~~~~~~\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby startline=3 $%@#$", "def foo(x)\r  return 3\rend\r")
        ].as_slice(),
        body(&mut StringData::new("~~~~    ruby startline=3 $%@#$\rdef foo(x)\r  return 3\rend\r~~~~~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1961
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1961>
/// <https://spec.commonmark.org/0.29/#example-113>
fn t113_cr_nl() {
    init!("~~~~    ruby startline=3 $%@#$\r\ndef foo(x)\r\n  return 3\r\nend\r\n~~~~~~~\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby startline=3 $%@#$", "def foo(x)\r\n  return 3\r\nend\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~    ruby startline=3 $%@#$\r\ndef foo(x)\r\n  return 3\r\nend\r\n~~~~~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1961
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1961>
/// <https://spec.commonmark.org/0.29/#example-113>
fn t113_no_nl() {
    init!("~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby startline=3 $%@#$", "def foo(x)\n  return 3\nend\n")
        ].as_slice(),
        body(&mut StringData::new("~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1961
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1961>
/// <https://spec.commonmark.org/0.29/#example-113>
fn t113_tab() {
    init!("~~~~\t\t\t\truby\tstartline=3\t$%@#$\ndef\tfoo(x)\n  return\t3\nend\n~~~~~~~\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>
        [
            code_block!("ruby	startline=3	$%@#$",	"def	foo(x)\n		return	3\nend\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("~~~~\t\t\t\truby\tstartline=3\t$%@#$\ndef\tfoo(x)\n  return\t3\nend\n~~~~~~~\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1975>
/// <https://spec.commonmark.org/0.29/#example-114>
fn t114() {
    init!("````;\n````\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-;\"></code></pre>
        [
            code_block!(";")
        ].as_slice(),
        body(&mut StringData::new("````;\n````\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1975>
/// <https://spec.commonmark.org/0.29/#example-114>
fn t114_cr() {
    init!("````;\r````\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-;\"></code></pre>
        [
            code_block!(";")
        ].as_slice(),
        body(&mut StringData::new("````;\r````\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1975>
/// <https://spec.commonmark.org/0.29/#example-114>
fn t114_cr_nl() {
    init!("````;\r\n````\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-;\"></code></pre>
        [
            code_block!(";")
        ].as_slice(),
        body(&mut StringData::new("````;\r\n````\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1975>
/// <https://spec.commonmark.org/0.29/#example-114>
fn t114_no_nl() {
    init!("````;\n````");

    assert_eq!(
        // from spec: <pre><code class=\"language-;\"></code></pre>
        [
            code_block!(";")
        ].as_slice(),
        body(&mut StringData::new("````;\n````", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1985>
/// <https://spec.commonmark.org/0.29/#example-115>
fn t115() {
    init!("``` aa ```\nfoo\n");

    assert_eq!(
        // from spec: <p><code>aa</code>\nfoo</p>
        [
            paragraph!(code!("aa"), SoftBreak, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``` aa ```\nfoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1985>
/// <https://spec.commonmark.org/0.29/#example-115>
fn t115_cr() {
    init!("``` aa ```\rfoo\r");

    assert_eq!(
        // from spec: <p><code>aa</code>\nfoo</p>
        [
            paragraph!(code!("aa"), SoftBreak, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``` aa ```\rfoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1985>
/// <https://spec.commonmark.org/0.29/#example-115>
fn t115_cr_nl() {
    init!("``` aa ```\r\nfoo\r\n");

    assert_eq!(
        // from spec: <p><code>aa</code>\nfoo</p>
        [
            paragraph!(code!("aa"), SoftBreak, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``` aa ```\r\nfoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1985>
/// <https://spec.commonmark.org/0.29/#example-115>
fn t115_no_nl() {
    init!("``` aa ```\nfoo");

    assert_eq!(
        // from spec: <p><code>aa</code>\nfoo</p>
        [
            paragraph!(code!("aa"), SoftBreak, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("``` aa ```\nfoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1996
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1996>
/// <https://spec.commonmark.org/0.29/#example-116>
fn t116() {
    init!("~~~ aa ``` ~~~\nfoo\n~~~\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-aa\">foo\n</code></pre>
        [
            code_block!("aa ``` ~~~", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("~~~ aa ``` ~~~\nfoo\n~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1996
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1996>
/// <https://spec.commonmark.org/0.29/#example-116>
fn t116_cr() {
    init!("~~~ aa ``` ~~~\rfoo\r~~~\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-aa\">foo\n</code></pre>
        [
            code_block!("aa ``` ~~~", "foo\r")
        ].as_slice(),
        body(&mut StringData::new("~~~ aa ``` ~~~\rfoo\r~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1996
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1996>
/// <https://spec.commonmark.org/0.29/#example-116>
fn t116_cr_nl() {
    init!("~~~ aa ``` ~~~\r\nfoo\r\n~~~\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-aa\">foo\n</code></pre>
        [
            code_block!("aa ``` ~~~", "foo\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~ aa ``` ~~~\r\nfoo\r\n~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 1996
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L1996>
/// <https://spec.commonmark.org/0.29/#example-116>
fn t116_no_nl() {
    init!("~~~ aa ``` ~~~\nfoo\n~~~");

    assert_eq!(
        // from spec: <pre><code class=\"language-aa\">foo\n</code></pre>
        [
            code_block!("aa ``` ~~~", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("~~~ aa ``` ~~~\nfoo\n~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2008>
/// <https://spec.commonmark.org/0.29/#example-117>
fn t117() {
    init!("```\n``` aaa\n```\n");

    assert_eq!(
        // from spec: <pre><code>``` aaa\n</code></pre>
        [
            code_block!("", "``` aaa\n")
        ].as_slice(),
        body(&mut StringData::new("```\n``` aaa\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2008>
/// <https://spec.commonmark.org/0.29/#example-117>
fn t117_cr() {
    init!("```\r``` aaa\r```\r");

    assert_eq!(
        // from spec: <pre><code>``` aaa\n</code></pre>
        [
            code_block!("", "``` aaa\r")
        ].as_slice(),
        body(&mut StringData::new("```\r``` aaa\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2008>
/// <https://spec.commonmark.org/0.29/#example-117>
fn t117_cr_nl() {
    init!("```\r\n``` aaa\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code>``` aaa\n</code></pre>
        [
            code_block!("", "``` aaa\r\n")
        ].as_slice(),
        body(&mut StringData::new("```\r\n``` aaa\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2008>
/// <https://spec.commonmark.org/0.29/#example-117>
fn t117_no_nl() {
    init!("```\n``` aaa\n```");

    assert_eq!(
        // from spec: <pre><code>``` aaa\n</code></pre>
        [
            code_block!("", "``` aaa\n")
        ].as_slice(),
        body(&mut StringData::new("```\n``` aaa\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2008>
/// <https://spec.commonmark.org/0.29/#example-117>
fn t117_tab() {
    init!("```\n```\taaa\n```\n");

    assert_eq!(
        // from spec: <pre><code>``` aaa\n</code></pre>
        [
            code_block!("", "```\taaa\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("```\n```\taaa\n```\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2087
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2087>
/// <https://spec.commonmark.org/0.29/#example-118>
fn t118() {
    init!("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n");

    assert_eq!(
        // from spec: <table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>
        [
            html_block!("<table><tr><td>\n<pre>\n**Hello**,\n"),
            paragraph!(
              emph!(plain!("world")), plain!("."), SoftBreak,
              html!("</pre>")
            ),
            html_block!("</td></tr></table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2087
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2087>
/// <https://spec.commonmark.org/0.29/#example-118>
fn t118_cr() {
    init!("<table><tr><td>\r<pre>\r**Hello**,\r\r_world_.\r</pre>\r</td></tr></table>\r");

    assert_eq!(
        // from spec: <table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>
        [
            html_block!("<table><tr><td>\r<pre>\r**Hello**,\r"),
            paragraph!(
              emph!(plain!("world")), plain!("."), SoftBreak,
              html!("</pre>")
            ),
            html_block!("</td></tr></table>\r")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\r<pre>\r**Hello**,\r\r_world_.\r</pre>\r</td></tr></table>\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2087
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2087>
/// <https://spec.commonmark.org/0.29/#example-118>
fn t118_cr_nl() {
    init!("<table><tr><td>\r\n<pre>\r\n**Hello**,\r\n\r\n_world_.\r\n</pre>\r\n</td></tr></table>\r\n");

    assert_eq!(
        // from spec: <table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>
        [
            html_block!("<table><tr><td>\r\n<pre>\r\n**Hello**,\r\n"),
            paragraph!(
              emph!(plain!("world")), plain!("."), SoftBreak,
              html!("</pre>")
            ),
            html_block!("</td></tr></table>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\r\n<pre>\r\n**Hello**,\r\n\r\n_world_.\r\n</pre>\r\n</td></tr></table>\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2087
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2087>
/// <https://spec.commonmark.org/0.29/#example-118>
fn t118_no_nl() {
    init!("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>");

    assert_eq!(
        // from spec: <table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>
        [
            html_block!("<table><tr><td>\n<pre>\n**Hello**,\n"),
            paragraph!(
              emph!(plain!("world")), plain!("."), SoftBreak,
              html!("</pre>")
            ),
            html_block!("</td></tr></table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2116>
/// <https://spec.commonmark.org/0.29/#example-119>
fn t119() {
    init!("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>
        [
            html_block!("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n"),
            paragraph!(plain!("okay."))
        ].as_slice(),
        body(&mut StringData::new("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2116>
/// <https://spec.commonmark.org/0.29/#example-119>
fn t119_cr() {
    init!("<table>\r  <tr>\r    <td>\r           hi\r    </td>\r  </tr>\r</table>\r\rokay.\r");

    assert_eq!(
        // from spec: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>
        [
            html_block!("<table>\r  <tr>\r    <td>\r           hi\r    </td>\r  </tr>\r</table>\r"),
            paragraph!(plain!("okay."))
        ].as_slice(),
        body(&mut StringData::new("<table>\r  <tr>\r    <td>\r           hi\r    </td>\r  </tr>\r</table>\r\rokay.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2116>
/// <https://spec.commonmark.org/0.29/#example-119>
fn t119_cr_nl() {
    init!("<table>\r\n  <tr>\r\n    <td>\r\n           hi\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\nokay.\r\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>
        [
            html_block!("<table>\r\n  <tr>\r\n    <td>\r\n           hi\r\n    </td>\r\n  </tr>\r\n</table>\r\n"),
            paragraph!(plain!("okay."))
        ].as_slice(),
        body(&mut StringData::new("<table>\r\n  <tr>\r\n    <td>\r\n           hi\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\nokay.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2116>
/// <https://spec.commonmark.org/0.29/#example-119>
fn t119_no_nl() {
    init!("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.");

    assert_eq!(
        // from spec: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>
        [
            html_block!("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n"),
            paragraph!(plain!("okay."))
        ].as_slice(),
        body(&mut StringData::new("<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2116>
/// <https://spec.commonmark.org/0.29/#example-119>
fn t119_tab() {
    init!("<table>\n  <tr>\n    <td>\n    \t\t\t\t\t\t\thi\n    </td>\n  </tr>\n</table>\n\nokay.\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>
        [
            html_block!("<table>\n		<tr>\n				<td>\n											hi\n				</td>\n		</tr>\n</table>\n"),
            paragraph!(plain!("okay."))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<table>\n  <tr>\n    <td>\n    \t\t\t\t\t\t\thi\n    </td>\n  </tr>\n</table>\n\nokay.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2138
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2138>
/// <https://spec.commonmark.org/0.29/#example-120>
fn t120() {
    init!(" <div>\n  *hello*\n         <foo><a>\n");

    assert_eq!(
        // from spec:  <div>\n  *hello*\n         <foo><a>
        [
            html_block!(" <div>\n  *hello*\n         <foo><a>\n")
        ].as_slice(),
        body(&mut StringData::new(" <div>\n  *hello*\n         <foo><a>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2138
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2138>
/// <https://spec.commonmark.org/0.29/#example-120>
fn t120_cr() {
    init!(" <div>\r  *hello*\r         <foo><a>\r");

    assert_eq!(
        // from spec:  <div>\n  *hello*\n         <foo><a>
        [
            html_block!(" <div>\r  *hello*\r         <foo><a>\r")
        ].as_slice(),
        body(&mut StringData::new(" <div>\r  *hello*\r         <foo><a>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2138
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2138>
/// <https://spec.commonmark.org/0.29/#example-120>
fn t120_cr_nl() {
    init!(" <div>\r\n  *hello*\r\n         <foo><a>\r\n");

    assert_eq!(
        // from spec:  <div>\n  *hello*\n         <foo><a>
        [
            html_block!(" <div>\r\n  *hello*\r\n         <foo><a>\r\n")
        ].as_slice(),
        body(&mut StringData::new(" <div>\r\n  *hello*\r\n         <foo><a>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2138
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2138>
/// <https://spec.commonmark.org/0.29/#example-120>
fn t120_no_nl() {
    init!(" <div>\n  *hello*\n         <foo><a>");

    assert_eq!(
        // from spec:  <div>\n  *hello*\n         <foo><a>
        [
            html_block!(" <div>\n  *hello*\n         <foo><a>\n")
        ].as_slice(),
        body(&mut StringData::new(" <div>\n  *hello*\n         <foo><a>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2138
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2138>
/// <https://spec.commonmark.org/0.29/#example-120>
fn t120_tab() {
    init!(" <div>\n  *hello*\n    \t\t\t\t\t<foo><a>\n");

    assert_eq!(
        // from spec:  <div>\n  *hello*\n         <foo><a>
        [
            html_block!("	<div>\n		*hello*\n									<foo><a>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new(" <div>\n  *hello*\n    \t\t\t\t\t<foo><a>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2151>
/// <https://spec.commonmark.org/0.29/#example-121>
fn t121() {
    init!("</div>\n*foo*\n");

    assert_eq!(
        // from spec: </div>\n*foo*
        [
            html_block!("</div>\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("</div>\n*foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2151>
/// <https://spec.commonmark.org/0.29/#example-121>
fn t121_cr() {
    init!("</div>\r*foo*\r");

    assert_eq!(
        // from spec: </div>\n*foo*
        [
            html_block!("</div>\r*foo*\r")
        ].as_slice(),
        body(&mut StringData::new("</div>\r*foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2151>
/// <https://spec.commonmark.org/0.29/#example-121>
fn t121_cr_nl() {
    init!("</div>\r\n*foo*\r\n");

    assert_eq!(
        // from spec: </div>\n*foo*
        [
            html_block!("</div>\r\n*foo*\r\n")
        ].as_slice(),
        body(&mut StringData::new("</div>\r\n*foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2151>
/// <https://spec.commonmark.org/0.29/#example-121>
fn t121_no_nl() {
    init!("</div>\n*foo*");

    assert_eq!(
        // from spec: </div>\n*foo*
        [
            html_block!("</div>\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("</div>\n*foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2162
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2162>
/// <https://spec.commonmark.org/0.29/#example-122>
fn t122() {
    init!("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n");

    assert_eq!(
        // from spec: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>
        [
            html_block!("<DIV CLASS=\"foo\">\n"),
            paragraph!(emph!(plain!("Markdown"))),
            html_block!("</DIV>\n"),
        ].as_slice(),
        body(&mut StringData::new("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2162
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2162>
/// <https://spec.commonmark.org/0.29/#example-122>
fn t122_cr() {
    init!("<DIV CLASS=\"foo\">\r\r*Markdown*\r\r</DIV>\r");

    assert_eq!(
        // from spec: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>
        [
            html_block!("<DIV CLASS=\"foo\">\r"),
            paragraph!(emph!(plain!("Markdown"))),
            html_block!("</DIV>\r"),
        ].as_slice(),
        body(&mut StringData::new("<DIV CLASS=\"foo\">\r\r*Markdown*\r\r</DIV>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2162
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2162>
/// <https://spec.commonmark.org/0.29/#example-122>
fn t122_cr_nl() {
    init!("<DIV CLASS=\"foo\">\r\n\r\n*Markdown*\r\n\r\n</DIV>\r\n");

    assert_eq!(
        // from spec: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>
        [
            html_block!("<DIV CLASS=\"foo\">\r\n"),
            paragraph!(emph!(plain!("Markdown"))),
            html_block!("</DIV>\r\n"),
        ].as_slice(),
        body(&mut StringData::new("<DIV CLASS=\"foo\">\r\n\r\n*Markdown*\r\n\r\n</DIV>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2162
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2162>
/// <https://spec.commonmark.org/0.29/#example-122>
fn t122_no_nl() {
    init!("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>");

    assert_eq!(
        // from spec: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>
        [
            html_block!("<DIV CLASS=\"foo\">\n"),
            paragraph!(emph!(plain!("Markdown"))),
            html_block!("</DIV>\n"),
        ].as_slice(),
        body(&mut StringData::new("<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2162
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2162>
/// <https://spec.commonmark.org/0.29/#example-122>
fn t122_tab() {
    init!("<DIV\tCLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n");

    assert_eq!(
        // from spec: <DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>
        [
            html_block!("<DIV	CLASS=\"foo\">\n"),
            paragraph!(emph!(plain!("Markdown"))),
            html_block!("</DIV>\n"),
        ].as_slice(),
        space2tab(body(&mut StringData::new("<DIV\tCLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2178
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2178>
/// <https://spec.commonmark.org/0.29/#example-123>
fn t123() {
    init!("<div id=\"foo\"\n  class=\"bar\">\n</div>\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n  class=\"bar\">\n</div>
        [
            html_block!("<div id=\"foo\"\n  class=\"bar\">\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\n  class=\"bar\">\n</div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2178
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2178>
/// <https://spec.commonmark.org/0.29/#example-123>
fn t123_cr() {
    init!("<div id=\"foo\"\r  class=\"bar\">\r</div>\r");

    assert_eq!(
        // from spec: <div id=\"foo\"\n  class=\"bar\">\n</div>
        [
            html_block!("<div id=\"foo\"\r  class=\"bar\">\r</div>\r")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\r  class=\"bar\">\r</div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2178
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2178>
/// <https://spec.commonmark.org/0.29/#example-123>
fn t123_cr_nl() {
    init!("<div id=\"foo\"\r\n  class=\"bar\">\r\n</div>\r\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n  class=\"bar\">\n</div>
        [
            html_block!("<div id=\"foo\"\r\n  class=\"bar\">\r\n</div>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\r\n  class=\"bar\">\r\n</div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2178
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2178>
/// <https://spec.commonmark.org/0.29/#example-123>
fn t123_no_nl() {
    init!("<div id=\"foo\"\n  class=\"bar\">\n</div>");

    assert_eq!(
        // from spec: <div id=\"foo\"\n  class=\"bar\">\n</div>
        [
            html_block!("<div id=\"foo\"\n  class=\"bar\">\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\n  class=\"bar\">\n</div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2178
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2178>
/// <https://spec.commonmark.org/0.29/#example-123>
fn t123_tab() {
    init!("<div\tid=\"foo\"\n  class=\"bar\">\n</div>\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n  class=\"bar\">\n</div>
        [
            html_block!("<div	id=\"foo\"\n		class=\"bar\">\n</div>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div\tid=\"foo\"\n  class=\"bar\">\n</div>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2189
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2189>
/// <https://spec.commonmark.org/0.29/#example-124>
fn t124() {
    init!("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n");

    assert_eq!(
        // from spec: <div id=\"foo\" class=\"bar\n  baz\">\n</div>
        [
            html_block!("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2189
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2189>
/// <https://spec.commonmark.org/0.29/#example-124>
fn t124_cr() {
    init!("<div id=\"foo\" class=\"bar\r  baz\">\r</div>\r");

    assert_eq!(
        // from spec: <div id=\"foo\" class=\"bar\n  baz\">\n</div>
        [
            html_block!("<div id=\"foo\" class=\"bar\r  baz\">\r</div>\r")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\" class=\"bar\r  baz\">\r</div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2189
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2189>
/// <https://spec.commonmark.org/0.29/#example-124>
fn t124_cr_nl() {
    init!("<div id=\"foo\" class=\"bar\r\n  baz\">\r\n</div>\r\n");

    assert_eq!(
        // from spec: <div id=\"foo\" class=\"bar\n  baz\">\n</div>
        [
            html_block!("<div id=\"foo\" class=\"bar\r\n  baz\">\r\n</div>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\" class=\"bar\r\n  baz\">\r\n</div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2189
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2189>
/// <https://spec.commonmark.org/0.29/#example-124>
fn t124_no_nl() {
    init!("<div id=\"foo\" class=\"bar\n  baz\">\n</div>");

    assert_eq!(
        // from spec: <div id=\"foo\" class=\"bar\n  baz\">\n</div>
        [
            html_block!("<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\" class=\"bar\n  baz\">\n</div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2189
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2189>
/// <https://spec.commonmark.org/0.29/#example-124>
fn t124_tab() {
    init!("<div\tid=\"foo\"\tclass=\"bar\n  baz\">\n</div>\n");

    assert_eq!(
        // from spec: <div id=\"foo\" class=\"bar\n  baz\">\n</div>
        [
            html_block!("<div	id=\"foo\"	class=\"bar\n		baz\">\n</div>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div\tid=\"foo\"\tclass=\"bar\n  baz\">\n</div>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2201
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2201>
/// <https://spec.commonmark.org/0.29/#example-125>
fn t125() {
    init!("<div>\n*foo*\n\n*bar*\n");

    assert_eq!(
        // from spec: <div>\n*foo*\n<p><em>bar</em></p>
        [
            html_block!("<div>\n*foo*\n"), paragraph!(emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("<div>\n*foo*\n\n*bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2201
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2201>
/// <https://spec.commonmark.org/0.29/#example-125>
fn t125_cr() {
    init!("<div>\r*foo*\r\r*bar*\r");

    assert_eq!(
        // from spec: <div>\n*foo*\n<p><em>bar</em></p>
        [
            html_block!("<div>\r*foo*\r"), paragraph!(emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("<div>\r*foo*\r\r*bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2201
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2201>
/// <https://spec.commonmark.org/0.29/#example-125>
fn t125_cr_nl() {
    init!("<div>\r\n*foo*\r\n\r\n*bar*\r\n");

    assert_eq!(
        // from spec: <div>\n*foo*\n<p><em>bar</em></p>
        [
            html_block!("<div>\r\n*foo*\r\n"), paragraph!(emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("<div>\r\n*foo*\r\n\r\n*bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2201
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2201>
/// <https://spec.commonmark.org/0.29/#example-125>
fn t125_no_nl() {
    init!("<div>\n*foo*\n\n*bar*");

    assert_eq!(
        // from spec: <div>\n*foo*\n<p><em>bar</em></p>
        [
            html_block!("<div>\n*foo*\n"), paragraph!(emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("<div>\n*foo*\n\n*bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2217
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2217>
/// <https://spec.commonmark.org/0.29/#example-126>
fn t126() {
    init!("<div id=\"foo\"\n*hi*\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n*hi*
        [
            html_block!("<div id=\"foo\"\n*hi*\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\n*hi*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2217
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2217>
/// <https://spec.commonmark.org/0.29/#example-126>
fn t126_cr() {
    init!("<div id=\"foo\"\r*hi*\r");

    assert_eq!(
        // from spec: <div id=\"foo\"\n*hi*
        [
            html_block!("<div id=\"foo\"\r*hi*\r")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\r*hi*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2217
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2217>
/// <https://spec.commonmark.org/0.29/#example-126>
fn t126_cr_nl() {
    init!("<div id=\"foo\"\r\n*hi*\r\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n*hi*
        [
            html_block!("<div id=\"foo\"\r\n*hi*\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\r\n*hi*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2217
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2217>
/// <https://spec.commonmark.org/0.29/#example-126>
fn t126_no_nl() {
    init!("<div id=\"foo\"\n*hi*");

    assert_eq!(
        // from spec: <div id=\"foo\"\n*hi*
        [
            html_block!("<div id=\"foo\"\n*hi*\n")
        ].as_slice(),
        body(&mut StringData::new("<div id=\"foo\"\n*hi*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2217
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2217>
/// <https://spec.commonmark.org/0.29/#example-126>
fn t126_tab() {
    init!("<div\tid=\"foo\"\n*hi*\n");

    assert_eq!(
        // from spec: <div id=\"foo\"\n*hi*
        [
            html_block!("<div	id=\"foo\"\n*hi*\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div\tid=\"foo\"\n*hi*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2226
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2226>
/// <https://spec.commonmark.org/0.29/#example-127>
fn t127() {
    init!("<div class\nfoo\n");

    assert_eq!(
        // from spec: <div class\nfoo
        [
            html_block!("<div class\nfoo\n")
        ].as_slice(),
        body(&mut StringData::new("<div class\nfoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2226
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2226>
/// <https://spec.commonmark.org/0.29/#example-127>
fn t127_cr() {
    init!("<div class\rfoo\r");

    assert_eq!(
        // from spec: <div class\nfoo
        [
            html_block!("<div class\rfoo\r")
        ].as_slice(),
        body(&mut StringData::new("<div class\rfoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2226
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2226>
/// <https://spec.commonmark.org/0.29/#example-127>
fn t127_cr_nl() {
    init!("<div class\r\nfoo\r\n");

    assert_eq!(
        // from spec: <div class\nfoo
        [
            html_block!("<div class\r\nfoo\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div class\r\nfoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2226
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2226>
/// <https://spec.commonmark.org/0.29/#example-127>
fn t127_no_nl() {
    init!("<div class\nfoo");

    assert_eq!(
        // from spec: <div class\nfoo
        [
            html_block!("<div class\nfoo\n")
        ].as_slice(),
        body(&mut StringData::new("<div class\nfoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2226
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2226>
/// <https://spec.commonmark.org/0.29/#example-127>
fn t127_tab() {
    init!("<div\tclass\nfoo\n");

    assert_eq!(
        // from spec: <div class\nfoo
        [
            html_block!("<div	class\nfoo\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div\tclass\nfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2238>
/// <https://spec.commonmark.org/0.29/#example-128>
fn t128() {
    init!("<div *???-&&&-<---\n*foo*\n");

    assert_eq!(
        // from spec: <div *???-&&&-<---\n*foo*
        [
            html_block!("<div *???-&&&-<---\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("<div *???-&&&-<---\n*foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2238>
/// <https://spec.commonmark.org/0.29/#example-128>
fn t128_cr() {
    init!("<div *???-&&&-<---\r*foo*\r");

    assert_eq!(
        // from spec: <div *???-&&&-<---\n*foo*
        [
            html_block!("<div *???-&&&-<---\r*foo*\r")
        ].as_slice(),
        body(&mut StringData::new("<div *???-&&&-<---\r*foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2238>
/// <https://spec.commonmark.org/0.29/#example-128>
fn t128_cr_nl() {
    init!("<div *???-&&&-<---\r\n*foo*\r\n");

    assert_eq!(
        // from spec: <div *???-&&&-<---\n*foo*
        [
            html_block!("<div *???-&&&-<---\r\n*foo*\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div *???-&&&-<---\r\n*foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2238>
/// <https://spec.commonmark.org/0.29/#example-128>
fn t128_no_nl() {
    init!("<div *???-&&&-<---\n*foo*");

    assert_eq!(
        // from spec: <div *???-&&&-<---\n*foo*
        [
            html_block!("<div *???-&&&-<---\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("<div *???-&&&-<---\n*foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2238>
/// <https://spec.commonmark.org/0.29/#example-128>
fn t128_tab() {
    init!("<div\t*???-&&&-<---\n*foo*\n");

    assert_eq!(
        // from spec: <div *???-&&&-<---\n*foo*
        [
            html_block!("<div	*???-&&&-<---\n*foo*\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div\t*???-&&&-<---\n*foo*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2250
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2250>
/// <https://spec.commonmark.org/0.29/#example-129>
fn t129() {
    init!("<div><a href=\"bar\">*foo*</a></div>\n");

    assert_eq!(
        // from spec: <div><a href=\"bar\">*foo*</a></div>
        [
            html_block!("<div><a href=\"bar\">*foo*</a></div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div><a href=\"bar\">*foo*</a></div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2250
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2250>
/// <https://spec.commonmark.org/0.29/#example-129>
fn t129_cr() {
    init!("<div><a href=\"bar\">*foo*</a></div>\r");

    assert_eq!(
        // from spec: <div><a href=\"bar\">*foo*</a></div>
        [
            html_block!("<div><a href=\"bar\">*foo*</a></div>\r")
        ].as_slice(),
        body(&mut StringData::new("<div><a href=\"bar\">*foo*</a></div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2250
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2250>
/// <https://spec.commonmark.org/0.29/#example-129>
fn t129_cr_nl() {
    init!("<div><a href=\"bar\">*foo*</a></div>\r\n");

    assert_eq!(
        // from spec: <div><a href=\"bar\">*foo*</a></div>
        [
            html_block!("<div><a href=\"bar\">*foo*</a></div>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div><a href=\"bar\">*foo*</a></div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2250
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2250>
/// <https://spec.commonmark.org/0.29/#example-129>
fn t129_no_nl() {
    init!("<div><a href=\"bar\">*foo*</a></div>");

    assert_eq!(
        // from spec: <div><a href=\"bar\">*foo*</a></div>
        [
            html_block!("<div><a href=\"bar\">*foo*</a></div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div><a href=\"bar\">*foo*</a></div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2250
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2250>
/// <https://spec.commonmark.org/0.29/#example-129>
fn t129_tab() {
    init!("<div><a\thref=\"bar\">*foo*</a></div>\n");

    assert_eq!(
        // from spec: <div><a href=\"bar\">*foo*</a></div>
        [
            html_block!("<div><a	href=\"bar\">*foo*</a></div>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div><a\thref=\"bar\">*foo*</a></div>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2257
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2257>
/// <https://spec.commonmark.org/0.29/#example-130>
fn t130() {
    init!("<table><tr><td>\nfoo\n</td></tr></table>\n");

    assert_eq!(
        // from spec: <table><tr><td>\nfoo\n</td></tr></table>
        [
            html_block!("<table><tr><td>\nfoo\n</td></tr></table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\nfoo\n</td></tr></table>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2257
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2257>
/// <https://spec.commonmark.org/0.29/#example-130>
fn t130_cr() {
    init!("<table><tr><td>\rfoo\r</td></tr></table>\r");

    assert_eq!(
        // from spec: <table><tr><td>\nfoo\n</td></tr></table>
        [
            html_block!("<table><tr><td>\rfoo\r</td></tr></table>\r")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\rfoo\r</td></tr></table>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2257
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2257>
/// <https://spec.commonmark.org/0.29/#example-130>
fn t130_cr_nl() {
    init!("<table><tr><td>\r\nfoo\r\n</td></tr></table>\r\n");

    assert_eq!(
        // from spec: <table><tr><td>\nfoo\n</td></tr></table>
        [
            html_block!("<table><tr><td>\r\nfoo\r\n</td></tr></table>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\r\nfoo\r\n</td></tr></table>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2257
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2257>
/// <https://spec.commonmark.org/0.29/#example-130>
fn t130_no_nl() {
    init!("<table><tr><td>\nfoo\n</td></tr></table>");

    assert_eq!(
        // from spec: <table><tr><td>\nfoo\n</td></tr></table>
        [
            html_block!("<table><tr><td>\nfoo\n</td></tr></table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table><tr><td>\nfoo\n</td></tr></table>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2274
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2274>
/// <https://spec.commonmark.org/0.29/#example-131>
fn t131() {
    init!("<div></div>\n``` c\nint x = 33;\n```\n");

    assert_eq!(
        // from spec: <div></div>\n``` c\nint x = 33;\n```
        [
            html_block!("<div></div>\n``` c\nint x = 33;\n```\n")
        ].as_slice(),
        body(&mut StringData::new("<div></div>\n``` c\nint x = 33;\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2274
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2274>
/// <https://spec.commonmark.org/0.29/#example-131>
fn t131_cr() {
    init!("<div></div>\r``` c\rint x = 33;\r```\r");

    assert_eq!(
        // from spec: <div></div>\n``` c\nint x = 33;\n```
        [
            html_block!("<div></div>\r``` c\rint x = 33;\r```\r")
        ].as_slice(),
        body(&mut StringData::new("<div></div>\r``` c\rint x = 33;\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2274
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2274>
/// <https://spec.commonmark.org/0.29/#example-131>
fn t131_cr_nl() {
    init!("<div></div>\r\n``` c\r\nint x = 33;\r\n```\r\n");

    assert_eq!(
        // from spec: <div></div>\n``` c\nint x = 33;\n```
        [
            html_block!("<div></div>\r\n``` c\r\nint x = 33;\r\n```\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div></div>\r\n``` c\r\nint x = 33;\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2274
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2274>
/// <https://spec.commonmark.org/0.29/#example-131>
fn t131_no_nl() {
    init!("<div></div>\n``` c\nint x = 33;\n```");

    assert_eq!(
        // from spec: <div></div>\n``` c\nint x = 33;\n```
        [
            html_block!("<div></div>\n``` c\nint x = 33;\n```\n")
        ].as_slice(),
        body(&mut StringData::new("<div></div>\n``` c\nint x = 33;\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2274
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2274>
/// <https://spec.commonmark.org/0.29/#example-131>
fn t131_tab() {
    init!("<div></div>\n```\tc\nint\tx\t=\t33;\n```\n");

    assert_eq!(
        // from spec: <div></div>\n``` c\nint x = 33;\n```
        [
            html_block!("<div></div>\n```	c\nint	x	=	33;\n```\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div></div>\n```\tc\nint\tx\t=\t33;\n```\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2291>
/// <https://spec.commonmark.org/0.29/#example-132>
fn t132() {
    init!("<a href=\"foo\">\n*bar*\n</a>\n");

    assert_eq!(
        // from spec: <a href=\"foo\">\n*bar*\n</a>
        [
            html_block!("<a href=\"foo\">\n*bar*\n</a>\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\">\n*bar*\n</a>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2291>
/// <https://spec.commonmark.org/0.29/#example-132>
fn t132_cr() {
    init!("<a href=\"foo\">\r*bar*\r</a>\r");

    assert_eq!(
        // from spec: <a href=\"foo\">\n*bar*\n</a>
        [
            html_block!("<a href=\"foo\">\r*bar*\r</a>\r")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\">\r*bar*\r</a>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2291>
/// <https://spec.commonmark.org/0.29/#example-132>
fn t132_cr_nl() {
    init!("<a href=\"foo\">\r\n*bar*\r\n</a>\r\n");

    assert_eq!(
        // from spec: <a href=\"foo\">\n*bar*\n</a>
        [
            html_block!("<a href=\"foo\">\r\n*bar*\r\n</a>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\">\r\n*bar*\r\n</a>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2291>
/// <https://spec.commonmark.org/0.29/#example-132>
fn t132_no_nl() {
    init!("<a href=\"foo\">\n*bar*\n</a>");

    assert_eq!(
        // from spec: <a href=\"foo\">\n*bar*\n</a>
        [
            html_block!("<a href=\"foo\">\n*bar*\n</a>\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\">\n*bar*\n</a>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2291>
/// <https://spec.commonmark.org/0.29/#example-132>
fn t132_tab() {
    init!("<a\thref=\"foo\">\n*bar*\n</a>\n");

    assert_eq!(
        // from spec: <a href=\"foo\">\n*bar*\n</a>
        [
            html_block!("<a	href=\"foo\">\n*bar*\n</a>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"foo\">\n*bar*\n</a>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2304
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2304>
/// <https://spec.commonmark.org/0.29/#example-133>
fn t133() {
    init!("<Warning>\n*bar*\n</Warning>\n");

    assert_eq!(
        // from spec: <Warning>\n*bar*\n</Warning>
        [
            html_block!("<Warning>\n*bar*\n</Warning>\n")
        ].as_slice(),
        body(&mut StringData::new("<Warning>\n*bar*\n</Warning>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2304
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2304>
/// <https://spec.commonmark.org/0.29/#example-133>
fn t133_cr() {
    init!("<Warning>\r*bar*\r</Warning>\r");

    assert_eq!(
        // from spec: <Warning>\n*bar*\n</Warning>
        [
            html_block!("<Warning>\r*bar*\r</Warning>\r")
        ].as_slice(),
        body(&mut StringData::new("<Warning>\r*bar*\r</Warning>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2304
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2304>
/// <https://spec.commonmark.org/0.29/#example-133>
fn t133_cr_nl() {
    init!("<Warning>\r\n*bar*\r\n</Warning>\r\n");

    assert_eq!(
        // from spec: <Warning>\n*bar*\n</Warning>
        [
            html_block!("<Warning>\r\n*bar*\r\n</Warning>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<Warning>\r\n*bar*\r\n</Warning>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2304
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2304>
/// <https://spec.commonmark.org/0.29/#example-133>
fn t133_no_nl() {
    init!("<Warning>\n*bar*\n</Warning>");

    assert_eq!(
        // from spec: <Warning>\n*bar*\n</Warning>
        [
            html_block!("<Warning>\n*bar*\n</Warning>\n")
        ].as_slice(),
        body(&mut StringData::new("<Warning>\n*bar*\n</Warning>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2315
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2315>
/// <https://spec.commonmark.org/0.29/#example-134>
fn t134() {
    init!("<i class=\"foo\">\n*bar*\n</i>\n");

    assert_eq!(
        // from spec: <i class=\"foo\">\n*bar*\n</i>
        [
            html_block!("<i class=\"foo\">\n*bar*\n</i>\n")
        ].as_slice(),
        body(&mut StringData::new("<i class=\"foo\">\n*bar*\n</i>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2315
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2315>
/// <https://spec.commonmark.org/0.29/#example-134>
fn t134_cr() {
    init!("<i class=\"foo\">\r*bar*\r</i>\r");

    assert_eq!(
        // from spec: <i class=\"foo\">\n*bar*\n</i>
        [
            html_block!("<i class=\"foo\">\r*bar*\r</i>\r")
        ].as_slice(),
        body(&mut StringData::new("<i class=\"foo\">\r*bar*\r</i>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2315
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2315>
/// <https://spec.commonmark.org/0.29/#example-134>
fn t134_cr_nl() {
    init!("<i class=\"foo\">\r\n*bar*\r\n</i>\r\n");

    assert_eq!(
        // from spec: <i class=\"foo\">\n*bar*\n</i>
        [
            html_block!("<i class=\"foo\">\r\n*bar*\r\n</i>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<i class=\"foo\">\r\n*bar*\r\n</i>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2315
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2315>
/// <https://spec.commonmark.org/0.29/#example-134>
fn t134_no_nl() {
    init!("<i class=\"foo\">\n*bar*\n</i>");

    assert_eq!(
        // from spec: <i class=\"foo\">\n*bar*\n</i>
        [
            html_block!("<i class=\"foo\">\n*bar*\n</i>\n")
        ].as_slice(),
        body(&mut StringData::new("<i class=\"foo\">\n*bar*\n</i>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2315
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2315>
/// <https://spec.commonmark.org/0.29/#example-134>
fn t134_tab() {
    init!("<i\tclass=\"foo\">\n*bar*\n</i>\n");

    assert_eq!(
        // from spec: <i class=\"foo\">\n*bar*\n</i>
        [
            html_block!("<i	class=\"foo\">\n*bar*\n</i>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<i\tclass=\"foo\">\n*bar*\n</i>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2326
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2326>
/// <https://spec.commonmark.org/0.29/#example-135>
fn t135() {
    init!("</ins>\n*bar*\n");

    assert_eq!(
        // from spec: </ins>\n*bar*
        [
            html_block!("</ins>\n*bar*\n")
        ].as_slice(),
        body(&mut StringData::new("</ins>\n*bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2326
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2326>
/// <https://spec.commonmark.org/0.29/#example-135>
fn t135_cr() {
    init!("</ins>\r*bar*\r");

    assert_eq!(
        // from spec: </ins>\n*bar*
        [
            html_block!("</ins>\r*bar*\r")
        ].as_slice(),
        body(&mut StringData::new("</ins>\r*bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2326
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2326>
/// <https://spec.commonmark.org/0.29/#example-135>
fn t135_cr_nl() {
    init!("</ins>\r\n*bar*\r\n");

    assert_eq!(
        // from spec: </ins>\n*bar*
        [
            html_block!("</ins>\r\n*bar*\r\n")
        ].as_slice(),
        body(&mut StringData::new("</ins>\r\n*bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2326
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2326>
/// <https://spec.commonmark.org/0.29/#example-135>
fn t135_no_nl() {
    init!("</ins>\n*bar*");

    assert_eq!(
        // from spec: </ins>\n*bar*
        [
            html_block!("</ins>\n*bar*\n")
        ].as_slice(),
        body(&mut StringData::new("</ins>\n*bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2341
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2341>
/// <https://spec.commonmark.org/0.29/#example-136>
fn t136() {
    init!("<del>\n*foo*\n</del>\n");

    assert_eq!(
        // from spec: <del>\n*foo*\n</del>
        [
            html_block!("<del>\n*foo*\n</del>\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\n*foo*\n</del>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2341
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2341>
/// <https://spec.commonmark.org/0.29/#example-136>
fn t136_cr() {
    init!("<del>\r*foo*\r</del>\r");

    assert_eq!(
        // from spec: <del>\n*foo*\n</del>
        [
            html_block!("<del>\r*foo*\r</del>\r")
        ].as_slice(),
        body(&mut StringData::new("<del>\r*foo*\r</del>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2341
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2341>
/// <https://spec.commonmark.org/0.29/#example-136>
fn t136_cr_nl() {
    init!("<del>\r\n*foo*\r\n</del>\r\n");

    assert_eq!(
        // from spec: <del>\n*foo*\n</del>
        [
            html_block!("<del>\r\n*foo*\r\n</del>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\r\n*foo*\r\n</del>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2341
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2341>
/// <https://spec.commonmark.org/0.29/#example-136>
fn t136_no_nl() {
    init!("<del>\n*foo*\n</del>");

    assert_eq!(
        // from spec: <del>\n*foo*\n</del>
        [
            html_block!("<del>\n*foo*\n</del>\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\n*foo*\n</del>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2356
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2356>
/// <https://spec.commonmark.org/0.29/#example-137>
fn t137() {
    init!("<del>\n\n*foo*\n\n</del>\n");

    assert_eq!(
        // from spec: <del>\n<p><em>foo</em></p>\n</del>
        [
            html_block!("<del>\n"), paragraph!(emph!(plain!("foo"))), html_block!("</del>\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\n\n*foo*\n\n</del>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2356
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2356>
/// <https://spec.commonmark.org/0.29/#example-137>
fn t137_cr() {
    init!("<del>\r\r*foo*\r\r</del>\r");

    assert_eq!(
        // from spec: <del>\n<p><em>foo</em></p>\n</del>
        [
            html_block!("<del>\r"), paragraph!(emph!(plain!("foo"))), html_block!("</del>\r")
        ].as_slice(),
        body(&mut StringData::new("<del>\r\r*foo*\r\r</del>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2356
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2356>
/// <https://spec.commonmark.org/0.29/#example-137>
fn t137_cr_nl() {
    init!("<del>\r\n\r\n*foo*\r\n\r\n</del>\r\n");

    assert_eq!(
        // from spec: <del>\n<p><em>foo</em></p>\n</del>
        [
            html_block!("<del>\r\n"), paragraph!(emph!(plain!("foo"))), html_block!("</del>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\r\n\r\n*foo*\r\n\r\n</del>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2356
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2356>
/// <https://spec.commonmark.org/0.29/#example-137>
fn t137_no_nl() {
    init!("<del>\n\n*foo*\n\n</del>");

    assert_eq!(
        // from spec: <del>\n<p><em>foo</em></p>\n</del>
        [
            html_block!("<del>\n"), paragraph!(emph!(plain!("foo"))), html_block!("</del>\n")
        ].as_slice(),
        body(&mut StringData::new("<del>\n\n*foo*\n\n</del>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2374>
/// <https://spec.commonmark.org/0.29/#example-138>
fn t138() {
    init!("<del>*foo*</del>\n");

    assert_eq!(
        // from spec: <p><del><em>foo</em></del></p>
        [
            paragraph!(html!("<del>"), emph!(plain!("foo")), html!("</del>"))
        ].as_slice(),
        body(&mut StringData::new("<del>*foo*</del>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2374>
/// <https://spec.commonmark.org/0.29/#example-138>
fn t138_cr() {
    init!("<del>*foo*</del>\r");

    assert_eq!(
        // from spec: <p><del><em>foo</em></del></p>
        [
            paragraph!(html!("<del>"), emph!(plain!("foo")), html!("</del>"))
        ].as_slice(),
        body(&mut StringData::new("<del>*foo*</del>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2374>
/// <https://spec.commonmark.org/0.29/#example-138>
fn t138_cr_nl() {
    init!("<del>*foo*</del>\r\n");

    assert_eq!(
        // from spec: <p><del><em>foo</em></del></p>
        [
            paragraph!(html!("<del>"), emph!(plain!("foo")), html!("</del>"))
        ].as_slice(),
        body(&mut StringData::new("<del>*foo*</del>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2374>
/// <https://spec.commonmark.org/0.29/#example-138>
fn t138_no_nl() {
    init!("<del>*foo*</del>");

    assert_eq!(
        // from spec: <p><del><em>foo</em></del></p>
        [
            paragraph!(html!("<del>"), emph!(plain!("foo")), html!("</del>"))
        ].as_slice(),
        body(&mut StringData::new("<del>*foo*</del>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2390>
/// <https://spec.commonmark.org/0.29/#example-139>
fn t139() {
    init!("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n");

    assert_eq!(
        // from spec: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>
        [
            html_block!("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2390>
/// <https://spec.commonmark.org/0.29/#example-139>
fn t139_cr() {
    init!("<pre language=\"haskell\"><code>\rimport Text.HTML.TagSoup\r\rmain :: IO ()\rmain = print $ parseTags tags\r</code></pre>\rokay\r");

    assert_eq!(
        // from spec: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>
        [
            html_block!("<pre language=\"haskell\"><code>\rimport Text.HTML.TagSoup\r\rmain :: IO ()\rmain = print $ parseTags tags\r</code></pre>\r"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<pre language=\"haskell\"><code>\rimport Text.HTML.TagSoup\r\rmain :: IO ()\rmain = print $ parseTags tags\r</code></pre>\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2390>
/// <https://spec.commonmark.org/0.29/#example-139>
fn t139_cr_nl() {
    init!("<pre language=\"haskell\"><code>\r\nimport Text.HTML.TagSoup\r\n\r\nmain :: IO ()\r\nmain = print $ parseTags tags\r\n</code></pre>\r\nokay\r\n");

    assert_eq!(
        // from spec: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>
        [
            html_block!("<pre language=\"haskell\"><code>\r\nimport Text.HTML.TagSoup\r\n\r\nmain :: IO ()\r\nmain = print $ parseTags tags\r\n</code></pre>\r\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<pre language=\"haskell\"><code>\r\nimport Text.HTML.TagSoup\r\n\r\nmain :: IO ()\r\nmain = print $ parseTags tags\r\n</code></pre>\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2390>
/// <https://spec.commonmark.org/0.29/#example-139>
fn t139_no_nl() {
    init!("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay");

    assert_eq!(
        // from spec: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>
        [
            html_block!("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2390>
/// <https://spec.commonmark.org/0.29/#example-139>
fn t139_tab() {
    init!("<pre\tlanguage=\"haskell\"><code>\nimport\tText.HTML.TagSoup\n\nmain\t::\tIO\t()\nmain\t=\tprint\t$\tparseTags\ttags\n</code></pre>\nokay\n");

    assert_eq!(
        // from spec: <pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>
        [
            html_block!("<pre	language=\"haskell\"><code>\nimport	Text.HTML.TagSoup\n\nmain	::	IO	()\nmain	=	print	$	parseTags	tags\n</code></pre>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<pre\tlanguage=\"haskell\"><code>\nimport\tText.HTML.TagSoup\n\nmain\t::\tIO\t()\nmain\t=\tprint\t$\tparseTags\ttags\n</code></pre>\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2411>
/// <https://spec.commonmark.org/0.29/#example-140>
fn t140() {
    init!("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n");

    assert_eq!(
        // from spec: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>
        [
            html_block!("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2411>
/// <https://spec.commonmark.org/0.29/#example-140>
fn t140_cr() {
    init!("<script type=\"text/javascript\">\r// JavaScript example\r\rdocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r</script>\rokay\r");

    assert_eq!(
        // from spec: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>
        [
            html_block!("<script type=\"text/javascript\">\r// JavaScript example\r\rdocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r</script>\r"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<script type=\"text/javascript\">\r// JavaScript example\r\rdocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r</script>\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2411>
/// <https://spec.commonmark.org/0.29/#example-140>
fn t140_cr_nl() {
    init!("<script type=\"text/javascript\">\r\n// JavaScript example\r\n\r\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r\n</script>\r\nokay\r\n");

    assert_eq!(
        // from spec: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>
        [
            html_block!("<script type=\"text/javascript\">\r\n// JavaScript example\r\n\r\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r\n</script>\r\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<script type=\"text/javascript\">\r\n// JavaScript example\r\n\r\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\r\n</script>\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2411>
/// <https://spec.commonmark.org/0.29/#example-140>
fn t140_no_nl() {
    init!("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay");

    assert_eq!(
        // from spec: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>
        [
            html_block!("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2411>
/// <https://spec.commonmark.org/0.29/#example-140>
fn t140_tab() {
    init!("<script\ttype=\"text/javascript\">\n//\tJavaScript\texample\n\ndocument.getElementById(\"demo\").innerHTML\t=\t\"Hello\tJavaScript!\";\n</script>\nokay\n");

    assert_eq!(
        // from spec: <script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>
        [
            html_block!("<script	type=\"text/javascript\">\n//	JavaScript	example\n\ndocument.getElementById(\"demo\").innerHTML	=	\"Hello	JavaScript!\";\n</script>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<script\ttype=\"text/javascript\">\n//\tJavaScript\texample\n\ndocument.getElementById(\"demo\").innerHTML\t=\t\"Hello\tJavaScript!\";\n</script>\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2430
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2430>
/// <https://spec.commonmark.org/0.29/#example-141>
fn t141() {
    init!("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>
        [
            html_block!("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2430
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2430>
/// <https://spec.commonmark.org/0.29/#example-141>
fn t141_cr() {
    init!("<style\r  type=\"text/css\">\rh1 {color:red;}\r\rp {color:blue;}\r</style>\rokay\r");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>
        [
            html_block!("<style\r  type=\"text/css\">\rh1 {color:red;}\r\rp {color:blue;}\r</style>\r"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<style\r  type=\"text/css\">\rh1 {color:red;}\r\rp {color:blue;}\r</style>\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2430
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2430>
/// <https://spec.commonmark.org/0.29/#example-141>
fn t141_cr_nl() {
    init!("<style\r\n  type=\"text/css\">\r\nh1 {color:red;}\r\n\r\np {color:blue;}\r\n</style>\r\nokay\r\n");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>
        [
            html_block!("<style\r\n  type=\"text/css\">\r\nh1 {color:red;}\r\n\r\np {color:blue;}\r\n</style>\r\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<style\r\n  type=\"text/css\">\r\nh1 {color:red;}\r\n\r\np {color:blue;}\r\n</style>\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2430
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2430>
/// <https://spec.commonmark.org/0.29/#example-141>
fn t141_no_nl() {
    init!("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>
        [
            html_block!("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2430
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2430>
/// <https://spec.commonmark.org/0.29/#example-141>
fn t141_tab() {
    init!("<style\n  type=\"text/css\">\nh1\t{color:red;}\n\np\t{color:blue;}\n</style>\nokay\n");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>
        [
            html_block!("<style\n		type=\"text/css\">\nh1	{color:red;}\n\np	{color:blue;}\n</style>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<style\n  type=\"text/css\">\nh1\t{color:red;}\n\np\t{color:blue;}\n</style>\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2453
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2453>
/// <https://spec.commonmark.org/0.29/#example-142>
fn t142() {
    init!("<style\n  type=\"text/css\">\n\nfoo\n");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\n\nfoo
        [
            html_block!("<style\n  type=\"text/css\">\n\nfoo\n")
        ].as_slice(),
        body(&mut StringData::new("<style\n  type=\"text/css\">\n\nfoo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2453
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2453>
/// <https://spec.commonmark.org/0.29/#example-142>
fn t142_cr() {
    init!("<style\r  type=\"text/css\">\r\rfoo\r");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\n\nfoo
        [
            html_block!("<style\r  type=\"text/css\">\r\rfoo\r")
        ].as_slice(),
        body(&mut StringData::new("<style\r  type=\"text/css\">\r\rfoo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2453
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2453>
/// <https://spec.commonmark.org/0.29/#example-142>
fn t142_cr_nl() {
    init!("<style\r\n  type=\"text/css\">\r\n\r\nfoo\r\n");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\n\nfoo
        [
            html_block!("<style\r\n  type=\"text/css\">\r\n\r\nfoo\r\n")
        ].as_slice(),
        body(&mut StringData::new("<style\r\n  type=\"text/css\">\r\n\r\nfoo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2453
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2453>
/// <https://spec.commonmark.org/0.29/#example-142>
fn t142_no_nl() {
    init!("<style\n  type=\"text/css\">\n\nfoo");

    assert_eq!(
        // from spec: <style\n  type=\"text/css\">\n\nfoo
        [
            html_block!("<style\n  type=\"text/css\">\n\nfoo\n")
        ].as_slice(),
        body(&mut StringData::new("<style\n  type=\"text/css\">\n\nfoo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2466
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2466>
/// <https://spec.commonmark.org/0.29/#example-143>
fn t143() {
    init!("> <div>\n> foo\n\nbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>
        [
            quote!(html_block!("<div>\nfoo\n")),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("> <div>\n> foo\n\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2466
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2466>
/// <https://spec.commonmark.org/0.29/#example-143>
fn t143_cr() {
    init!("> <div>\r> foo\r\rbar\r");

    assert_eq!(
        // from spec: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>
        [
            quote!(html_block!("<div>\rfoo\r")),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("> <div>\r> foo\r\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2466
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2466>
/// <https://spec.commonmark.org/0.29/#example-143>
fn t143_cr_nl() {
    init!("> <div>\r\n> foo\r\n\r\nbar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>
        [
            quote!(html_block!("<div>\r\nfoo\r\n")),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("> <div>\r\n> foo\r\n\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2466
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2466>
/// <https://spec.commonmark.org/0.29/#example-143>
fn t143_no_nl() {
    init!("> <div>\n> foo\n\nbar");

    assert_eq!(
        // from spec: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>
        [
            quote!(html_block!("<div>\nfoo\n")),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("> <div>\n> foo\n\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2466
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2466>
/// <https://spec.commonmark.org/0.29/#example-143>
fn t143_tab() {
    init!(">\t<div>\n>\tfoo\n\nbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>
        [
            quote!(html_block!("<div>\nfoo\n")),
            paragraph!(plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t<div>\n>\tfoo\n\nbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2480
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2480>
/// <https://spec.commonmark.org/0.29/#example-144>
fn t144() {
    init!("- <div>\n- foo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>
        [
            unordered_list!(
              vec![ html_block!("<div>\n") ],
              vec![ paragraph!(plain!("foo")) ]
            )
        ].as_slice(),
        body(&mut StringData::new("- <div>\n- foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2480
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2480>
/// <https://spec.commonmark.org/0.29/#example-144>
fn t144_cr() {
    init!("- <div>\r- foo\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>
        [
            unordered_list!(
              vec![ html_block!("<div>\r") ],
              vec![ paragraph!(plain!("foo")) ]
            )
        ].as_slice(),
        body(&mut StringData::new("- <div>\r- foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2480
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2480>
/// <https://spec.commonmark.org/0.29/#example-144>
fn t144_cr_nl() {
    init!("- <div>\r\n- foo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>
        [
            unordered_list!(
              vec![ html_block!("<div>\r\n") ],
              vec![ paragraph!(plain!("foo")) ]
            )
        ].as_slice(),
        body(&mut StringData::new("- <div>\r\n- foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2480
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2480>
/// <https://spec.commonmark.org/0.29/#example-144>
fn t144_no_nl() {
    init!("- <div>\n- foo");

    assert_eq!(
        // from spec: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>
        [
            unordered_list!(
              vec![ html_block!("<div>\n") ],
              vec![ paragraph!(plain!("foo")) ]
            )
        ].as_slice(),
        body(&mut StringData::new("- <div>\n- foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2480
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2480>
/// <https://spec.commonmark.org/0.29/#example-144>
fn t144_tab() {
    init!("-\t<div>\n-\tfoo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>
        [
            unordered_list!(
            		vec![	html_block!("<div>\n")	],
            		vec![	paragraph!(plain!("foo"))	]
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t<div>\n-\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2495>
/// <https://spec.commonmark.org/0.29/#example-145>
fn t145() {
    init!("<style>p{color:red;}</style>\n*foo*\n");

    assert_eq!(
        // from spec: <style>p{color:red;}</style>\n<p><em>foo</em></p>
        [
            html_block!("<style>p{color:red;}</style>\n"), paragraph!(emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("<style>p{color:red;}</style>\n*foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2495>
/// <https://spec.commonmark.org/0.29/#example-145>
fn t145_cr() {
    init!("<style>p{color:red;}</style>\r*foo*\r");

    assert_eq!(
        // from spec: <style>p{color:red;}</style>\n<p><em>foo</em></p>
        [
            html_block!("<style>p{color:red;}</style>\r"), paragraph!(emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("<style>p{color:red;}</style>\r*foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2495>
/// <https://spec.commonmark.org/0.29/#example-145>
fn t145_cr_nl() {
    init!("<style>p{color:red;}</style>\r\n*foo*\r\n");

    assert_eq!(
        // from spec: <style>p{color:red;}</style>\n<p><em>foo</em></p>
        [
            html_block!("<style>p{color:red;}</style>\r\n"), paragraph!(emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("<style>p{color:red;}</style>\r\n*foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2495>
/// <https://spec.commonmark.org/0.29/#example-145>
fn t145_no_nl() {
    init!("<style>p{color:red;}</style>\n*foo*");

    assert_eq!(
        // from spec: <style>p{color:red;}</style>\n<p><em>foo</em></p>
        [
            html_block!("<style>p{color:red;}</style>\n"), paragraph!(emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("<style>p{color:red;}</style>\n*foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2504
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2504>
/// <https://spec.commonmark.org/0.29/#example-146>
fn t146() {
    init!("<!-- foo -->*bar*\n*baz*\n");

    assert_eq!(
        // from spec: <!-- foo -->*bar*\n<p><em>baz</em></p>
        [
            html_block!("<!-- foo -->*bar*\n"),
            paragraph!(emph!(plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("<!-- foo -->*bar*\n*baz*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2504
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2504>
/// <https://spec.commonmark.org/0.29/#example-146>
fn t146_cr() {
    init!("<!-- foo -->*bar*\r*baz*\r");

    assert_eq!(
        // from spec: <!-- foo -->*bar*\n<p><em>baz</em></p>
        [
            html_block!("<!-- foo -->*bar*\r"),
            paragraph!(emph!(plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("<!-- foo -->*bar*\r*baz*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2504
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2504>
/// <https://spec.commonmark.org/0.29/#example-146>
fn t146_cr_nl() {
    init!("<!-- foo -->*bar*\r\n*baz*\r\n");

    assert_eq!(
        // from spec: <!-- foo -->*bar*\n<p><em>baz</em></p>
        [
            html_block!("<!-- foo -->*bar*\r\n"),
            paragraph!(emph!(plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("<!-- foo -->*bar*\r\n*baz*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2504
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2504>
/// <https://spec.commonmark.org/0.29/#example-146>
fn t146_no_nl() {
    init!("<!-- foo -->*bar*\n*baz*");

    assert_eq!(
        // from spec: <!-- foo -->*bar*\n<p><em>baz</em></p>
        [
            html_block!("<!-- foo -->*bar*\n"),
            paragraph!(emph!(plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("<!-- foo -->*bar*\n*baz*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2504
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2504>
/// <https://spec.commonmark.org/0.29/#example-146>
fn t146_tab() {
    init!("<!--\tfoo\t-->*bar*\n*baz*\n");

    assert_eq!(
        // from spec: <!-- foo -->*bar*\n<p><em>baz</em></p>
        [
            html_block!("<!--	foo	-->*bar*\n"),
            paragraph!(emph!(plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<!--\tfoo\t-->*bar*\n*baz*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2516
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2516>
/// <https://spec.commonmark.org/0.29/#example-147>
fn t147() {
    init!("<script>\nfoo\n</script>1. *bar*\n");

    assert_eq!(
        // from spec: <script>\nfoo\n</script>1. *bar*
        [
            html_block!("<script>\nfoo\n</script>1. *bar*\n")
        ].as_slice(),
        body(&mut StringData::new("<script>\nfoo\n</script>1. *bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2516
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2516>
/// <https://spec.commonmark.org/0.29/#example-147>
fn t147_cr() {
    init!("<script>\rfoo\r</script>1. *bar*\r");

    assert_eq!(
        // from spec: <script>\nfoo\n</script>1. *bar*
        [
            html_block!("<script>\rfoo\r</script>1. *bar*\r")
        ].as_slice(),
        body(&mut StringData::new("<script>\rfoo\r</script>1. *bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2516
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2516>
/// <https://spec.commonmark.org/0.29/#example-147>
fn t147_cr_nl() {
    init!("<script>\r\nfoo\r\n</script>1. *bar*\r\n");

    assert_eq!(
        // from spec: <script>\nfoo\n</script>1. *bar*
        [
            html_block!("<script>\r\nfoo\r\n</script>1. *bar*\r\n")
        ].as_slice(),
        body(&mut StringData::new("<script>\r\nfoo\r\n</script>1. *bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2516
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2516>
/// <https://spec.commonmark.org/0.29/#example-147>
fn t147_no_nl() {
    init!("<script>\nfoo\n</script>1. *bar*");

    assert_eq!(
        // from spec: <script>\nfoo\n</script>1. *bar*
        [
            html_block!("<script>\nfoo\n</script>1. *bar*\n")
        ].as_slice(),
        body(&mut StringData::new("<script>\nfoo\n</script>1. *bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2516
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2516>
/// <https://spec.commonmark.org/0.29/#example-147>
fn t147_tab() {
    init!("<script>\nfoo\n</script>1.\t*bar*\n");

    assert_eq!(
        // from spec: <script>\nfoo\n</script>1. *bar*
        [
            html_block!("<script>\nfoo\n</script>1.	*bar*\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<script>\nfoo\n</script>1.\t*bar*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2529>
/// <https://spec.commonmark.org/0.29/#example-148>
fn t148() {
    init!("<!-- Foo\n\nbar\n   baz -->\nokay\n");

    assert_eq!(
        // from spec: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>
        [
            html_block!("<!-- Foo\n\nbar\n   baz -->\n"), paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<!-- Foo\n\nbar\n   baz -->\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2529>
/// <https://spec.commonmark.org/0.29/#example-148>
fn t148_cr() {
    init!("<!-- Foo\r\rbar\r   baz -->\rokay\r");

    assert_eq!(
        // from spec: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>
        [
            html_block!("<!-- Foo\r\rbar\r   baz -->\r"), paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<!-- Foo\r\rbar\r   baz -->\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2529>
/// <https://spec.commonmark.org/0.29/#example-148>
fn t148_cr_nl() {
    init!("<!-- Foo\r\n\r\nbar\r\n   baz -->\r\nokay\r\n");

    assert_eq!(
        // from spec: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>
        [
            html_block!("<!-- Foo\r\n\r\nbar\r\n   baz -->\r\n"), paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<!-- Foo\r\n\r\nbar\r\n   baz -->\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2529>
/// <https://spec.commonmark.org/0.29/#example-148>
fn t148_no_nl() {
    init!("<!-- Foo\n\nbar\n   baz -->\nokay");

    assert_eq!(
        // from spec: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>
        [
            html_block!("<!-- Foo\n\nbar\n   baz -->\n"), paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<!-- Foo\n\nbar\n   baz -->\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2529>
/// <https://spec.commonmark.org/0.29/#example-148>
fn t148_tab() {
    init!("<!--\tFoo\n\nbar\n   baz\t-->\nokay\n");

    assert_eq!(
        // from spec: <!-- Foo\n\nbar\n   baz -->\n<p>okay</p>
        [
            html_block!("<!--\tFoo\n\nbar\n\t\t\tbaz\t-->\n"), paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<!--\tFoo\n\nbar\n   baz\t-->\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2547
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2547>
/// <https://spec.commonmark.org/0.29/#example-149>
fn t149() {
    init!("<?php\n\n  echo \'>\';\n\n?>\nokay\n");

    assert_eq!(
        // from spec: <?php\n\n  echo \'>\';\n\n?>\n<p>okay</p>
        [
            html_block!("<?php\n\n  echo '>';\n\n?>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<?php\n\n  echo \'>\';\n\n?>\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2547
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2547>
/// <https://spec.commonmark.org/0.29/#example-149>
fn t149_cr() {
    init!("<?php\r\r  echo \'>\';\r\r?>\rokay\r");

    assert_eq!(
        // from spec: <?php\n\n  echo \'>\';\n\n?>\n<p>okay</p>
        [
            html_block!("<?php\r\r  echo '>';\r\r?>\r"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<?php\r\r  echo \'>\';\r\r?>\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2547
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2547>
/// <https://spec.commonmark.org/0.29/#example-149>
fn t149_cr_nl() {
    init!("<?php\r\n\r\n  echo \'>\';\r\n\r\n?>\r\nokay\r\n");

    assert_eq!(
        // from spec: <?php\n\n  echo \'>\';\n\n?>\n<p>okay</p>
        [
            html_block!("<?php\r\n\r\n  echo '>';\r\n\r\n?>\r\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<?php\r\n\r\n  echo \'>\';\r\n\r\n?>\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2547
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2547>
/// <https://spec.commonmark.org/0.29/#example-149>
fn t149_no_nl() {
    init!("<?php\n\n  echo \'>\';\n\n?>\nokay");

    assert_eq!(
        // from spec: <?php\n\n  echo \'>\';\n\n?>\n<p>okay</p>
        [
            html_block!("<?php\n\n  echo '>';\n\n?>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<?php\n\n  echo \'>\';\n\n?>\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2547
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2547>
/// <https://spec.commonmark.org/0.29/#example-149>
fn t149_tab() {
    init!("<?php\n\n  echo\t\'>\';\n\n?>\nokay\n");

    assert_eq!(
        // from spec: <?php\n\n  echo \'>\';\n\n?>\n<p>okay</p>
        [
            html_block!("<?php\n\n		echo	'>';\n\n?>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<?php\n\n  echo\t\'>\';\n\n?>\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2566
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2566>
/// <https://spec.commonmark.org/0.29/#example-150>
fn t150() {
    init!("<!DOCTYPE html>\n");

    assert_eq!(
        // from spec: <!DOCTYPE html>
        [
            html_block!("<!DOCTYPE html>\n")
        ].as_slice(),
        body(&mut StringData::new("<!DOCTYPE html>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2566
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2566>
/// <https://spec.commonmark.org/0.29/#example-150>
fn t150_cr() {
    init!("<!DOCTYPE html>\r");

    assert_eq!(
        // from spec: <!DOCTYPE html>
        [
            html_block!("<!DOCTYPE html>\r")
        ].as_slice(),
        body(&mut StringData::new("<!DOCTYPE html>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2566
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2566>
/// <https://spec.commonmark.org/0.29/#example-150>
fn t150_cr_nl() {
    init!("<!DOCTYPE html>\r\n");

    assert_eq!(
        // from spec: <!DOCTYPE html>
        [
            html_block!("<!DOCTYPE html>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<!DOCTYPE html>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2566
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2566>
/// <https://spec.commonmark.org/0.29/#example-150>
fn t150_no_nl() {
    init!("<!DOCTYPE html>");

    assert_eq!(
        // from spec: <!DOCTYPE html>
        [
            html_block!("<!DOCTYPE html>\n")
        ].as_slice(),
        body(&mut StringData::new("<!DOCTYPE html>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2566
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2566>
/// <https://spec.commonmark.org/0.29/#example-150>
fn t150_tab() {
    init!("<!DOCTYPE\thtml>\n");

    assert_eq!(
        // from spec: <!DOCTYPE html>
        [
            html_block!("<!DOCTYPE	html>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<!DOCTYPE\thtml>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2575
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2575>
/// <https://spec.commonmark.org/0.29/#example-151>
fn t151() {
    init!("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n");

    assert_eq!(
        // from spec: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>
        [
            html_block!("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2575
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2575>
/// <https://spec.commonmark.org/0.29/#example-151>
fn t151_cr() {
    init!("<![CDATA[\rfunction matchwo(a,b)\r{\r  if (a < b && a < 0) then {\r    return 1;\r\r  } else {\r\r    return 0;\r  }\r}\r]]>\rokay\r");

    assert_eq!(
        // from spec: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>
        [
            html_block!("<![CDATA[\rfunction matchwo(a,b)\r{\r  if (a < b && a < 0) then {\r    return 1;\r\r  } else {\r\r    return 0;\r  }\r}\r]]>\r"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<![CDATA[\rfunction matchwo(a,b)\r{\r  if (a < b && a < 0) then {\r    return 1;\r\r  } else {\r\r    return 0;\r  }\r}\r]]>\rokay\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2575
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2575>
/// <https://spec.commonmark.org/0.29/#example-151>
fn t151_cr_nl() {
    init!("<![CDATA[\r\nfunction matchwo(a,b)\r\n{\r\n  if (a < b && a < 0) then {\r\n    return 1;\r\n\r\n  } else {\r\n\r\n    return 0;\r\n  }\r\n}\r\n]]>\r\nokay\r\n");

    assert_eq!(
        // from spec: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>
        [
            html_block!("<![CDATA[\r\nfunction matchwo(a,b)\r\n{\r\n  if (a < b && a < 0) then {\r\n    return 1;\r\n\r\n  } else {\r\n\r\n    return 0;\r\n  }\r\n}\r\n]]>\r\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<![CDATA[\r\nfunction matchwo(a,b)\r\n{\r\n  if (a < b && a < 0) then {\r\n    return 1;\r\n\r\n  } else {\r\n\r\n    return 0;\r\n  }\r\n}\r\n]]>\r\nokay\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2575
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2575>
/// <https://spec.commonmark.org/0.29/#example-151>
fn t151_no_nl() {
    init!("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay");

    assert_eq!(
        // from spec: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>
        [
            html_block!("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        body(&mut StringData::new("<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2575
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2575>
/// <https://spec.commonmark.org/0.29/#example-151>
fn t151_tab() {
    init!("<![CDATA[\nfunction\tmatchwo(a,b)\n{\n  if\t(a\t<\tb\t&&\ta\t<\t0)\tthen\t{\n    return\t1;\n\n  }\telse\t{\n\n    return\t0;\n  }\n}\n]]>\nokay\n");

    assert_eq!(
        // from spec: <![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>
        [
            html_block!("<![CDATA[\nfunction	matchwo(a,b)\n{\n		if	(a	<	b	&&	a	<	0)	then	{\n				return	1;\n\n		}	else	{\n\n				return	0;\n		}\n}\n]]>\n"),
            paragraph!(plain!("okay"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<![CDATA[\nfunction\tmatchwo(a,b)\n{\n  if\t(a\t<\tb\t&&\ta\t<\t0)\tthen\t{\n    return\t1;\n\n  }\telse\t{\n\n    return\t0;\n  }\n}\n]]>\nokay\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2608
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2608>
/// <https://spec.commonmark.org/0.29/#example-152>
fn t152() {
    init!("  <!-- foo -->\n\n    <!-- foo -->\n");

    assert_eq!(
        // from spec:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>
        [
            html_block!("  <!-- foo -->\n"),
            html_block!("    <!-- foo -->\n")
        ].as_slice(),
        body(&mut StringData::new("  <!-- foo -->\n\n    <!-- foo -->\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2608
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2608>
/// <https://spec.commonmark.org/0.29/#example-152>
fn t152_cr() {
    init!("  <!-- foo -->\r\r    <!-- foo -->\r");

    assert_eq!(
        // from spec:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>
        [
            html_block!("  <!-- foo -->\r"),
            html_block!("    <!-- foo -->\r")
        ].as_slice(),
        body(&mut StringData::new("  <!-- foo -->\r\r    <!-- foo -->\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2608
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2608>
/// <https://spec.commonmark.org/0.29/#example-152>
fn t152_cr_nl() {
    init!("  <!-- foo -->\r\n\r\n    <!-- foo -->\r\n");

    assert_eq!(
        // from spec:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>
        [
            html_block!("  <!-- foo -->\r\n"),
            html_block!("    <!-- foo -->\r\n")
        ].as_slice(),
        body(&mut StringData::new("  <!-- foo -->\r\n\r\n    <!-- foo -->\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2608
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2608>
/// <https://spec.commonmark.org/0.29/#example-152>
fn t152_no_nl() {
    init!("  <!-- foo -->\n\n    <!-- foo -->");

    assert_eq!(
        // from spec:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>
        [
            html_block!("  <!-- foo -->\n"),
            html_block!("    <!-- foo -->\n")
        ].as_slice(),
        body(&mut StringData::new("  <!-- foo -->\n\n    <!-- foo -->", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2608
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2608>
/// <https://spec.commonmark.org/0.29/#example-152>
fn t152_tab() {
    init!("  <!--\tfoo\t-->\n\n    <!--\tfoo\t-->\n");

    assert_eq!(
        // from spec:   <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>
        [
            html_block!("		<!--	foo	-->\n"),
            html_block!("				<!--	foo	-->\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("  <!--\tfoo\t-->\n\n    <!--\tfoo\t-->\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2619>
/// <https://spec.commonmark.org/0.29/#example-153>
fn t153() {
    init!("  <div>\n\n    <div>\n");

    assert_eq!(
        // from spec:   <div>\n<pre><code>&lt;div&gt;\n</code></pre>
        [
            html_block!("  <div>\n"),
            html_block!("    <div>\n"),
        ].as_slice(),
        body(&mut StringData::new("  <div>\n\n    <div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2619>
/// <https://spec.commonmark.org/0.29/#example-153>
fn t153_cr() {
    init!("  <div>\r\r    <div>\r");

    assert_eq!(
        // from spec:   <div>\n<pre><code>&lt;div&gt;\n</code></pre>
        [
            html_block!("  <div>\r"),
            html_block!("    <div>\r"),
        ].as_slice(),
        body(&mut StringData::new("  <div>\r\r    <div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2619>
/// <https://spec.commonmark.org/0.29/#example-153>
fn t153_cr_nl() {
    init!("  <div>\r\n\r\n    <div>\r\n");

    assert_eq!(
        // from spec:   <div>\n<pre><code>&lt;div&gt;\n</code></pre>
        [
            html_block!("  <div>\r\n"),
            html_block!("    <div>\r\n"),
        ].as_slice(),
        body(&mut StringData::new("  <div>\r\n\r\n    <div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2619>
/// <https://spec.commonmark.org/0.29/#example-153>
fn t153_no_nl() {
    init!("  <div>\n\n    <div>");

    assert_eq!(
        // from spec:   <div>\n<pre><code>&lt;div&gt;\n</code></pre>
        [
            html_block!("  <div>\n"),
            html_block!("    <div>\n"),
        ].as_slice(),
        body(&mut StringData::new("  <div>\n\n    <div>", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2633
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2633>
/// <https://spec.commonmark.org/0.29/#example-154>
fn t154() {
    init!("Foo\n<div>\nbar\n</div>\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<div>\nbar\n</div>
        [
            paragraph!(plain!("Foo")),
            html_block!("<div>\nbar\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("Foo\n<div>\nbar\n</div>\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2633
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2633>
/// <https://spec.commonmark.org/0.29/#example-154>
fn t154_cr() {
    init!("Foo\r<div>\rbar\r</div>\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<div>\nbar\n</div>
        [
            paragraph!(plain!("Foo")),
            html_block!("<div>\rbar\r</div>\r")
        ].as_slice(),
        body(&mut StringData::new("Foo\r<div>\rbar\r</div>\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2633
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2633>
/// <https://spec.commonmark.org/0.29/#example-154>
fn t154_cr_nl() {
    init!("Foo\r\n<div>\r\nbar\r\n</div>\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<div>\nbar\n</div>
        [
            paragraph!(plain!("Foo")),
            html_block!("<div>\r\nbar\r\n</div>\r\n")
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n<div>\r\nbar\r\n</div>\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2633
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2633>
/// <https://spec.commonmark.org/0.29/#example-154>
fn t154_no_nl() {
    init!("Foo\n<div>\nbar\n</div>");

    assert_eq!(
        // from spec: <p>Foo</p>\n<div>\nbar\n</div>
        [
            paragraph!(plain!("Foo")),
            html_block!("<div>\nbar\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("Foo\n<div>\nbar\n</div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2650>
/// <https://spec.commonmark.org/0.29/#example-155>
fn t155() {
    init!("<div>\nbar\n</div>\n*foo*\n");

    assert_eq!(
        // from spec: <div>\nbar\n</div>\n*foo*
        [
            html_block!("<div>\nbar\n</div>\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\nbar\n</div>\n*foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2650>
/// <https://spec.commonmark.org/0.29/#example-155>
fn t155_cr() {
    init!("<div>\rbar\r</div>\r*foo*\r");

    assert_eq!(
        // from spec: <div>\nbar\n</div>\n*foo*
        [
            html_block!("<div>\rbar\r</div>\r*foo*\r")
        ].as_slice(),
        body(&mut StringData::new("<div>\rbar\r</div>\r*foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2650>
/// <https://spec.commonmark.org/0.29/#example-155>
fn t155_cr_nl() {
    init!("<div>\r\nbar\r\n</div>\r\n*foo*\r\n");

    assert_eq!(
        // from spec: <div>\nbar\n</div>\n*foo*
        [
            html_block!("<div>\r\nbar\r\n</div>\r\n*foo*\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\r\nbar\r\n</div>\r\n*foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2650
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2650>
/// <https://spec.commonmark.org/0.29/#example-155>
fn t155_no_nl() {
    init!("<div>\nbar\n</div>\n*foo*");

    assert_eq!(
        // from spec: <div>\nbar\n</div>\n*foo*
        [
            html_block!("<div>\nbar\n</div>\n*foo*\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\nbar\n</div>\n*foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2665
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2665>
/// <https://spec.commonmark.org/0.29/#example-156>
fn t156() {
    init!("Foo\n<a href=\"bar\">\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\n<a href=\"bar\">\nbaz</p>
        [
            paragraph!(
              plain!("Foo"),
              SoftBreak,
              html!("<a href=\"bar\">"),
              SoftBreak,
              plain!("baz")
            )
        ].as_slice(),
        body(&mut StringData::new("Foo\n<a href=\"bar\">\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2665
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2665>
/// <https://spec.commonmark.org/0.29/#example-156>
fn t156_cr() {
    init!("Foo\r<a href=\"bar\">\rbaz\r");

    assert_eq!(
        // from spec: <p>Foo\n<a href=\"bar\">\nbaz</p>
        [
            paragraph!(
              plain!("Foo"),
              SoftBreak,
              html!("<a href=\"bar\">"),
              SoftBreak,
              plain!("baz")
            )
        ].as_slice(),
        body(&mut StringData::new("Foo\r<a href=\"bar\">\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2665
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2665>
/// <https://spec.commonmark.org/0.29/#example-156>
fn t156_cr_nl() {
    init!("Foo\r\n<a href=\"bar\">\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>Foo\n<a href=\"bar\">\nbaz</p>
        [
            paragraph!(
              plain!("Foo"),
              SoftBreak,
              html!("<a href=\"bar\">"),
              SoftBreak,
              plain!("baz")
            )
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n<a href=\"bar\">\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2665
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2665>
/// <https://spec.commonmark.org/0.29/#example-156>
fn t156_no_nl() {
    init!("Foo\n<a href=\"bar\">\nbaz");

    assert_eq!(
        // from spec: <p>Foo\n<a href=\"bar\">\nbaz</p>
        [
            paragraph!(
              plain!("Foo"),
              SoftBreak,
              html!("<a href=\"bar\">"),
              SoftBreak,
              plain!("baz")
            )
        ].as_slice(),
        body(&mut StringData::new("Foo\n<a href=\"bar\">\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2665
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2665>
/// <https://spec.commonmark.org/0.29/#example-156>
fn t156_tab() {
    init!("Foo\n<a\thref=\"bar\">\nbaz\n");

    assert_eq!(
        // from spec: <p>Foo\n<a href=\"bar\">\nbaz</p>
        [
            paragraph!(
            		plain!("Foo"),
            		SoftBreak,
            		html!("<a	href=\"bar\">"),
            		SoftBreak,
            		plain!("baz")
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\n<a\thref=\"bar\">\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2706>
/// <https://spec.commonmark.org/0.29/#example-157>
fn t157() {
    init!("<div>\n\n*Emphasized* text.\n\n</div>\n");

    assert_eq!(
        // from spec: <div>\n<p><em>Emphasized</em> text.</p>\n</div>
        [
            html_block!("<div>\n"),
            paragraph!(emph!(plain!("Emphasized")), plain!(" text.")),
            html_block!("</div>\n"),
        ].as_slice(),
        body(&mut StringData::new("<div>\n\n*Emphasized* text.\n\n</div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2706>
/// <https://spec.commonmark.org/0.29/#example-157>
fn t157_cr() {
    init!("<div>\r\r*Emphasized* text.\r\r</div>\r");

    assert_eq!(
        // from spec: <div>\n<p><em>Emphasized</em> text.</p>\n</div>
        [
            html_block!("<div>\r"),
            paragraph!(emph!(plain!("Emphasized")), plain!(" text.")),
            html_block!("</div>\r"),
        ].as_slice(),
        body(&mut StringData::new("<div>\r\r*Emphasized* text.\r\r</div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2706>
/// <https://spec.commonmark.org/0.29/#example-157>
fn t157_cr_nl() {
    init!("<div>\r\n\r\n*Emphasized* text.\r\n\r\n</div>\r\n");

    assert_eq!(
        // from spec: <div>\n<p><em>Emphasized</em> text.</p>\n</div>
        [
            html_block!("<div>\r\n"),
            paragraph!(emph!(plain!("Emphasized")), plain!(" text.")),
            html_block!("</div>\r\n"),
        ].as_slice(),
        body(&mut StringData::new("<div>\r\n\r\n*Emphasized* text.\r\n\r\n</div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2706>
/// <https://spec.commonmark.org/0.29/#example-157>
fn t157_no_nl() {
    init!("<div>\n\n*Emphasized* text.\n\n</div>");

    assert_eq!(
        // from spec: <div>\n<p><em>Emphasized</em> text.</p>\n</div>
        [
            html_block!("<div>\n"),
            paragraph!(emph!(plain!("Emphasized")), plain!(" text.")),
            html_block!("</div>\n"),
        ].as_slice(),
        body(&mut StringData::new("<div>\n\n*Emphasized* text.\n\n</div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2706>
/// <https://spec.commonmark.org/0.29/#example-157>
fn t157_tab() {
    init!("<div>\n\n*Emphasized*\ttext.\n\n</div>\n");

    assert_eq!(
        // from spec: <div>\n<p><em>Emphasized</em> text.</p>\n</div>
        [
            html_block!("<div>\n"),
            paragraph!(emph!(plain!("Emphasized")),	plain!("	text.")),
            html_block!("</div>\n"),
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div>\n\n*Emphasized*\ttext.\n\n</div>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2719
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2719>
/// <https://spec.commonmark.org/0.29/#example-158>
fn t158() {
    init!("<div>\n*Emphasized* text.\n</div>\n");

    assert_eq!(
        // from spec: <div>\n*Emphasized* text.\n</div>
        [
            html_block!("<div>\n*Emphasized* text.\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\n*Emphasized* text.\n</div>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2719
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2719>
/// <https://spec.commonmark.org/0.29/#example-158>
fn t158_cr() {
    init!("<div>\r*Emphasized* text.\r</div>\r");

    assert_eq!(
        // from spec: <div>\n*Emphasized* text.\n</div>
        [
            html_block!("<div>\r*Emphasized* text.\r</div>\r")
        ].as_slice(),
        body(&mut StringData::new("<div>\r*Emphasized* text.\r</div>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2719
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2719>
/// <https://spec.commonmark.org/0.29/#example-158>
fn t158_cr_nl() {
    init!("<div>\r\n*Emphasized* text.\r\n</div>\r\n");

    assert_eq!(
        // from spec: <div>\n*Emphasized* text.\n</div>
        [
            html_block!("<div>\r\n*Emphasized* text.\r\n</div>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\r\n*Emphasized* text.\r\n</div>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2719
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2719>
/// <https://spec.commonmark.org/0.29/#example-158>
fn t158_no_nl() {
    init!("<div>\n*Emphasized* text.\n</div>");

    assert_eq!(
        // from spec: <div>\n*Emphasized* text.\n</div>
        [
            html_block!("<div>\n*Emphasized* text.\n</div>\n")
        ].as_slice(),
        body(&mut StringData::new("<div>\n*Emphasized* text.\n</div>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2719
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2719>
/// <https://spec.commonmark.org/0.29/#example-158>
fn t158_tab() {
    init!("<div>\n*Emphasized*\ttext.\n</div>\n");

    assert_eq!(
        // from spec: <div>\n*Emphasized* text.\n</div>
        [
            html_block!("<div>\n*Emphasized*	text.\n</div>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<div>\n*Emphasized*\ttext.\n</div>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2741
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2741>
/// <https://spec.commonmark.org/0.29/#example-159>
fn t159() {
    init!("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n");

    assert_eq!(
        // from spec: <table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>
        [
            html_block!("<table>\n"),
            html_block!("<tr>\n"),
            html_block!("<td>\nHi\n</td>\n"),
            html_block!("</tr>\n"),
            html_block!("</table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2741
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2741>
/// <https://spec.commonmark.org/0.29/#example-159>
fn t159_cr() {
    init!("<table>\r\r<tr>\r\r<td>\rHi\r</td>\r\r</tr>\r\r</table>\r");

    assert_eq!(
        // from spec: <table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>
        [
            html_block!("<table>\r"),
            html_block!("<tr>\r"),
            html_block!("<td>\rHi\r</td>\r"),
            html_block!("</tr>\r"),
            html_block!("</table>\r")
        ].as_slice(),
        body(&mut StringData::new("<table>\r\r<tr>\r\r<td>\rHi\r</td>\r\r</tr>\r\r</table>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2741
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2741>
/// <https://spec.commonmark.org/0.29/#example-159>
fn t159_cr_nl() {
    init!("<table>\r\n\r\n<tr>\r\n\r\n<td>\r\nHi\r\n</td>\r\n\r\n</tr>\r\n\r\n</table>\r\n");

    assert_eq!(
        // from spec: <table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>
        [
            html_block!("<table>\r\n"),
            html_block!("<tr>\r\n"),
            html_block!("<td>\r\nHi\r\n</td>\r\n"),
            html_block!("</tr>\r\n"),
            html_block!("</table>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\r\n\r\n<tr>\r\n\r\n<td>\r\nHi\r\n</td>\r\n\r\n</tr>\r\n\r\n</table>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2741
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2741>
/// <https://spec.commonmark.org/0.29/#example-159>
fn t159_no_nl() {
    init!("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>");

    assert_eq!(
        // from spec: <table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>
        [
            html_block!("<table>\n"),
            html_block!("<tr>\n"),
            html_block!("<td>\nHi\n</td>\n"),
            html_block!("</tr>\n"),
            html_block!("</table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2768>
/// <https://spec.commonmark.org/0.29/#example-160>
fn t160() {
    init!("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>
        [
            html_block!("<table>\n"),
            html_block!("  <tr>\n"),
            html_block!("    <td>\n      Hi\n    </td>\n"),
            html_block!("  </tr>\n"),
            html_block!("</table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2768>
/// <https://spec.commonmark.org/0.29/#example-160>
fn t160_cr() {
    init!("<table>\r\r  <tr>\r\r    <td>\r      Hi\r    </td>\r\r  </tr>\r\r</table>\r");

    assert_eq!(
        // from spec: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>
        [
            html_block!("<table>\r"),
            html_block!("  <tr>\r"),
            html_block!("    <td>\r      Hi\r    </td>\r"),
            html_block!("  </tr>\r"),
            html_block!("</table>\r")
        ].as_slice(),
        body(&mut StringData::new("<table>\r\r  <tr>\r\r    <td>\r      Hi\r    </td>\r\r  </tr>\r\r</table>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2768>
/// <https://spec.commonmark.org/0.29/#example-160>
fn t160_cr_nl() {
    init!("<table>\r\n\r\n  <tr>\r\n\r\n    <td>\r\n      Hi\r\n    </td>\r\n\r\n  </tr>\r\n\r\n</table>\r\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>
        [
            html_block!("<table>\r\n"),
            html_block!("  <tr>\r\n"),
            html_block!("    <td>\r\n      Hi\r\n    </td>\r\n"),
            html_block!("  </tr>\r\n"),
            html_block!("</table>\r\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\r\n\r\n  <tr>\r\n\r\n    <td>\r\n      Hi\r\n    </td>\r\n\r\n  </tr>\r\n\r\n</table>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2768>
/// <https://spec.commonmark.org/0.29/#example-160>
fn t160_no_nl() {
    init!("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>");

    assert_eq!(
        // from spec: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>
        [
            html_block!("<table>\n"),
            html_block!("  <tr>\n"),
            html_block!("    <td>\n      Hi\n    </td>\n"),
            html_block!("  </tr>\n"),
            html_block!("</table>\n")
        ].as_slice(),
        body(&mut StringData::new("<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2768>
/// <https://spec.commonmark.org/0.29/#example-160>
fn t160_tab() {
    init!("<table>\n\n  <tr>\n\n    <td>\n    \t\tHi\n    </td>\n\n  </tr>\n\n</table>\n");

    assert_eq!(
        // from spec: <table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>
        [
            html_block!("<table>\n"),
            html_block!("		<tr>\n"),
            html_block!("				<td>\n						Hi\n				</td>\n"),
            html_block!("		</tr>\n"),
            html_block!("</table>\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<table>\n\n  <tr>\n\n    <td>\n    \t\tHi\n    </td>\n\n  </tr>\n\n</table>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2816>
/// <https://spec.commonmark.org/0.29/#example-161>
fn t161() {
    init!("[foo]: /url \"title\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\"\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2816>
/// <https://spec.commonmark.org/0.29/#example-161>
fn t161_cr() {
    init!("[foo]: /url \"title\"\r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\"\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2816>
/// <https://spec.commonmark.org/0.29/#example-161>
fn t161_cr_nl() {
    init!("[foo]: /url \"title\"\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\"\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2816>
/// <https://spec.commonmark.org/0.29/#example-161>
fn t161_no_nl() {
    init!("[foo]: /url \"title\"\n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\"\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2816>
/// <https://spec.commonmark.org/0.29/#example-161>
fn t161_tab() {
    init!("[foo]:\t/url\t\"title\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            linkdef!("foo",	"/url",	"title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\t\"title\"\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2825
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2825>
/// <https://spec.commonmark.org/0.29/#example-162>
fn t162() {
    init!("   [foo]: \n      /url  \n           \'the title\'  \n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"the title\">foo</a></p>
        [
            linkdef!("foo", "/url", "the title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("   [foo]: \n      /url  \n           \'the title\'  \n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2825
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2825>
/// <https://spec.commonmark.org/0.29/#example-162>
fn t162_cr() {
    init!("   [foo]: \r      /url  \r           \'the title\'  \r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"the title\">foo</a></p>
        [
            linkdef!("foo", "/url", "the title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("   [foo]: \r      /url  \r           \'the title\'  \r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2825
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2825>
/// <https://spec.commonmark.org/0.29/#example-162>
fn t162_cr_nl() {
    init!("   [foo]: \r\n      /url  \r\n           \'the title\'  \r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"the title\">foo</a></p>
        [
            linkdef!("foo", "/url", "the title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("   [foo]: \r\n      /url  \r\n           \'the title\'  \r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2825
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2825>
/// <https://spec.commonmark.org/0.29/#example-162>
fn t162_no_nl() {
    init!("   [foo]: \n      /url  \n           \'the title\'  \n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"the title\">foo</a></p>
        [
            linkdef!("foo", "/url", "the title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("   [foo]: \n      /url  \n           \'the title\'  \n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2825
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2825>
/// <https://spec.commonmark.org/0.29/#example-162>
fn t162_tab() {
    init!("   [foo]:\t\n    \t\t/url  \n    \t\t\t\t\t\t\t\'the\ttitle\'  \n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"the title\">foo</a></p>
        [
            linkdef!("foo",	"/url",	"the	title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("   [foo]:\t\n    \t\t/url  \n    \t\t\t\t\t\t\t\'the\ttitle\'  \n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2836>
/// <https://spec.commonmark.org/0.29/#example-163>
fn t163() {
    init!("[Foo*bar\\]]:my_(url) \'title (with parens)\'\n\n[Foo*bar\\]]\n");

    assert_eq!(
        // from spec: <p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>
        [
            linkdef!("Foo*bar]", "my_(url)", "title (with parens)"),
            paragraph!(plain!("[Foo*bar]]"))
        ].as_slice(),
        body(&mut StringData::new("[Foo*bar\\]]:my_(url) \'title (with parens)\'\n\n[Foo*bar\\]]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2836>
/// <https://spec.commonmark.org/0.29/#example-163>
fn t163_cr() {
    init!("[Foo*bar\\]]:my_(url) \'title (with parens)\'\r\r[Foo*bar\\]]\r");

    assert_eq!(
        // from spec: <p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>
        [
            linkdef!("Foo*bar]", "my_(url)", "title (with parens)"),
            paragraph!(plain!("[Foo*bar]]"))
        ].as_slice(),
        body(&mut StringData::new("[Foo*bar\\]]:my_(url) \'title (with parens)\'\r\r[Foo*bar\\]]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2836>
/// <https://spec.commonmark.org/0.29/#example-163>
fn t163_cr_nl() {
    init!("[Foo*bar\\]]:my_(url) \'title (with parens)\'\r\n\r\n[Foo*bar\\]]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>
        [
            linkdef!("Foo*bar]", "my_(url)", "title (with parens)"),
            paragraph!(plain!("[Foo*bar]]"))
        ].as_slice(),
        body(&mut StringData::new("[Foo*bar\\]]:my_(url) \'title (with parens)\'\r\n\r\n[Foo*bar\\]]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2836>
/// <https://spec.commonmark.org/0.29/#example-163>
fn t163_no_nl() {
    init!("[Foo*bar\\]]:my_(url) \'title (with parens)\'\n\n[Foo*bar\\]]");

    assert_eq!(
        // from spec: <p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>
        [
            linkdef!("Foo*bar]", "my_(url)", "title (with parens)"),
            paragraph!(plain!("[Foo*bar]]"))
        ].as_slice(),
        body(&mut StringData::new("[Foo*bar\\]]:my_(url) \'title (with parens)\'\n\n[Foo*bar\\]]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2836>
/// <https://spec.commonmark.org/0.29/#example-163>
fn t163_tab() {
    init!("[Foo*bar\\]]:my_(url)\t\'title\t(with\tparens)\'\n\n[Foo*bar\\]]\n");

    assert_eq!(
        // from spec: <p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>
        [
            linkdef!("Foo*bar]",	"my_(url)",	"title	(with	parens)"),
            paragraph!(plain!("[Foo*bar]]"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[Foo*bar\\]]:my_(url)\t\'title\t(with\tparens)\'\n\n[Foo*bar\\]]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2845>
/// <https://spec.commonmark.org/0.29/#example-164>
fn t164() {
    init!("[Foo bar]:\n<my url>\n\'title\'\n\n[Foo bar]\n");

    assert_eq!(
        // from spec: <p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>
        [
            linkdef!("Foo bar", "my url", "title"),
            paragraph!(linkref!(plain!("Foo bar")))
        ].as_slice(),
        body(&mut StringData::new("[Foo bar]:\n<my url>\n\'title\'\n\n[Foo bar]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2845>
/// <https://spec.commonmark.org/0.29/#example-164>
fn t164_cr() {
    init!("[Foo bar]:\r<my url>\r\'title\'\r\r[Foo bar]\r");

    assert_eq!(
        // from spec: <p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>
        [
            linkdef!("Foo bar", "my url", "title"),
            paragraph!(linkref!(plain!("Foo bar")))
        ].as_slice(),
        body(&mut StringData::new("[Foo bar]:\r<my url>\r\'title\'\r\r[Foo bar]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2845>
/// <https://spec.commonmark.org/0.29/#example-164>
fn t164_cr_nl() {
    init!("[Foo bar]:\r\n<my url>\r\n\'title\'\r\n\r\n[Foo bar]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>
        [
            linkdef!("Foo bar", "my url", "title"),
            paragraph!(linkref!(plain!("Foo bar")))
        ].as_slice(),
        body(&mut StringData::new("[Foo bar]:\r\n<my url>\r\n\'title\'\r\n\r\n[Foo bar]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2845>
/// <https://spec.commonmark.org/0.29/#example-164>
fn t164_no_nl() {
    init!("[Foo bar]:\n<my url>\n\'title\'\n\n[Foo bar]");

    assert_eq!(
        // from spec: <p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>
        [
            linkdef!("Foo bar", "my url", "title"),
            paragraph!(linkref!(plain!("Foo bar")))
        ].as_slice(),
        body(&mut StringData::new("[Foo bar]:\n<my url>\n\'title\'\n\n[Foo bar]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2845>
/// <https://spec.commonmark.org/0.29/#example-164>
fn t164_tab() {
    init!("[Foo\tbar]:\n<my\turl>\n\'title\'\n\n[Foo\tbar]\n");

    assert_eq!(
        // from spec: <p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>
        [
            linkdef!("Foo	bar",	"my	url",	"title"),
            paragraph!(linkref!(plain!("Foo	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[Foo\tbar]:\n<my\turl>\n\'title\'\n\n[Foo\tbar]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2858
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2858>
/// <https://spec.commonmark.org/0.29/#example-165>
fn t165() {
    init!("[foo]: /url \'\ntitle\nline1\nline2\n\'\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>
        [
            linkdef!("foo", "/url", "\ntitle\nline1\nline2\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'\ntitle\nline1\nline2\n\'\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2858
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2858>
/// <https://spec.commonmark.org/0.29/#example-165>
fn t165_cr() {
    init!("[foo]: /url \'\rtitle\rline1\rline2\r\'\r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>
        [
            linkdef!("foo", "/url", "\rtitle\rline1\rline2\r"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'\rtitle\rline1\rline2\r\'\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2858
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2858>
/// <https://spec.commonmark.org/0.29/#example-165>
fn t165_cr_nl() {
    init!("[foo]: /url \'\r\ntitle\r\nline1\r\nline2\r\n\'\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>
        [
            linkdef!("foo", "/url", "\r\ntitle\r\nline1\r\nline2\r\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'\r\ntitle\r\nline1\r\nline2\r\n\'\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2858
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2858>
/// <https://spec.commonmark.org/0.29/#example-165>
fn t165_no_nl() {
    init!("[foo]: /url \'\ntitle\nline1\nline2\n\'\n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>
        [
            linkdef!("foo", "/url", "\ntitle\nline1\nline2\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'\ntitle\nline1\nline2\n\'\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2858
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2858>
/// <https://spec.commonmark.org/0.29/#example-165>
fn t165_tab() {
    init!("[foo]:\t/url\t\'\ntitle\nline1\nline2\n\'\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>
        [
            linkdef!("foo",	"/url",	"\ntitle\nline1\nline2\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\t\'\ntitle\nline1\nline2\n\'\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2877>
/// <https://spec.commonmark.org/0.29/#example-166>
fn t166() {
    init!("[foo]: /url \'title\n\nwith blank line\'\n\n[foo]\n");

    assert_eq!(
        // from spec: <p>[foo]: /url \'title</p>\n<p>with blank line\'</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url 'title")),
            paragraph!(plain!("with blank line'")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'title\n\nwith blank line\'\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2877>
/// <https://spec.commonmark.org/0.29/#example-166>
fn t166_cr() {
    init!("[foo]: /url \'title\r\rwith blank line\'\r\r[foo]\r");

    assert_eq!(
        // from spec: <p>[foo]: /url \'title</p>\n<p>with blank line\'</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url 'title")),
            paragraph!(plain!("with blank line'")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'title\r\rwith blank line\'\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2877>
/// <https://spec.commonmark.org/0.29/#example-166>
fn t166_cr_nl() {
    init!("[foo]: /url \'title\r\n\r\nwith blank line\'\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p>[foo]: /url \'title</p>\n<p>with blank line\'</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url 'title")),
            paragraph!(plain!("with blank line'")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'title\r\n\r\nwith blank line\'\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2877>
/// <https://spec.commonmark.org/0.29/#example-166>
fn t166_no_nl() {
    init!("[foo]: /url \'title\n\nwith blank line\'\n\n[foo]");

    assert_eq!(
        // from spec: <p>[foo]: /url \'title</p>\n<p>with blank line\'</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url 'title")),
            paragraph!(plain!("with blank line'")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \'title\n\nwith blank line\'\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2877>
/// <https://spec.commonmark.org/0.29/#example-166>
fn t166_tab() {
    init!("[foo]:\t/url\t\'title\n\nwith\tblank\tline\'\n\n[foo]\n");

    assert_eq!(
        // from spec: <p>[foo]: /url \'title</p>\n<p>with blank line\'</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!(":	/url	'title")),
            paragraph!(plain!("with	blank	line'")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\t\'title\n\nwith\tblank\tline\'\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2892
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2892>
/// <https://spec.commonmark.org/0.29/#example-167>
fn t167() {
    init!("[foo]:\n/url\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\n/url\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2892
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2892>
/// <https://spec.commonmark.org/0.29/#example-167>
fn t167_cr() {
    init!("[foo]:\r/url\r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\r/url\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2892
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2892>
/// <https://spec.commonmark.org/0.29/#example-167>
fn t167_cr_nl() {
    init!("[foo]:\r\n/url\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\r\n/url\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2892
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2892>
/// <https://spec.commonmark.org/0.29/#example-167>
fn t167_no_nl() {
    init!("[foo]:\n/url\n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\n/url\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2904
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2904>
/// <https://spec.commonmark.org/0.29/#example-168>
fn t168() {
    init!("[foo]:\n\n[foo]\n");

    assert_eq!(
        // from spec: <p>[foo]:</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(":")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2904
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2904>
/// <https://spec.commonmark.org/0.29/#example-168>
fn t168_cr() {
    init!("[foo]:\r\r[foo]\r");

    assert_eq!(
        // from spec: <p>[foo]:</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(":")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2904
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2904>
/// <https://spec.commonmark.org/0.29/#example-168>
fn t168_cr_nl() {
    init!("[foo]:\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p>[foo]:</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(":")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 2904
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2904>
/// <https://spec.commonmark.org/0.29/#example-168>
fn t168_no_nl() {
    init!("[foo]:\n\n[foo]");

    assert_eq!(
        // from spec: <p>[foo]:</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(":")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]:\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2916
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2916>
/// <https://spec.commonmark.org/0.29/#example-169>
fn t169() {
    init!("[foo]: <>\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            linkdef!("foo", ""),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <>\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2916
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2916>
/// <https://spec.commonmark.org/0.29/#example-169>
fn t169_cr() {
    init!("[foo]: <>\r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            linkdef!("foo", ""),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <>\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2916
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2916>
/// <https://spec.commonmark.org/0.29/#example-169>
fn t169_cr_nl() {
    init!("[foo]: <>\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            linkdef!("foo", ""),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <>\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2916
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2916>
/// <https://spec.commonmark.org/0.29/#example-169>
fn t169_no_nl() {
    init!("[foo]: <>\n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            linkdef!("foo", ""),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <>\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2916
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2916>
/// <https://spec.commonmark.org/0.29/#example-169>
fn t169_tab() {
    init!("[foo]:\t<>\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            linkdef!("foo",	""),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t<>\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2927
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2927>
/// <https://spec.commonmark.org/0.29/#example-170>
fn t170() {
    init!("[foo]: <bar>(baz)\n\n[foo]\n");

    assert_eq!(
        // from spec: <p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": "), html!("<bar>"), plain!("(baz)")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <bar>(baz)\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2927
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2927>
/// <https://spec.commonmark.org/0.29/#example-170>
fn t170_cr() {
    init!("[foo]: <bar>(baz)\r\r[foo]\r");

    assert_eq!(
        // from spec: <p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": "), html!("<bar>"), plain!("(baz)")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <bar>(baz)\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2927
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2927>
/// <https://spec.commonmark.org/0.29/#example-170>
fn t170_cr_nl() {
    init!("[foo]: <bar>(baz)\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": "), html!("<bar>"), plain!("(baz)")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <bar>(baz)\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2927
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2927>
/// <https://spec.commonmark.org/0.29/#example-170>
fn t170_no_nl() {
    init!("[foo]: <bar>(baz)\n\n[foo]");

    assert_eq!(
        // from spec: <p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": "), html!("<bar>"), plain!("(baz)")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: <bar>(baz)\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2927
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2927>
/// <https://spec.commonmark.org/0.29/#example-170>
fn t170_tab() {
    init!("[foo]:\t<bar>(baz)\n\n[foo]\n");

    assert_eq!(
        // from spec: <p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!(":	"),	html!("<bar>"),	plain!("(baz)")),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t<bar>(baz)\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2940
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2940>
/// <https://spec.commonmark.org/0.29/#example-171>
fn t171() {
    init!("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>
        [
            linkdef!("foo", "/url\\bar*baz", "foo\"bar\\baz"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2940
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2940>
/// <https://spec.commonmark.org/0.29/#example-171>
fn t171_cr() {
    init!("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\r\r[foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>
        [
            linkdef!("foo", "/url\\bar*baz", "foo\"bar\\baz"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2940
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2940>
/// <https://spec.commonmark.org/0.29/#example-171>
fn t171_cr_nl() {
    init!("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>
        [
            linkdef!("foo", "/url\\bar*baz", "foo\"bar\\baz"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2940
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2940>
/// <https://spec.commonmark.org/0.29/#example-171>
fn t171_no_nl() {
    init!("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>
        [
            linkdef!("foo", "/url\\bar*baz", "foo\"bar\\baz"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2940
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2940>
/// <https://spec.commonmark.org/0.29/#example-171>
fn t171_tab() {
    init!("[foo]:\t/url\\bar\\*baz\t\"foo\\\"bar\\baz\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>
        [
            linkdef!("foo",	"/url\\bar*baz",	"foo\"bar\\baz"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\\bar\\*baz\t\"foo\\\"bar\\baz\"\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2951>
/// <https://spec.commonmark.org/0.29/#example-172>
fn t172() {
    init!("[foo]\n\n[foo]: url\n");

    assert_eq!(
        // from spec: <p><a href=\"url\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "url")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2951>
/// <https://spec.commonmark.org/0.29/#example-172>
fn t172_cr() {
    init!("[foo]\r\r[foo]: url\r");

    assert_eq!(
        // from spec: <p><a href=\"url\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "url")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r[foo]: url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2951>
/// <https://spec.commonmark.org/0.29/#example-172>
fn t172_cr_nl() {
    init!("[foo]\r\n\r\n[foo]: url\r\n");

    assert_eq!(
        // from spec: <p><a href=\"url\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "url")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n[foo]: url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2951>
/// <https://spec.commonmark.org/0.29/#example-172>
fn t172_no_nl() {
    init!("[foo]\n\n[foo]: url");

    assert_eq!(
        // from spec: <p><a href=\"url\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "url")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2951>
/// <https://spec.commonmark.org/0.29/#example-172>
fn t172_tab() {
    init!("[foo]\n\n[foo]:\turl\n");

    assert_eq!(
        // from spec: <p><a href=\"url\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n[foo]:\turl\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2963>
/// <https://spec.commonmark.org/0.29/#example-173>
fn t173() {
    init!("[foo]\n\n[foo]: first\n[foo]: second\n");

    assert_eq!(
        // from spec: <p><a href=\"first\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "first"),
            linkdef!("foo", "second")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: first\n[foo]: second\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2963>
/// <https://spec.commonmark.org/0.29/#example-173>
fn t173_cr() {
    init!("[foo]\r\r[foo]: first\r[foo]: second\r");

    assert_eq!(
        // from spec: <p><a href=\"first\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "first"),
            linkdef!("foo", "second")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r[foo]: first\r[foo]: second\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2963>
/// <https://spec.commonmark.org/0.29/#example-173>
fn t173_cr_nl() {
    init!("[foo]\r\n\r\n[foo]: first\r\n[foo]: second\r\n");

    assert_eq!(
        // from spec: <p><a href=\"first\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "first"),
            linkdef!("foo", "second")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n[foo]: first\r\n[foo]: second\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2963>
/// <https://spec.commonmark.org/0.29/#example-173>
fn t173_no_nl() {
    init!("[foo]\n\n[foo]: first\n[foo]: second");

    assert_eq!(
        // from spec: <p><a href=\"first\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "first"),
            linkdef!("foo", "second")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: first\n[foo]: second", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2963
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2963>
/// <https://spec.commonmark.org/0.29/#example-173>
fn t173_tab() {
    init!("[foo]\n\n[foo]:\tfirst\n[foo]:\tsecond\n");

    assert_eq!(
        // from spec: <p><a href=\"first\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"first"),
            linkdef!("foo",	"second")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n[foo]:\tfirst\n[foo]:\tsecond\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2976
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2976>
/// <https://spec.commonmark.org/0.29/#example-174>
fn t174() {
    init!("[FOO]: /url\n\n[Foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Foo</a></p>
        [
            linkdef!("FOO", "/url"),
            paragraph!(linkref!(plain!("Foo")))
        ].as_slice(),
        body(&mut StringData::new("[FOO]: /url\n\n[Foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2976
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2976>
/// <https://spec.commonmark.org/0.29/#example-174>
fn t174_cr() {
    init!("[FOO]: /url\r\r[Foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Foo</a></p>
        [
            linkdef!("FOO", "/url"),
            paragraph!(linkref!(plain!("Foo")))
        ].as_slice(),
        body(&mut StringData::new("[FOO]: /url\r\r[Foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2976
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2976>
/// <https://spec.commonmark.org/0.29/#example-174>
fn t174_cr_nl() {
    init!("[FOO]: /url\r\n\r\n[Foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Foo</a></p>
        [
            linkdef!("FOO", "/url"),
            paragraph!(linkref!(plain!("Foo")))
        ].as_slice(),
        body(&mut StringData::new("[FOO]: /url\r\n\r\n[Foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2976
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2976>
/// <https://spec.commonmark.org/0.29/#example-174>
fn t174_no_nl() {
    init!("[FOO]: /url\n\n[Foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Foo</a></p>
        [
            linkdef!("FOO", "/url"),
            paragraph!(linkref!(plain!("Foo")))
        ].as_slice(),
        body(&mut StringData::new("[FOO]: /url\n\n[Foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2976
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2976>
/// <https://spec.commonmark.org/0.29/#example-174>
fn t174_tab() {
    init!("[FOO]:\t/url\n\n[Foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Foo</a></p>
        [
            linkdef!("FOO",	"/url"),
            paragraph!(linkref!(plain!("Foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[FOO]:\t/url\n\n[Foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2985>
/// <https://spec.commonmark.org/0.29/#example-175>
fn t175() {
    init!("[ΑΓΩ]: /φου\n\n[αγω]\n");

    assert_eq!(
        // from spec: <p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>
        [
            linkdef!("ΑΓΩ", "/\u{3c6}\u{3bf}\u{3c5}"),
            paragraph!(linkref!(plain!("αγω")))
        ].as_slice(),
        body(&mut StringData::new("[\u{391}\u{393}\u{3a9}]: /\u{3c6}\u{3bf}\u{3c5}\n\n[\u{3b1}\u{3b3}\u{3c9}]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2985>
/// <https://spec.commonmark.org/0.29/#example-175>
fn t175_cr() {
    init!("[ΑΓΩ]: /φου\r\r[αγω]\r");

    assert_eq!(
        // from spec: <p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>
        [
            linkdef!("ΑΓΩ", "/\u{3c6}\u{3bf}\u{3c5}"),
            paragraph!(linkref!(plain!("αγω")))
        ].as_slice(),
        body(&mut StringData::new("[\u{391}\u{393}\u{3a9}]: /\u{3c6}\u{3bf}\u{3c5}\r\r[\u{3b1}\u{3b3}\u{3c9}]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2985>
/// <https://spec.commonmark.org/0.29/#example-175>
fn t175_cr_nl() {
    init!("[ΑΓΩ]: /φου\r\n\r\n[αγω]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>
        [
            linkdef!("ΑΓΩ", "/\u{3c6}\u{3bf}\u{3c5}"),
            paragraph!(linkref!(plain!("αγω")))
        ].as_slice(),
        body(&mut StringData::new("[\u{391}\u{393}\u{3a9}]: /\u{3c6}\u{3bf}\u{3c5}\r\n\r\n[\u{3b1}\u{3b3}\u{3c9}]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2985>
/// <https://spec.commonmark.org/0.29/#example-175>
fn t175_no_nl() {
    init!("[ΑΓΩ]: /φου\n\n[αγω]");

    assert_eq!(
        // from spec: <p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>
        [
            linkdef!("ΑΓΩ", "/\u{3c6}\u{3bf}\u{3c5}"),
            paragraph!(linkref!(plain!("αγω")))
        ].as_slice(),
        body(&mut StringData::new("[\u{391}\u{393}\u{3a9}]: /\u{3c6}\u{3bf}\u{3c5}\n\n[\u{3b1}\u{3b3}\u{3c9}]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2985>
/// <https://spec.commonmark.org/0.29/#example-175>
fn t175_tab() {
    init!("[ΑΓΩ]:\t/φου\n\n[αγω]\n");

    assert_eq!(
        // from spec: <p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>
        [
            linkdef!("ΑΓΩ",	"/\u{3c6}\u{3bf}\u{3c5}"),
            paragraph!(linkref!(plain!("αγω")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[\u{391}\u{393}\u{3a9}]:\t/\u{3c6}\u{3bf}\u{3c5}\n\n[\u{3b1}\u{3b3}\u{3c9}]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2997>
/// <https://spec.commonmark.org/0.29/#example-176>
fn t176() {
    init!("[foo]: /url\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2997>
/// <https://spec.commonmark.org/0.29/#example-176>
fn t176_cr() {
    init!("[foo]: /url\r");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2997>
/// <https://spec.commonmark.org/0.29/#example-176>
fn t176_cr_nl() {
    init!("[foo]: /url\r\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2997>
/// <https://spec.commonmark.org/0.29/#example-176>
fn t176_no_nl() {
    init!("[foo]: /url");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 2997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L2997>
/// <https://spec.commonmark.org/0.29/#example-176>
fn t176_tab() {
    init!("[foo]:\t/url\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3005>
/// <https://spec.commonmark.org/0.29/#example-177>
fn t177() {
    init!("[\nfoo\n]: /url\nbar\n");

    assert_eq!(
        // from spec: <p>bar</p>
        [
            linkdef!("\nfoo\n", "/url"),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("[\nfoo\n]: /url\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3005>
/// <https://spec.commonmark.org/0.29/#example-177>
fn t177_cr() {
    init!("[\rfoo\r]: /url\rbar\r");

    assert_eq!(
        // from spec: <p>bar</p>
        [
            linkdef!("\rfoo\r", "/url"),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("[\rfoo\r]: /url\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3005>
/// <https://spec.commonmark.org/0.29/#example-177>
fn t177_cr_nl() {
    init!("[\r\nfoo\r\n]: /url\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>bar</p>
        [
            linkdef!("\r\nfoo\r\n", "/url"),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("[\r\nfoo\r\n]: /url\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3005>
/// <https://spec.commonmark.org/0.29/#example-177>
fn t177_no_nl() {
    init!("[\nfoo\n]: /url\nbar");

    assert_eq!(
        // from spec: <p>bar</p>
        [
            linkdef!("\nfoo\n", "/url"),
            paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("[\nfoo\n]: /url\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3005>
/// <https://spec.commonmark.org/0.29/#example-177>
fn t177_tab() {
    init!("[\nfoo\n]:\t/url\nbar\n");

    assert_eq!(
        // from spec: <p>bar</p>
        [
            linkdef!("\nfoo\n",	"/url"),
            paragraph!(plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[\nfoo\n]:\t/url\nbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3018>
/// <https://spec.commonmark.org/0.29/#example-178>
fn t178() {
    init!("[foo]: /url \"title\" ok\n");

    assert_eq!(
        // from spec: <p>[foo]: /url &quot;title&quot; ok</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url \"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\" ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3018>
/// <https://spec.commonmark.org/0.29/#example-178>
fn t178_cr() {
    init!("[foo]: /url \"title\" ok\r");

    assert_eq!(
        // from spec: <p>[foo]: /url &quot;title&quot; ok</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url \"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\" ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3018>
/// <https://spec.commonmark.org/0.29/#example-178>
fn t178_cr_nl() {
    init!("[foo]: /url \"title\" ok\r\n");

    assert_eq!(
        // from spec: <p>[foo]: /url &quot;title&quot; ok</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url \"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\" ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3018>
/// <https://spec.commonmark.org/0.29/#example-178>
fn t178_no_nl() {
    init!("[foo]: /url \"title\" ok");

    assert_eq!(
        // from spec: <p>[foo]: /url &quot;title&quot; ok</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(": /url \"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url \"title\" ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3018>
/// <https://spec.commonmark.org/0.29/#example-178>
fn t178_tab() {
    init!("[foo]:\t/url\t\"title\"\tok\n");

    assert_eq!(
        // from spec: <p>[foo]: /url &quot;title&quot; ok</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!(":	/url	\"title\"	ok"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\t\"title\"\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3027
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3027>
/// <https://spec.commonmark.org/0.29/#example-179>
fn t179() {
    init!("[foo]: /url\n\"title\" ok\n");

    assert_eq!(
        // from spec: <p>&quot;title&quot; ok</p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("\"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n\"title\" ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3027
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3027>
/// <https://spec.commonmark.org/0.29/#example-179>
fn t179_cr() {
    init!("[foo]: /url\r\"title\" ok\r");

    assert_eq!(
        // from spec: <p>&quot;title&quot; ok</p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("\"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\"title\" ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3027
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3027>
/// <https://spec.commonmark.org/0.29/#example-179>
fn t179_cr_nl() {
    init!("[foo]: /url\r\n\"title\" ok\r\n");

    assert_eq!(
        // from spec: <p>&quot;title&quot; ok</p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("\"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\n\"title\" ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3027
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3027>
/// <https://spec.commonmark.org/0.29/#example-179>
fn t179_no_nl() {
    init!("[foo]: /url\n\"title\" ok");

    assert_eq!(
        // from spec: <p>&quot;title&quot; ok</p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("\"title\" ok"))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n\"title\" ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3027
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3027>
/// <https://spec.commonmark.org/0.29/#example-179>
fn t179_tab() {
    init!("[foo]:\t/url\n\"title\"\tok\n");

    assert_eq!(
        // from spec: <p>&quot;title&quot; ok</p>
        [
            linkdef!("foo",	"/url"),
            paragraph!(plain!("\"title\"	ok"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\n\"title\"\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3038
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3038>
/// <https://spec.commonmark.org/0.29/#example-180>
fn t180() {
    init!("    [foo]: /url \"title\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("    [foo]: /url \"title\"\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3038
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3038>
/// <https://spec.commonmark.org/0.29/#example-180>
fn t180_cr() {
    init!("    [foo]: /url \"title\"\r\r[foo]\r");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("    [foo]: /url \"title\"\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3038
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3038>
/// <https://spec.commonmark.org/0.29/#example-180>
fn t180_cr_nl() {
    init!("    [foo]: /url \"title\"\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("    [foo]: /url \"title\"\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3038
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3038>
/// <https://spec.commonmark.org/0.29/#example-180>
fn t180_no_nl() {
    init!("    [foo]: /url \"title\"\n\n[foo]");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>
        [
            linkdef!("foo", "/url", "title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("    [foo]: /url \"title\"\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3038
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3038>
/// <https://spec.commonmark.org/0.29/#example-180>
fn t180_tab() {
    init!("    [foo]:\t/url\t\"title\"\n\n[foo]\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>
        [
            linkdef!("foo",	"/url",	"title"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    [foo]:\t/url\t\"title\"\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3052
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3052>
/// <https://spec.commonmark.org/0.29/#example-181>
fn t181() {
    init!("```\n[foo]: /url\n```\n\n[foo]\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>
        [
            code_block!("", "[foo]: /url\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("```\n[foo]: /url\n```\n\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3052
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3052>
/// <https://spec.commonmark.org/0.29/#example-181>
fn t181_cr() {
    init!("```\r[foo]: /url\r```\r\r[foo]\r");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>
        [
            code_block!("", "[foo]: /url\r"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("```\r[foo]: /url\r```\r\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3052
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3052>
/// <https://spec.commonmark.org/0.29/#example-181>
fn t181_cr_nl() {
    init!("```\r\n[foo]: /url\r\n```\r\n\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>
        [
            code_block!("", "[foo]: /url\r\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("```\r\n[foo]: /url\r\n```\r\n\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3052
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3052>
/// <https://spec.commonmark.org/0.29/#example-181>
fn t181_no_nl() {
    init!("```\n[foo]: /url\n```\n\n[foo]");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>
        [
            code_block!("", "[foo]: /url\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("```\n[foo]: /url\n```\n\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3052
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3052>
/// <https://spec.commonmark.org/0.29/#example-181>
fn t181_tab() {
    init!("```\n[foo]:\t/url\n```\n\n[foo]\n");

    assert_eq!(
        // from spec: <pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>
        [
            code_block!("",	"[foo]:	/url\n"),
            paragraph!(linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("```\n[foo]:\t/url\n```\n\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3067
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3067>
/// <https://spec.commonmark.org/0.29/#example-182>
fn t182() {
    init!("Foo\n[bar]: /baz\n\n[bar]\n");

    assert_eq!(
        // from spec: <p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, linkref!(plain!("bar")), plain!(": /baz")),
            paragraph!(linkref!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("Foo\n[bar]: /baz\n\n[bar]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3067
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3067>
/// <https://spec.commonmark.org/0.29/#example-182>
fn t182_cr() {
    init!("Foo\r[bar]: /baz\r\r[bar]\r");

    assert_eq!(
        // from spec: <p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, linkref!(plain!("bar")), plain!(": /baz")),
            paragraph!(linkref!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("Foo\r[bar]: /baz\r\r[bar]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3067
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3067>
/// <https://spec.commonmark.org/0.29/#example-182>
fn t182_cr_nl() {
    init!("Foo\r\n[bar]: /baz\r\n\r\n[bar]\r\n");

    assert_eq!(
        // from spec: <p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, linkref!(plain!("bar")), plain!(": /baz")),
            paragraph!(linkref!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n[bar]: /baz\r\n\r\n[bar]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3067
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3067>
/// <https://spec.commonmark.org/0.29/#example-182>
fn t182_no_nl() {
    init!("Foo\n[bar]: /baz\n\n[bar]");

    assert_eq!(
        // from spec: <p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>
        [
            paragraph!(plain!("Foo"), SoftBreak, linkref!(plain!("bar")), plain!(": /baz")),
            paragraph!(linkref!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("Foo\n[bar]: /baz\n\n[bar]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3067
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3067>
/// <https://spec.commonmark.org/0.29/#example-182>
fn t182_tab() {
    init!("Foo\n[bar]:\t/baz\n\n[bar]\n");

    assert_eq!(
        // from spec: <p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>
        [
            paragraph!(plain!("Foo"),	SoftBreak,	linkref!(plain!("bar")),	plain!(":	/baz")),
            paragraph!(linkref!(plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\n[bar]:\t/baz\n\n[bar]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3082>
/// <https://spec.commonmark.org/0.29/#example-183>
fn t183() {
    init!("# [Foo]\n[foo]: /url\n> bar\n");

    assert_eq!(
        // from spec: <h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            heading!(1, linkref!(plain!("Foo"))),
            linkdef!("foo", "/url"),
            quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("# [Foo]\n[foo]: /url\n> bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3082>
/// <https://spec.commonmark.org/0.29/#example-183>
fn t183_cr() {
    init!("# [Foo]\r[foo]: /url\r> bar\r");

    assert_eq!(
        // from spec: <h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            heading!(1, linkref!(plain!("Foo"))),
            linkdef!("foo", "/url"),
            quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("# [Foo]\r[foo]: /url\r> bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3082>
/// <https://spec.commonmark.org/0.29/#example-183>
fn t183_cr_nl() {
    init!("# [Foo]\r\n[foo]: /url\r\n> bar\r\n");

    assert_eq!(
        // from spec: <h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            heading!(1, linkref!(plain!("Foo"))),
            linkdef!("foo", "/url"),
            quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("# [Foo]\r\n[foo]: /url\r\n> bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3082>
/// <https://spec.commonmark.org/0.29/#example-183>
fn t183_no_nl() {
    init!("# [Foo]\n[foo]: /url\n> bar");

    assert_eq!(
        // from spec: <h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            heading!(1, linkref!(plain!("Foo"))),
            linkdef!("foo", "/url"),
            quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("# [Foo]\n[foo]: /url\n> bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3082>
/// <https://spec.commonmark.org/0.29/#example-183>
fn t183_tab() {
    init!("#\t[Foo]\n[foo]:\t/url\n>\tbar\n");

    assert_eq!(
        // from spec: <h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            heading!(1,	linkref!(plain!("Foo"))),
            linkdef!("foo",	"/url"),
            quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("#\t[Foo]\n[foo]:\t/url\n>\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3093
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3093>
/// <https://spec.commonmark.org/0.29/#example-184>
fn t184() {
    init!("[foo]: /url\nbar\n===\n[foo]\n");

    assert_eq!(
        // from spec: <p>bar\n===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("bar"), SoftBreak, plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\nbar\n===\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3093
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3093>
/// <https://spec.commonmark.org/0.29/#example-184>
fn t184_cr() {
    init!("[foo]: /url\rbar\r===\r[foo]\r");

    assert_eq!(
        // from spec: <p>bar\n===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("bar"), SoftBreak, plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\rbar\r===\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3093
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3093>
/// <https://spec.commonmark.org/0.29/#example-184>
fn t184_cr_nl() {
    init!("[foo]: /url\r\nbar\r\n===\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p>bar\n===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("bar"), SoftBreak, plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\nbar\r\n===\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3093
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3093>
/// <https://spec.commonmark.org/0.29/#example-184>
fn t184_no_nl() {
    init!("[foo]: /url\nbar\n===\n[foo]");

    assert_eq!(
        // from spec: <p>bar\n===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("bar"), SoftBreak, plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\nbar\n===\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3093
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3093>
/// <https://spec.commonmark.org/0.29/#example-184>
fn t184_tab() {
    init!("[foo]:\t/url\nbar\n===\n[foo]\n");

    assert_eq!(
        // from spec: <p>bar\n===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo",	"/url"),
            paragraph!(plain!("bar"),	SoftBreak,	plain!("==="),	SoftBreak,	linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\nbar\n===\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3103
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3103>
/// <https://spec.commonmark.org/0.29/#example-185>
fn t185() {
    init!("[foo]: /url\n===\n[foo]\n");

    assert_eq!(
        // from spec: <p>===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n===\n[foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3103
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3103>
/// <https://spec.commonmark.org/0.29/#example-185>
fn t185_cr() {
    init!("[foo]: /url\r===\r[foo]\r");

    assert_eq!(
        // from spec: <p>===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r===\r[foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3103
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3103>
/// <https://spec.commonmark.org/0.29/#example-185>
fn t185_cr_nl() {
    init!("[foo]: /url\r\n===\r\n[foo]\r\n");

    assert_eq!(
        // from spec: <p>===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\n===\r\n[foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3103
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3103>
/// <https://spec.commonmark.org/0.29/#example-185>
fn t185_no_nl() {
    init!("[foo]: /url\n===\n[foo]");

    assert_eq!(
        // from spec: <p>===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo", "/url"),
            paragraph!(plain!("==="), SoftBreak, linkref!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n===\n[foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3103
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3103>
/// <https://spec.commonmark.org/0.29/#example-185>
fn t185_tab() {
    init!("[foo]:\t/url\n===\n[foo]\n");

    assert_eq!(
        // from spec: <p>===\n<a href=\"/url\">foo</a></p>
        [
            linkdef!("foo",	"/url"),
            paragraph!(plain!("==="),	SoftBreak,	linkref!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\n===\n[foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3116>
/// <https://spec.commonmark.org/0.29/#example-186>
fn t186() {
    init!("[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n");

    assert_eq!(
        // from spec: <p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>
        [
            linkdef!("foo", "/foo-url", "foo"),
            linkdef!("bar", "/bar-url", "bar"),
            linkdef!("baz", "/baz-url"),
            paragraph!(
                linkref!(plain!("foo")),
                plain!(","), SoftBreak,
                linkref!(plain!("bar")),
                plain!(","), SoftBreak,
                linkref!(plain!("baz"))
            )
        ].as_slice(),
        body(&mut StringData::new("[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3116>
/// <https://spec.commonmark.org/0.29/#example-186>
fn t186_cr() {
    init!("[foo]: /foo-url \"foo\"\r[bar]: /bar-url\r  \"bar\"\r[baz]: /baz-url\r\r[foo],\r[bar],\r[baz]\r");

    assert_eq!(
        // from spec: <p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>
        [
            linkdef!("foo", "/foo-url", "foo"),
            linkdef!("bar", "/bar-url", "bar"),
            linkdef!("baz", "/baz-url"),
            paragraph!(
                linkref!(plain!("foo")),
                plain!(","), SoftBreak,
                linkref!(plain!("bar")),
                plain!(","), SoftBreak,
                linkref!(plain!("baz"))
            )
        ].as_slice(),
        body(&mut StringData::new("[foo]: /foo-url \"foo\"\r[bar]: /bar-url\r  \"bar\"\r[baz]: /baz-url\r\r[foo],\r[bar],\r[baz]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3116>
/// <https://spec.commonmark.org/0.29/#example-186>
fn t186_cr_nl() {
    init!("[foo]: /foo-url \"foo\"\r\n[bar]: /bar-url\r\n  \"bar\"\r\n[baz]: /baz-url\r\n\r\n[foo],\r\n[bar],\r\n[baz]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>
        [
            linkdef!("foo", "/foo-url", "foo"),
            linkdef!("bar", "/bar-url", "bar"),
            linkdef!("baz", "/baz-url"),
            paragraph!(
                linkref!(plain!("foo")),
                plain!(","), SoftBreak,
                linkref!(plain!("bar")),
                plain!(","), SoftBreak,
                linkref!(plain!("baz"))
            )
        ].as_slice(),
        body(&mut StringData::new("[foo]: /foo-url \"foo\"\r\n[bar]: /bar-url\r\n  \"bar\"\r\n[baz]: /baz-url\r\n\r\n[foo],\r\n[bar],\r\n[baz]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3116>
/// <https://spec.commonmark.org/0.29/#example-186>
fn t186_no_nl() {
    init!("[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]");

    assert_eq!(
        // from spec: <p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>
        [
            linkdef!("foo", "/foo-url", "foo"),
            linkdef!("bar", "/bar-url", "bar"),
            linkdef!("baz", "/baz-url"),
            paragraph!(
                linkref!(plain!("foo")),
                plain!(","), SoftBreak,
                linkref!(plain!("bar")),
                plain!(","), SoftBreak,
                linkref!(plain!("baz"))
            )
        ].as_slice(),
        body(&mut StringData::new("[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3116>
/// <https://spec.commonmark.org/0.29/#example-186>
fn t186_tab() {
    init!("[foo]:\t/foo-url\t\"foo\"\n[bar]:\t/bar-url\n  \"bar\"\n[baz]:\t/baz-url\n\n[foo],\n[bar],\n[baz]\n");

    assert_eq!(
        // from spec: <p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>
        [
            linkdef!("foo",	"/foo-url",	"foo"),
            linkdef!("bar",	"/bar-url",	"bar"),
            linkdef!("baz",	"/baz-url"),
            paragraph!(
            				linkref!(plain!("foo")),
            				plain!(","),	SoftBreak,
            				linkref!(plain!("bar")),
            				plain!(","),	SoftBreak,
            				linkref!(plain!("baz"))
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/foo-url\t\"foo\"\n[bar]:\t/bar-url\n  \"bar\"\n[baz]:\t/baz-url\n\n[foo],\n[bar],\n[baz]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3137
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3137>
/// <https://spec.commonmark.org/0.29/#example-187>
fn t187() {
    init!("[foo]\n\n> [foo]: /url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>
        [
            paragraph!(linkref!(plain!("foo"))),
            quote!(linkdef!("foo", "/url"))
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n> [foo]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3137
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3137>
/// <https://spec.commonmark.org/0.29/#example-187>
fn t187_cr() {
    init!("[foo]\r\r> [foo]: /url\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>
        [
            paragraph!(linkref!(plain!("foo"))),
            quote!(linkdef!("foo", "/url"))
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r> [foo]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3137
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3137>
/// <https://spec.commonmark.org/0.29/#example-187>
fn t187_cr_nl() {
    init!("[foo]\r\n\r\n> [foo]: /url\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>
        [
            paragraph!(linkref!(plain!("foo"))),
            quote!(linkdef!("foo", "/url"))
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n> [foo]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3137
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3137>
/// <https://spec.commonmark.org/0.29/#example-187>
fn t187_no_nl() {
    init!("[foo]\n\n> [foo]: /url");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>
        [
            paragraph!(linkref!(plain!("foo"))),
            quote!(linkdef!("foo", "/url"))
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n> [foo]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3137
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3137>
/// <https://spec.commonmark.org/0.29/#example-187>
fn t187_tab() {
    init!("[foo]\n\n>\t[foo]:\t/url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>
        [
            paragraph!(linkref!(plain!("foo"))),
            quote!(linkdef!("foo",	"/url"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n>\t[foo]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3154
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3154>
/// <https://spec.commonmark.org/0.29/#example-188>
fn t188() {
    init!("[foo]: /url\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3154
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3154>
/// <https://spec.commonmark.org/0.29/#example-188>
fn t188_cr() {
    init!("[foo]: /url\r");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3154
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3154>
/// <https://spec.commonmark.org/0.29/#example-188>
fn t188_cr_nl() {
    init!("[foo]: /url\r\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3154
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3154>
/// <https://spec.commonmark.org/0.29/#example-188>
fn t188_no_nl() {
    init!("[foo]: /url");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3154
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3154>
/// <https://spec.commonmark.org/0.29/#example-188>
fn t188_tab() {
    init!("[foo]:\t/url\n");

    assert_eq!(
        // from spec: 
        [
            linkdef!("foo",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3171
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3171>
/// <https://spec.commonmark.org/0.29/#example-189>
fn t189() {
    init!("aaa\n\nbbb\n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n\nbbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3171
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3171>
/// <https://spec.commonmark.org/0.29/#example-189>
fn t189_cr() {
    init!("aaa\r\rbbb\r");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\rbbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3171
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3171>
/// <https://spec.commonmark.org/0.29/#example-189>
fn t189_cr_nl() {
    init!("aaa\r\n\r\nbbb\r\n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\n\r\nbbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3171
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3171>
/// <https://spec.commonmark.org/0.29/#example-189>
fn t189_no_nl() {
    init!("aaa\n\nbbb");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n\nbbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3183>
/// <https://spec.commonmark.org/0.29/#example-190>
fn t190() {
    init!("aaa\nbbb\n\nccc\nddd\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>\n<p>ccc\nddd</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb")), paragraph!(plain!("ccc"), SoftBreak, plain!("ddd"))
        ].as_slice(),
        body(&mut StringData::new("aaa\nbbb\n\nccc\nddd\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3183>
/// <https://spec.commonmark.org/0.29/#example-190>
fn t190_cr() {
    init!("aaa\rbbb\r\rccc\rddd\r");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>\n<p>ccc\nddd</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb")), paragraph!(plain!("ccc"), SoftBreak, plain!("ddd"))
        ].as_slice(),
        body(&mut StringData::new("aaa\rbbb\r\rccc\rddd\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3183>
/// <https://spec.commonmark.org/0.29/#example-190>
fn t190_cr_nl() {
    init!("aaa\r\nbbb\r\n\r\nccc\r\nddd\r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>\n<p>ccc\nddd</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb")), paragraph!(plain!("ccc"), SoftBreak, plain!("ddd"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\nbbb\r\n\r\nccc\r\nddd\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3183>
/// <https://spec.commonmark.org/0.29/#example-190>
fn t190_no_nl() {
    init!("aaa\nbbb\n\nccc\nddd");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>\n<p>ccc\nddd</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb")), paragraph!(plain!("ccc"), SoftBreak, plain!("ddd"))
        ].as_slice(),
        body(&mut StringData::new("aaa\nbbb\n\nccc\nddd", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3199>
/// <https://spec.commonmark.org/0.29/#example-191>
fn t191() {
    init!("aaa\n\n\nbbb\n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n\n\nbbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3199>
/// <https://spec.commonmark.org/0.29/#example-191>
fn t191_cr() {
    init!("aaa\r\r\rbbb\r");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\r\rbbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3199>
/// <https://spec.commonmark.org/0.29/#example-191>
fn t191_cr_nl() {
    init!("aaa\r\n\r\n\r\nbbb\r\n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\n\r\n\r\nbbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3199>
/// <https://spec.commonmark.org/0.29/#example-191>
fn t191_no_nl() {
    init!("aaa\n\n\nbbb");

    assert_eq!(
        // from spec: <p>aaa</p>\n<p>bbb</p>
        [
            paragraph!(plain!("aaa")), paragraph!(plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n\n\nbbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3212
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3212>
/// <https://spec.commonmark.org/0.29/#example-192>
fn t192() {
    init!("  aaa\n bbb\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("  aaa\n bbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3212
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3212>
/// <https://spec.commonmark.org/0.29/#example-192>
fn t192_cr() {
    init!("  aaa\r bbb\r");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("  aaa\r bbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3212
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3212>
/// <https://spec.commonmark.org/0.29/#example-192>
fn t192_cr_nl() {
    init!("  aaa\r\n bbb\r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("  aaa\r\n bbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3212
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3212>
/// <https://spec.commonmark.org/0.29/#example-192>
fn t192_no_nl() {
    init!("  aaa\n bbb");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("  aaa\n bbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3224
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3224>
/// <https://spec.commonmark.org/0.29/#example-193>
fn t193() {
    init!("aaa\n             bbb\n                                       ccc\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb\nccc</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"), SoftBreak, plain!("ccc"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n             bbb\n                                       ccc\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3224
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3224>
/// <https://spec.commonmark.org/0.29/#example-193>
fn t193_cr() {
    init!("aaa\r             bbb\r                                       ccc\r");

    assert_eq!(
        // from spec: <p>aaa\nbbb\nccc</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"), SoftBreak, plain!("ccc"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r             bbb\r                                       ccc\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3224
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3224>
/// <https://spec.commonmark.org/0.29/#example-193>
fn t193_cr_nl() {
    init!("aaa\r\n             bbb\r\n                                       ccc\r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb\nccc</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"), SoftBreak, plain!("ccc"))
        ].as_slice(),
        body(&mut StringData::new("aaa\r\n             bbb\r\n                                       ccc\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3224
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3224>
/// <https://spec.commonmark.org/0.29/#example-193>
fn t193_no_nl() {
    init!("aaa\n             bbb\n                                       ccc");

    assert_eq!(
        // from spec: <p>aaa\nbbb\nccc</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"), SoftBreak, plain!("ccc"))
        ].as_slice(),
        body(&mut StringData::new("aaa\n             bbb\n                                       ccc", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3224
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3224>
/// <https://spec.commonmark.org/0.29/#example-193>
fn t193_tab() {
    init!("aaa\n    \t\t\t\t\t\t\t\t\tbbb\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tccc\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb\nccc</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"), SoftBreak, plain!("ccc"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("aaa\n    \t\t\t\t\t\t\t\t\tbbb\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tccc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3238>
/// <https://spec.commonmark.org/0.29/#example-194>
fn t194() {
    init!("   aaa\nbbb\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("   aaa\nbbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3238>
/// <https://spec.commonmark.org/0.29/#example-194>
fn t194_cr() {
    init!("   aaa\rbbb\r");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("   aaa\rbbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3238>
/// <https://spec.commonmark.org/0.29/#example-194>
fn t194_cr_nl() {
    init!("   aaa\r\nbbb\r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("   aaa\r\nbbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3238
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3238>
/// <https://spec.commonmark.org/0.29/#example-194>
fn t194_no_nl() {
    init!("   aaa\nbbb");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("   aaa\nbbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3247
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3247>
/// <https://spec.commonmark.org/0.29/#example-195>
fn t195() {
    init!("    aaa\nbbb\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("    aaa\nbbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3247
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3247>
/// <https://spec.commonmark.org/0.29/#example-195>
fn t195_cr() {
    init!("    aaa\rbbb\r");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("    aaa\rbbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3247
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3247>
/// <https://spec.commonmark.org/0.29/#example-195>
fn t195_cr_nl() {
    init!("    aaa\r\nbbb\r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("    aaa\r\nbbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3247
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3247>
/// <https://spec.commonmark.org/0.29/#example-195>
fn t195_no_nl() {
    init!("    aaa\nbbb");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("    aaa\nbbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3261
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3261>
/// <https://spec.commonmark.org/0.29/#example-196>
fn t196() {
    init!("aaa     \nbbb     \n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa     \nbbb     \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3261
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3261>
/// <https://spec.commonmark.org/0.29/#example-196>
fn t196_cr() {
    init!("aaa     \rbbb     \r");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa     \rbbb     \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3261
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3261>
/// <https://spec.commonmark.org/0.29/#example-196>
fn t196_cr_nl() {
    init!("aaa     \r\nbbb     \r\n");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa     \r\nbbb     \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3261
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3261>
/// <https://spec.commonmark.org/0.29/#example-196>
fn t196_no_nl() {
    init!("aaa     \nbbb     ");

    assert_eq!(
        // from spec: <p>aaa\nbbb</p>
        [
            paragraph!(plain!("aaa"), SoftBreak, plain!("bbb"))
        ].as_slice(),
        body(&mut StringData::new("aaa     \nbbb     ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3278>
/// <https://spec.commonmark.org/0.29/#example-197>
fn t197() {
    init!("  \n\naaa\n  \n\n# aaa\n\n  \n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<h1>aaa</h1>
        [
            paragraph!(plain!("aaa")), heading!(1, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("  \n\naaa\n  \n\n# aaa\n\n  \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3278>
/// <https://spec.commonmark.org/0.29/#example-197>
fn t197_cr() {
    init!("  \r\raaa\r  \r\r# aaa\r\r  \r");

    assert_eq!(
        // from spec: <p>aaa</p>\n<h1>aaa</h1>
        [
            paragraph!(plain!("aaa")), heading!(1, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("  \r\raaa\r  \r\r# aaa\r\r  \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3278>
/// <https://spec.commonmark.org/0.29/#example-197>
fn t197_cr_nl() {
    init!("  \r\n\r\naaa\r\n  \r\n\r\n# aaa\r\n\r\n  \r\n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<h1>aaa</h1>
        [
            paragraph!(plain!("aaa")), heading!(1, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("  \r\n\r\naaa\r\n  \r\n\r\n# aaa\r\n\r\n  \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3278>
/// <https://spec.commonmark.org/0.29/#example-197>
fn t197_no_nl() {
    init!("  \n\naaa\n  \n\n# aaa\n\n  ");

    assert_eq!(
        // from spec: <p>aaa</p>\n<h1>aaa</h1>
        [
            paragraph!(plain!("aaa")), heading!(1, plain!("aaa"))
        ].as_slice(),
        body(&mut StringData::new("  \n\naaa\n  \n\n# aaa\n\n  ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3278>
/// <https://spec.commonmark.org/0.29/#example-197>
fn t197_tab() {
    init!("  \n\naaa\n  \n\n#\taaa\n\n  \n");

    assert_eq!(
        // from spec: <p>aaa</p>\n<h1>aaa</h1>
        [
            paragraph!(plain!("aaa")), heading!(1, plain!("aaa"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("  \n\naaa\n  \n\n#\taaa\n\n  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3344
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3344>
/// <https://spec.commonmark.org/0.29/#example-198>
fn t198() {
    init!("> # Foo\n> bar\n> baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\n> bar\n> baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3344
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3344>
/// <https://spec.commonmark.org/0.29/#example-198>
fn t198_cr() {
    init!("> # Foo\r> bar\r> baz\r");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\r> bar\r> baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3344
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3344>
/// <https://spec.commonmark.org/0.29/#example-198>
fn t198_cr_nl() {
    init!("> # Foo\r\n> bar\r\n> baz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\r\n> bar\r\n> baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3344
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3344>
/// <https://spec.commonmark.org/0.29/#example-198>
fn t198_no_nl() {
    init!("> # Foo\n> bar\n> baz");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\n> bar\n> baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3344
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3344>
/// <https://spec.commonmark.org/0.29/#example-198>
fn t198_tab() {
    init!(">\t#\tFoo\n>\tbar\n>\tbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t#\tFoo\n>\tbar\n>\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3359>
/// <https://spec.commonmark.org/0.29/#example-199>
fn t199() {
    init!("># Foo\n>bar\n> baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("># Foo\n>bar\n> baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3359>
/// <https://spec.commonmark.org/0.29/#example-199>
fn t199_cr() {
    init!("># Foo\r>bar\r> baz\r");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("># Foo\r>bar\r> baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3359>
/// <https://spec.commonmark.org/0.29/#example-199>
fn t199_cr_nl() {
    init!("># Foo\r\n>bar\r\n> baz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("># Foo\r\n>bar\r\n> baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3359>
/// <https://spec.commonmark.org/0.29/#example-199>
fn t199_no_nl() {
    init!("># Foo\n>bar\n> baz");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("># Foo\n>bar\n> baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3359>
/// <https://spec.commonmark.org/0.29/#example-199>
fn t199_tab() {
    init!(">#\tFoo\n>bar\n>\tbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">#\tFoo\n>bar\n>\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3374>
/// <https://spec.commonmark.org/0.29/#example-200>
fn t200() {
    init!("   > # Foo\n   > bar\n > baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("   > # Foo\n   > bar\n > baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3374>
/// <https://spec.commonmark.org/0.29/#example-200>
fn t200_cr() {
    init!("   > # Foo\r   > bar\r > baz\r");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("   > # Foo\r   > bar\r > baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3374>
/// <https://spec.commonmark.org/0.29/#example-200>
fn t200_cr_nl() {
    init!("   > # Foo\r\n   > bar\r\n > baz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("   > # Foo\r\n   > bar\r\n > baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3374>
/// <https://spec.commonmark.org/0.29/#example-200>
fn t200_no_nl() {
    init!("   > # Foo\n   > bar\n > baz");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("   > # Foo\n   > bar\n > baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3374
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3374>
/// <https://spec.commonmark.org/0.29/#example-200>
fn t200_tab() {
    init!("   >\t#\tFoo\n   >\tbar\n >\tbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("   >\t#\tFoo\n   >\tbar\n >\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3389
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3389>
/// <https://spec.commonmark.org/0.29/#example-201>
fn t201() {
    init!("    > # Foo\n    > bar\n    > baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("    > # Foo\n    > bar\n    > baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3389
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3389>
/// <https://spec.commonmark.org/0.29/#example-201>
fn t201_cr() {
    init!("    > # Foo\r    > bar\r    > baz\r");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("    > # Foo\r    > bar\r    > baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3389
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3389>
/// <https://spec.commonmark.org/0.29/#example-201>
fn t201_cr_nl() {
    init!("    > # Foo\r\n    > bar\r\n    > baz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("    > # Foo\r\n    > bar\r\n    > baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3389
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3389>
/// <https://spec.commonmark.org/0.29/#example-201>
fn t201_no_nl() {
    init!("    > # Foo\n    > bar\n    > baz");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("    > # Foo\n    > bar\n    > baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3389
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3389>
/// <https://spec.commonmark.org/0.29/#example-201>
fn t201_tab() {
    init!("    >\t#\tFoo\n    >\tbar\n    >\tbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    >\t#\tFoo\n    >\tbar\n    >\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3404
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3404>
/// <https://spec.commonmark.org/0.29/#example-202>
fn t202() {
    init!("> # Foo\n> bar\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\n> bar\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3404
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3404>
/// <https://spec.commonmark.org/0.29/#example-202>
fn t202_cr() {
    init!("> # Foo\r> bar\rbaz\r");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\r> bar\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3404
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3404>
/// <https://spec.commonmark.org/0.29/#example-202>
fn t202_cr_nl() {
    init!("> # Foo\r\n> bar\r\nbaz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\r\n> bar\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3404
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3404>
/// <https://spec.commonmark.org/0.29/#example-202>
fn t202_no_nl() {
    init!("> # Foo\n> bar\nbaz");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> # Foo\n> bar\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3404
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3404>
/// <https://spec.commonmark.org/0.29/#example-202>
fn t202_tab() {
    init!(">\t#\tFoo\n>\tbar\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(heading!(1, plain!("Foo")), paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t#\tFoo\n>\tbar\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3420>
/// <https://spec.commonmark.org/0.29/#example-203>
fn t203() {
    init!("> bar\nbaz\n> foo\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz"), SoftBreak, plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("> bar\nbaz\n> foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3420>
/// <https://spec.commonmark.org/0.29/#example-203>
fn t203_cr() {
    init!("> bar\rbaz\r> foo\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz"), SoftBreak, plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("> bar\rbaz\r> foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3420>
/// <https://spec.commonmark.org/0.29/#example-203>
fn t203_cr_nl() {
    init!("> bar\r\nbaz\r\n> foo\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz"), SoftBreak, plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("> bar\r\nbaz\r\n> foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3420>
/// <https://spec.commonmark.org/0.29/#example-203>
fn t203_no_nl() {
    init!("> bar\nbaz\n> foo");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz"), SoftBreak, plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("> bar\nbaz\n> foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3420>
/// <https://spec.commonmark.org/0.29/#example-203>
fn t203_tab() {
    init!(">\tbar\nbaz\n>\tfoo\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz"), SoftBreak, plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tbar\nbaz\n>\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3444
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3444>
/// <https://spec.commonmark.org/0.29/#example-204>
fn t204() {
    init!("> foo\n---\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\n---\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3444
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3444>
/// <https://spec.commonmark.org/0.29/#example-204>
fn t204_cr() {
    init!("> foo\r---\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\r---\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3444
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3444>
/// <https://spec.commonmark.org/0.29/#example-204>
fn t204_cr_nl() {
    init!("> foo\r\n---\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n---\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3444
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3444>
/// <https://spec.commonmark.org/0.29/#example-204>
fn t204_no_nl() {
    init!("> foo\n---");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        body(&mut StringData::new("> foo\n---", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3444
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3444>
/// <https://spec.commonmark.org/0.29/#example-204>
fn t204_tab() {
    init!(">\tfoo\n---\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<hr />
        [
            quote!(paragraph!(plain!("foo"))), Break
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n---\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3464
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3464>
/// <https://spec.commonmark.org/0.29/#example-205>
fn t205() {
    init!("> - foo\n- bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>
        [
            quote!(unordered_list!(vec![paragraph!(plain!("foo"))])), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("> - foo\n- bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3464
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3464>
/// <https://spec.commonmark.org/0.29/#example-205>
fn t205_cr() {
    init!("> - foo\r- bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>
        [
            quote!(unordered_list!(vec![paragraph!(plain!("foo"))])), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("> - foo\r- bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3464
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3464>
/// <https://spec.commonmark.org/0.29/#example-205>
fn t205_cr_nl() {
    init!("> - foo\r\n- bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>
        [
            quote!(unordered_list!(vec![paragraph!(plain!("foo"))])), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("> - foo\r\n- bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3464
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3464>
/// <https://spec.commonmark.org/0.29/#example-205>
fn t205_no_nl() {
    init!("> - foo\n- bar");

    assert_eq!(
        // from spec: <blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>
        [
            quote!(unordered_list!(vec![paragraph!(plain!("foo"))])), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("> - foo\n- bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3464
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3464>
/// <https://spec.commonmark.org/0.29/#example-205>
fn t205_tab() {
    init!(">\t-\tfoo\n-\tbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>
        [
            quote!(unordered_list!(vec![paragraph!(plain!("foo"))])), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t-\tfoo\n-\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3482>
/// <https://spec.commonmark.org/0.29/#example-206>
fn t206() {
    init!(">     foo\n    bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new(">     foo\n    bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3482>
/// <https://spec.commonmark.org/0.29/#example-206>
fn t206_cr() {
    init!(">     foo\r    bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new(">     foo\r    bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3482>
/// <https://spec.commonmark.org/0.29/#example-206>
fn t206_cr_nl() {
    init!(">     foo\r\n    bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new(">     foo\r\n    bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3482>
/// <https://spec.commonmark.org/0.29/#example-206>
fn t206_no_nl() {
    init!(">     foo\n    bar");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new(">     foo\n    bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3482>
/// <https://spec.commonmark.org/0.29/#example-206>
fn t206_tab() {
    init!(">\t\t\t\t\tfoo\n    bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t\t\t\t\tfoo\n    bar\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3495>
/// <https://spec.commonmark.org/0.29/#example-207>
fn t207() {
    init!("> ```\nfoo\n```\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>
        [
            quote!(code_block!("")), paragraph!(plain!("foo")), code_block!("")
        ].as_slice(),
        body(&mut StringData::new("> ```\nfoo\n```\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3495>
/// <https://spec.commonmark.org/0.29/#example-207>
fn t207_cr() {
    init!("> ```\rfoo\r```\r");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>
        [
            quote!(code_block!("")), paragraph!(plain!("foo")), code_block!("")
        ].as_slice(),
        body(&mut StringData::new("> ```\rfoo\r```\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3495>
/// <https://spec.commonmark.org/0.29/#example-207>
fn t207_cr_nl() {
    init!("> ```\r\nfoo\r\n```\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>
        [
            quote!(code_block!("")), paragraph!(plain!("foo")), code_block!("")
        ].as_slice(),
        body(&mut StringData::new("> ```\r\nfoo\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3495>
/// <https://spec.commonmark.org/0.29/#example-207>
fn t207_no_nl() {
    init!("> ```\nfoo\n```");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>
        [
            quote!(code_block!("")), paragraph!(plain!("foo")), code_block!("")
        ].as_slice(),
        body(&mut StringData::new("> ```\nfoo\n```", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3495
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3495>
/// <https://spec.commonmark.org/0.29/#example-207>
fn t207_tab() {
    init!(">\t```\nfoo\n```\n");

    assert_eq!(
        // from spec: <blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>
        [
            quote!(code_block!("")), paragraph!(plain!("foo")), code_block!("")
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t```\nfoo\n```\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3511
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3511>
/// <https://spec.commonmark.org/0.29/#example-208>
fn t208() {
    init!("> foo\n    - bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\n- bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("- bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n    - bar\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3511
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3511>
/// <https://spec.commonmark.org/0.29/#example-208>
fn t208_cr() {
    init!("> foo\r    - bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\n- bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("- bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r    - bar\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3511
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3511>
/// <https://spec.commonmark.org/0.29/#example-208>
fn t208_cr_nl() {
    init!("> foo\r\n    - bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\n- bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("- bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n    - bar\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3511
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3511>
/// <https://spec.commonmark.org/0.29/#example-208>
fn t208_no_nl() {
    init!("> foo\n    - bar");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\n- bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("- bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n    - bar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3511
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3511>
/// <https://spec.commonmark.org/0.29/#example-208>
fn t208_tab() {
    init!(">\tfoo\n    -\tbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\n- bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("-	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n    -\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3535>
/// <https://spec.commonmark.org/0.29/#example-209>
fn t209() {
    init!(">\n");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3535>
/// <https://spec.commonmark.org/0.29/#example-209>
fn t209_cr() {
    init!(">\r");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3535>
/// <https://spec.commonmark.org/0.29/#example-209>
fn t209_cr_nl() {
    init!(">\r\n");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3535
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3535>
/// <https://spec.commonmark.org/0.29/#example-209>
fn t209_no_nl() {
    init!(">");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3543>
/// <https://spec.commonmark.org/0.29/#example-210>
fn t210() {
    init!(">\n>  \n> \n");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\n>  \n> \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3543>
/// <https://spec.commonmark.org/0.29/#example-210>
fn t210_cr() {
    init!(">\r>  \r> \r");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\r>  \r> \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3543>
/// <https://spec.commonmark.org/0.29/#example-210>
fn t210_cr_nl() {
    init!(">\r\n>  \r\n> \r\n");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\r\n>  \r\n> \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3543>
/// <https://spec.commonmark.org/0.29/#example-210>
fn t210_no_nl() {
    init!(">\n>  \n> ");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        body(&mut StringData::new(">\n>  \n> ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3543>
/// <https://spec.commonmark.org/0.29/#example-210>
fn t210_tab() {
    init!(">\n>  \n>\t\n");

    assert_eq!(
        // from spec: <blockquote>\n</blockquote>
        [
            quote!()
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\n>  \n>\t\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3555>
/// <https://spec.commonmark.org/0.29/#example-211>
fn t211() {
    init!(">\n> foo\n>  \n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\n> foo\n>  \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3555>
/// <https://spec.commonmark.org/0.29/#example-211>
fn t211_cr() {
    init!(">\r> foo\r>  \r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\r> foo\r>  \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3555>
/// <https://spec.commonmark.org/0.29/#example-211>
fn t211_cr_nl() {
    init!(">\r\n> foo\r\n>  \r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\r\n> foo\r\n>  \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3555>
/// <https://spec.commonmark.org/0.29/#example-211>
fn t211_no_nl() {
    init!(">\n> foo\n>  ");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new(">\n> foo\n>  ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3555
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3555>
/// <https://spec.commonmark.org/0.29/#example-211>
fn t211_tab() {
    init!(">\n>\tfoo\n>  \n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\n>\tfoo\n>  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3568
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3568>
/// <https://spec.commonmark.org/0.29/#example-212>
fn t212() {
    init!("> foo\n\n> bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"))), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n\n> bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3568
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3568>
/// <https://spec.commonmark.org/0.29/#example-212>
fn t212_cr() {
    init!("> foo\r\r> bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"))), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\r> bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3568
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3568>
/// <https://spec.commonmark.org/0.29/#example-212>
fn t212_cr_nl() {
    init!("> foo\r\n\r\n> bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"))), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n\r\n> bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3568
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3568>
/// <https://spec.commonmark.org/0.29/#example-212>
fn t212_no_nl() {
    init!("> foo\n\n> bar");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"))), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n\n> bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3568
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3568>
/// <https://spec.commonmark.org/0.29/#example-212>
fn t212_tab() {
    init!(">\tfoo\n\n>\tbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"))), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n\n>\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3590>
/// <https://spec.commonmark.org/0.29/#example-213>
fn t213() {
    init!("> foo\n> bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n> bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3590>
/// <https://spec.commonmark.org/0.29/#example-213>
fn t213_cr() {
    init!("> foo\r> bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r> bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3590>
/// <https://spec.commonmark.org/0.29/#example-213>
fn t213_cr_nl() {
    init!("> foo\r\n> bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n> bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3590>
/// <https://spec.commonmark.org/0.29/#example-213>
fn t213_no_nl() {
    init!("> foo\n> bar");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n> bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3590
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3590>
/// <https://spec.commonmark.org/0.29/#example-213>
fn t213_tab() {
    init!(">\tfoo\n>\tbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo\nbar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n>\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3603
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3603>
/// <https://spec.commonmark.org/0.29/#example-214>
fn t214() {
    init!("> foo\n>\n> bar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")), paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n>\n> bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3603
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3603>
/// <https://spec.commonmark.org/0.29/#example-214>
fn t214_cr() {
    init!("> foo\r>\r> bar\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")), paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r>\r> bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3603
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3603>
/// <https://spec.commonmark.org/0.29/#example-214>
fn t214_cr_nl() {
    init!("> foo\r\n>\r\n> bar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")), paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\r\n>\r\n> bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3603
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3603>
/// <https://spec.commonmark.org/0.29/#example-214>
fn t214_no_nl() {
    init!("> foo\n>\n> bar");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")), paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("> foo\n>\n> bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3603
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3603>
/// <https://spec.commonmark.org/0.29/#example-214>
fn t214_tab() {
    init!(">\tfoo\n>\n>\tbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("foo")), paragraph!(plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tfoo\n>\n>\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3617
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3617>
/// <https://spec.commonmark.org/0.29/#example-215>
fn t215() {
    init!("foo\n> bar\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            paragraph!(plain!("foo")), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo\n> bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3617
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3617>
/// <https://spec.commonmark.org/0.29/#example-215>
fn t215_cr() {
    init!("foo\r> bar\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            paragraph!(plain!("foo")), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo\r> bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3617
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3617>
/// <https://spec.commonmark.org/0.29/#example-215>
fn t215_cr_nl() {
    init!("foo\r\n> bar\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            paragraph!(plain!("foo")), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo\r\n> bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3617
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3617>
/// <https://spec.commonmark.org/0.29/#example-215>
fn t215_no_nl() {
    init!("foo\n> bar");

    assert_eq!(
        // from spec: <p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            paragraph!(plain!("foo")), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo\n> bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3617
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3617>
/// <https://spec.commonmark.org/0.29/#example-215>
fn t215_tab() {
    init!("foo\n>\tbar\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>
        [
            paragraph!(plain!("foo")), quote!(paragraph!(plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\n>\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3631
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3631>
/// <https://spec.commonmark.org/0.29/#example-216>
fn t216() {
    init!("> aaa\n***\n> bbb\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("aaa"))), Break, quote!(paragraph!(plain!("bbb")))
        ].as_slice(),
        body(&mut StringData::new("> aaa\n***\n> bbb\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3631
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3631>
/// <https://spec.commonmark.org/0.29/#example-216>
fn t216_cr() {
    init!("> aaa\r***\r> bbb\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("aaa"))), Break, quote!(paragraph!(plain!("bbb")))
        ].as_slice(),
        body(&mut StringData::new("> aaa\r***\r> bbb\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3631
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3631>
/// <https://spec.commonmark.org/0.29/#example-216>
fn t216_cr_nl() {
    init!("> aaa\r\n***\r\n> bbb\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("aaa"))), Break, quote!(paragraph!(plain!("bbb")))
        ].as_slice(),
        body(&mut StringData::new("> aaa\r\n***\r\n> bbb\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3631
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3631>
/// <https://spec.commonmark.org/0.29/#example-216>
fn t216_no_nl() {
    init!("> aaa\n***\n> bbb");

    assert_eq!(
        // from spec: <blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("aaa"))), Break, quote!(paragraph!(plain!("bbb")))
        ].as_slice(),
        body(&mut StringData::new("> aaa\n***\n> bbb", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3631
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3631>
/// <https://spec.commonmark.org/0.29/#example-216>
fn t216_tab() {
    init!(">\taaa\n***\n>\tbbb\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("aaa"))), Break, quote!(paragraph!(plain!("bbb")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\taaa\n***\n>\tbbb\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3649
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3649>
/// <https://spec.commonmark.org/0.29/#example-217>
fn t217() {
    init!("> bar\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> bar\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3649
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3649>
/// <https://spec.commonmark.org/0.29/#example-217>
fn t217_cr() {
    init!("> bar\rbaz\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> bar\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3649
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3649>
/// <https://spec.commonmark.org/0.29/#example-217>
fn t217_cr_nl() {
    init!("> bar\r\nbaz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> bar\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3649
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3649>
/// <https://spec.commonmark.org/0.29/#example-217>
fn t217_no_nl() {
    init!("> bar\nbaz");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("> bar\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3649
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3649>
/// <https://spec.commonmark.org/0.29/#example-217>
fn t217_tab() {
    init!(">\tbar\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar\nbaz</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("bar"), SoftBreak, plain!("baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tbar\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3660>
/// <https://spec.commonmark.org/0.29/#example-218>
fn t218() {
    init!("> bar\n\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\n\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3660>
/// <https://spec.commonmark.org/0.29/#example-218>
fn t218_cr() {
    init!("> bar\r\rbaz\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\r\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3660>
/// <https://spec.commonmark.org/0.29/#example-218>
fn t218_cr_nl() {
    init!("> bar\r\n\r\nbaz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\r\n\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3660>
/// <https://spec.commonmark.org/0.29/#example-218>
fn t218_no_nl() {
    init!("> bar\n\nbaz");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\n\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3660>
/// <https://spec.commonmark.org/0.29/#example-218>
fn t218_tab() {
    init!(">\tbar\n\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tbar\n\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3672>
/// <https://spec.commonmark.org/0.29/#example-219>
fn t219() {
    init!("> bar\n>\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\n>\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3672>
/// <https://spec.commonmark.org/0.29/#example-219>
fn t219_cr() {
    init!("> bar\r>\rbaz\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\r>\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3672>
/// <https://spec.commonmark.org/0.29/#example-219>
fn t219_cr_nl() {
    init!("> bar\r\n>\r\nbaz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\r\n>\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3672>
/// <https://spec.commonmark.org/0.29/#example-219>
fn t219_no_nl() {
    init!("> bar\n>\nbaz");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("> bar\n>\nbaz", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 3672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3672>
/// <https://spec.commonmark.org/0.29/#example-219>
fn t219_tab() {
    init!(">\tbar\n>\nbaz\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>
        [
            quote!(paragraph!(plain!("bar"))), paragraph!(plain!("baz"))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\tbar\n>\nbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3688>
/// <https://spec.commonmark.org/0.29/#example-220>
fn t220() {
    init!("> > > foo\nbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("> > > foo\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3688>
/// <https://spec.commonmark.org/0.29/#example-220>
fn t220_cr() {
    init!("> > > foo\rbar\r");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("> > > foo\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3688>
/// <https://spec.commonmark.org/0.29/#example-220>
fn t220_cr_nl() {
    init!("> > > foo\r\nbar\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("> > > foo\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3688>
/// <https://spec.commonmark.org/0.29/#example-220>
fn t220_no_nl() {
    init!("> > > foo\nbar");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("> > > foo\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3688>
/// <https://spec.commonmark.org/0.29/#example-220>
fn t220_tab() {
    init!(">\t>\t>\tfoo\nbar\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar")))))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t>\t>\tfoo\nbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3703>
/// <https://spec.commonmark.org/0.29/#example-221>
fn t221() {
    init!(">>> foo\n> bar\n>>baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("baz")))))
        ].as_slice(),
        body(&mut StringData::new(">>> foo\n> bar\n>>baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3703>
/// <https://spec.commonmark.org/0.29/#example-221>
fn t221_cr() {
    init!(">>> foo\r> bar\r>>baz\r");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("baz")))))
        ].as_slice(),
        body(&mut StringData::new(">>> foo\r> bar\r>>baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3703>
/// <https://spec.commonmark.org/0.29/#example-221>
fn t221_cr_nl() {
    init!(">>> foo\r\n> bar\r\n>>baz\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("baz")))))
        ].as_slice(),
        body(&mut StringData::new(">>> foo\r\n> bar\r\n>>baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3703>
/// <https://spec.commonmark.org/0.29/#example-221>
fn t221_no_nl() {
    init!(">>> foo\n> bar\n>>baz");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("baz")))))
        ].as_slice(),
        body(&mut StringData::new(">>> foo\n> bar\n>>baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3703
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3703>
/// <https://spec.commonmark.org/0.29/#example-221>
fn t221_tab() {
    init!(">>>\tfoo\n>\tbar\n>>baz\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(quote!(paragraph!(plain!("foo"), SoftBreak, plain!("bar"), SoftBreak, plain!("baz")))))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">>>\tfoo\n>\tbar\n>>baz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3725
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3725>
/// <https://spec.commonmark.org/0.29/#example-222>
fn t222() {
    init!(">     code\n\n>    not code\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>code</p>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("code"))), quote!(paragraph!(plain!("not code")))
        ].as_slice(),
        body(&mut StringData::new(">     code\n\n>    not code\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3725
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3725>
/// <https://spec.commonmark.org/0.29/#example-222>
fn t222_cr() {
    init!(">     code\r\r>    not code\r");

    assert_eq!(
        // from spec: <blockquote>\n<p>code</p>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("code"))), quote!(paragraph!(plain!("not code")))
        ].as_slice(),
        body(&mut StringData::new(">     code\r\r>    not code\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3725
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3725>
/// <https://spec.commonmark.org/0.29/#example-222>
fn t222_cr_nl() {
    init!(">     code\r\n\r\n>    not code\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>code</p>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("code"))), quote!(paragraph!(plain!("not code")))
        ].as_slice(),
        body(&mut StringData::new(">     code\r\n\r\n>    not code\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3725
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3725>
/// <https://spec.commonmark.org/0.29/#example-222>
fn t222_no_nl() {
    init!(">     code\n\n>    not code");

    assert_eq!(
        // from spec: <blockquote>\n<p>code</p>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("code"))), quote!(paragraph!(plain!("not code")))
        ].as_slice(),
        body(&mut StringData::new(">     code\n\n>    not code", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3725
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3725>
/// <https://spec.commonmark.org/0.29/#example-222>
fn t222_tab() {
    init!(">\t\t\t\t\tcode\n\n>\t\t\t\tnot\tcode\n");

    assert_eq!(
        // from spec: <blockquote>\n<p>code</p>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>
        [
            quote!(paragraph!(plain!("code"))), quote!(paragraph!(plain!("not	code")))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t\t\t\t\tcode\n\n>\t\t\t\tnot\tcode\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3779
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3779>
/// <https://spec.commonmark.org/0.29/#example-223>
fn t223() {
    init!("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n");

    assert_eq!(
        // from spec: <p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>
        [
            paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))
        ].as_slice(),
        body(&mut StringData::new("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3779
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3779>
/// <https://spec.commonmark.org/0.29/#example-223>
fn t223_cr() {
    init!("A paragraph\rwith two lines.\r\r    indented code\r\r> A block quote.\r");

    assert_eq!(
        // from spec: <p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>
        [
            paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))
        ].as_slice(),
        body(&mut StringData::new("A paragraph\rwith two lines.\r\r    indented code\r\r> A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3779
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3779>
/// <https://spec.commonmark.org/0.29/#example-223>
fn t223_cr_nl() {
    init!("A paragraph\r\nwith two lines.\r\n\r\n    indented code\r\n\r\n> A block quote.\r\n");

    assert_eq!(
        // from spec: <p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>
        [
            paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))
        ].as_slice(),
        body(&mut StringData::new("A paragraph\r\nwith two lines.\r\n\r\n    indented code\r\n\r\n> A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3779
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3779>
/// <https://spec.commonmark.org/0.29/#example-223>
fn t223_no_nl() {
    init!("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.");

    assert_eq!(
        // from spec: <p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>
        [
            paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))
        ].as_slice(),
        body(&mut StringData::new("A paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3779
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3779>
/// <https://spec.commonmark.org/0.29/#example-223>
fn t223_tab() {
    init!("A\tparagraph\nwith\ttwo\tlines.\n\n    indented\tcode\n\n>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>
        [
            paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("A\tparagraph\nwith\ttwo\tlines.\n\n    indented\tcode\n\n>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3801
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3801>
/// <https://spec.commonmark.org/0.29/#example-224>
fn t224() {
    init!("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3801
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3801>
/// <https://spec.commonmark.org/0.29/#example-224>
fn t224_cr() {
    init!("1.  A paragraph\r    with two lines.\r\r        indented code\r\r    > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("1.  A paragraph\r    with two lines.\r\r        indented code\r\r    > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3801
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3801>
/// <https://spec.commonmark.org/0.29/#example-224>
fn t224_cr_nl() {
    init!("1.  A paragraph\r\n    with two lines.\r\n\r\n        indented code\r\n\r\n    > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("1.  A paragraph\r\n    with two lines.\r\n\r\n        indented code\r\n\r\n    > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3801
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3801>
/// <https://spec.commonmark.org/0.29/#example-224>
fn t224_no_nl() {
    init!("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3801
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3801>
/// <https://spec.commonmark.org/0.29/#example-224>
fn t224_tab() {
    init!("1.\t\tA\tparagraph\n    with\ttwo\tlines.\n\n    \t\t\t\tindented\tcode\n\n    >\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t\tA\tparagraph\n    with\ttwo\tlines.\n\n    \t\t\t\tindented\tcode\n\n    >\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3834>
/// <https://spec.commonmark.org/0.29/#example-225>
fn t225() {
    init!("- one\n\n two\n");

    assert_eq!(
        // from spec: <ul>\n<li>one</li>\n</ul>\n<p>two</p>
        [
            unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))
        ].as_slice(),
        body(&mut StringData::new("- one\n\n two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3834>
/// <https://spec.commonmark.org/0.29/#example-225>
fn t225_cr() {
    init!("- one\r\r two\r");

    assert_eq!(
        // from spec: <ul>\n<li>one</li>\n</ul>\n<p>two</p>
        [
            unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))
        ].as_slice(),
        body(&mut StringData::new("- one\r\r two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3834>
/// <https://spec.commonmark.org/0.29/#example-225>
fn t225_cr_nl() {
    init!("- one\r\n\r\n two\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>one</li>\n</ul>\n<p>two</p>
        [
            unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))
        ].as_slice(),
        body(&mut StringData::new("- one\r\n\r\n two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3834>
/// <https://spec.commonmark.org/0.29/#example-225>
fn t225_no_nl() {
    init!("- one\n\n two");

    assert_eq!(
        // from spec: <ul>\n<li>one</li>\n</ul>\n<p>two</p>
        [
            unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))
        ].as_slice(),
        body(&mut StringData::new("- one\n\n two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3834
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3834>
/// <https://spec.commonmark.org/0.29/#example-225>
fn t225_tab() {
    init!("-\tone\n\n two\n");

    assert_eq!(
        // from spec: <ul>\n<li>one</li>\n</ul>\n<p>two</p>
        [
            unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tone\n\n two\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3846
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3846>
/// <https://spec.commonmark.org/0.29/#example-226>
fn t226() {
    init!("- one\n\n  two\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new("- one\n\n  two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3846
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3846>
/// <https://spec.commonmark.org/0.29/#example-226>
fn t226_cr() {
    init!("- one\r\r  two\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new("- one\r\r  two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3846
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3846>
/// <https://spec.commonmark.org/0.29/#example-226>
fn t226_cr_nl() {
    init!("- one\r\n\r\n  two\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new("- one\r\n\r\n  two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3846
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3846>
/// <https://spec.commonmark.org/0.29/#example-226>
fn t226_no_nl() {
    init!("- one\n\n  two");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new("- one\n\n  two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3846
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3846>
/// <https://spec.commonmark.org/0.29/#example-226>
fn t226_tab() {
    init!("-\tone\n\n  two\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tone\n\n  two\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3860>
/// <https://spec.commonmark.org/0.29/#example-227>
fn t227() {
    init!(" -    one\n\n     two\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\n\n     two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3860>
/// <https://spec.commonmark.org/0.29/#example-227>
fn t227_cr() {
    init!(" -    one\r\r     two\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\r\r     two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3860>
/// <https://spec.commonmark.org/0.29/#example-227>
fn t227_cr_nl() {
    init!(" -    one\r\n\r\n     two\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\r\n\r\n     two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3860>
/// <https://spec.commonmark.org/0.29/#example-227>
fn t227_no_nl() {
    init!(" -    one\n\n     two");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\n\n     two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3860>
/// <https://spec.commonmark.org/0.29/#example-227>
fn t227_tab() {
    init!(" -\t\t\t\tone\n\n    \ttwo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new(" -\t\t\t\tone\n\n    \ttwo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3873>
/// <https://spec.commonmark.org/0.29/#example-228>
fn t228() {
    init!(" -    one\n\n      two\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\n\n      two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3873>
/// <https://spec.commonmark.org/0.29/#example-228>
fn t228_cr() {
    init!(" -    one\r\r      two\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\r\r      two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3873>
/// <https://spec.commonmark.org/0.29/#example-228>
fn t228_cr_nl() {
    init!(" -    one\r\n\r\n      two\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\r\n\r\n      two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3873>
/// <https://spec.commonmark.org/0.29/#example-228>
fn t228_no_nl() {
    init!(" -    one\n\n      two");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        body(&mut StringData::new(" -    one\n\n      two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3873
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3873>
/// <https://spec.commonmark.org/0.29/#example-228>
fn t228_tab() {
    init!(" -\t\t\t\tone\n\n    \t\ttwo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new(" -\t\t\t\tone\n\n    \t\ttwo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3895>
/// <https://spec.commonmark.org/0.29/#example-229>
fn t229() {
    init!("   > > 1.  one\n>>\n>>     two\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(ordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])))
        ].as_slice(),
        body(&mut StringData::new("   > > 1.  one\n>>\n>>     two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3895>
/// <https://spec.commonmark.org/0.29/#example-229>
fn t229_cr() {
    init!("   > > 1.  one\r>>\r>>     two\r");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(ordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])))
        ].as_slice(),
        body(&mut StringData::new("   > > 1.  one\r>>\r>>     two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3895>
/// <https://spec.commonmark.org/0.29/#example-229>
fn t229_cr_nl() {
    init!("   > > 1.  one\r\n>>\r\n>>     two\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(ordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])))
        ].as_slice(),
        body(&mut StringData::new("   > > 1.  one\r\n>>\r\n>>     two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3895>
/// <https://spec.commonmark.org/0.29/#example-229>
fn t229_no_nl() {
    init!("   > > 1.  one\n>>\n>>     two");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(ordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])))
        ].as_slice(),
        body(&mut StringData::new("   > > 1.  one\n>>\n>>     two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3895>
/// <https://spec.commonmark.org/0.29/#example-229>
fn t229_tab() {
    init!("   >\t>\t1.\t\tone\n>>\n>>\t\t\t\t\ttwo\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(ordered_list!(vec![paragraph!(plain!("one")), paragraph!(plain!("two"))])))
        ].as_slice(),
        space2tab(body(&mut StringData::new("   >\t>\t1.\t\tone\n>>\n>>\t\t\t\t\ttwo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3922
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3922>
/// <https://spec.commonmark.org/0.29/#example-230>
fn t230() {
    init!(">>- one\n>>\n  >  > two\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))))
        ].as_slice(),
        body(&mut StringData::new(">>- one\n>>\n  >  > two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3922
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3922>
/// <https://spec.commonmark.org/0.29/#example-230>
fn t230_cr() {
    init!(">>- one\r>>\r  >  > two\r");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))))
        ].as_slice(),
        body(&mut StringData::new(">>- one\r>>\r  >  > two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3922
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3922>
/// <https://spec.commonmark.org/0.29/#example-230>
fn t230_cr_nl() {
    init!(">>- one\r\n>>\r\n  >  > two\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))))
        ].as_slice(),
        body(&mut StringData::new(">>- one\r\n>>\r\n  >  > two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3922
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3922>
/// <https://spec.commonmark.org/0.29/#example-230>
fn t230_no_nl() {
    init!(">>- one\n>>\n  >  > two");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))))
        ].as_slice(),
        body(&mut StringData::new(">>- one\n>>\n  >  > two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3922
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3922>
/// <https://spec.commonmark.org/0.29/#example-230>
fn t230_tab() {
    init!(">>-\tone\n>>\n  >\t\t>\ttwo\n");

    assert_eq!(
        // from spec: <blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>
        [
            quote!(quote!(unordered_list!(vec![paragraph!(plain!("one"))]), paragraph!(plain!("two"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">>-\tone\n>>\n  >\t\t>\ttwo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3941
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3941>
/// <https://spec.commonmark.org/0.29/#example-231>
fn t231() {
    init!("-one\n\n2.two\n");

    assert_eq!(
        // from spec: <p>-one</p>\n<p>2.two</p>
        [
            paragraph!(plain!("-one")), paragraph!(plain!("2.two"))
        ].as_slice(),
        body(&mut StringData::new("-one\n\n2.two\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3941
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3941>
/// <https://spec.commonmark.org/0.29/#example-231>
fn t231_cr() {
    init!("-one\r\r2.two\r");

    assert_eq!(
        // from spec: <p>-one</p>\n<p>2.two</p>
        [
            paragraph!(plain!("-one")), paragraph!(plain!("2.two"))
        ].as_slice(),
        body(&mut StringData::new("-one\r\r2.two\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3941
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3941>
/// <https://spec.commonmark.org/0.29/#example-231>
fn t231_cr_nl() {
    init!("-one\r\n\r\n2.two\r\n");

    assert_eq!(
        // from spec: <p>-one</p>\n<p>2.two</p>
        [
            paragraph!(plain!("-one")), paragraph!(plain!("2.two"))
        ].as_slice(),
        body(&mut StringData::new("-one\r\n\r\n2.two\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3941
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3941>
/// <https://spec.commonmark.org/0.29/#example-231>
fn t231_no_nl() {
    init!("-one\n\n2.two");

    assert_eq!(
        // from spec: <p>-one</p>\n<p>2.two</p>
        [
            paragraph!(plain!("-one")), paragraph!(plain!("2.two"))
        ].as_slice(),
        body(&mut StringData::new("-one\n\n2.two", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3954
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3954>
/// <https://spec.commonmark.org/0.29/#example-232>
fn t232() {
    init!("- foo\n\n\n  bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n\n  bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3954
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3954>
/// <https://spec.commonmark.org/0.29/#example-232>
fn t232_cr() {
    init!("- foo\r\r\r  bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\r\r  bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3954
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3954>
/// <https://spec.commonmark.org/0.29/#example-232>
fn t232_cr_nl() {
    init!("- foo\r\n\r\n\r\n  bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n\r\n\r\n  bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3954
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3954>
/// <https://spec.commonmark.org/0.29/#example-232>
fn t232_no_nl() {
    init!("- foo\n\n\n  bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n\n  bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3954
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3954>
/// <https://spec.commonmark.org/0.29/#example-232>
fn t232_tab() {
    init!("-\tfoo\n\n\n  bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n\n\n  bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3971>
/// <https://spec.commonmark.org/0.29/#example-233>
fn t233() {
    init!("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), code_block!("", "bar\n"), paragraph!(plain!("baz")), quote!(paragraph!(plain!("bam")))])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3971>
/// <https://spec.commonmark.org/0.29/#example-233>
fn t233_cr() {
    init!("1.  foo\r\r    ```\r    bar\r    ```\r\r    baz\r\r    > bam\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), code_block!("", "bar\r"), paragraph!(plain!("baz")), quote!(paragraph!(plain!("bam")))])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\r\r    ```\r    bar\r    ```\r\r    baz\r\r    > bam\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3971>
/// <https://spec.commonmark.org/0.29/#example-233>
fn t233_cr_nl() {
    init!("1.  foo\r\n\r\n    ```\r\n    bar\r\n    ```\r\n\r\n    baz\r\n\r\n    > bam\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), code_block!("", "bar\r\n"), paragraph!(plain!("baz")), quote!(paragraph!(plain!("bam")))])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\r\n\r\n    ```\r\n    bar\r\n    ```\r\n\r\n    baz\r\n\r\n    > bam\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3971>
/// <https://spec.commonmark.org/0.29/#example-233>
fn t233_no_nl() {
    init!("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), code_block!("", "bar\n"), paragraph!(plain!("baz")), quote!(paragraph!(plain!("bam")))])
        ].as_slice(),
        body(&mut StringData::new("1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3971>
/// <https://spec.commonmark.org/0.29/#example-233>
fn t233_tab() {
    init!("1.\t\tfoo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    >\tbam\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo")), code_block!("", "bar\n"), paragraph!(plain!("baz")), quote!(paragraph!(plain!("bam")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t\tfoo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    >\tbam\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3999>
/// <https://spec.commonmark.org/0.29/#example-234>
fn t234() {
    init!("- Foo\n\n      bar\n\n\n      baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>Foo</p>\n<p>bar</p>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo")), paragraph!(plain!("bar")), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- Foo\n\n      bar\n\n\n      baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3999>
/// <https://spec.commonmark.org/0.29/#example-234>
fn t234_cr() {
    init!("- Foo\r\r      bar\r\r\r      baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>Foo</p>\n<p>bar</p>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo")), paragraph!(plain!("bar")), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- Foo\r\r      bar\r\r\r      baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3999>
/// <https://spec.commonmark.org/0.29/#example-234>
fn t234_cr_nl() {
    init!("- Foo\r\n\r\n      bar\r\n\r\n\r\n      baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>Foo</p>\n<p>bar</p>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo")), paragraph!(plain!("bar")), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- Foo\r\n\r\n      bar\r\n\r\n\r\n      baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3999>
/// <https://spec.commonmark.org/0.29/#example-234>
fn t234_no_nl() {
    init!("- Foo\n\n      bar\n\n\n      baz");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>Foo</p>\n<p>bar</p>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo")), paragraph!(plain!("bar")), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- Foo\n\n      bar\n\n\n      baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 3999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L3999>
/// <https://spec.commonmark.org/0.29/#example-234>
fn t234_tab() {
    init!("-\tFoo\n\n    \t\tbar\n\n\n    \t\tbaz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>Foo</p>\n<p>bar</p>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("Foo")), paragraph!(plain!("bar")), paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tFoo\n\n    \t\tbar\n\n\n    \t\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4021
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4021>
/// <https://spec.commonmark.org/0.29/#example-235>
fn t235() {
    init!("123456789. ok\n");

    assert_eq!(
        // from spec: <ol start=\"123456789\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("123456789", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("123456789. ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4021
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4021>
/// <https://spec.commonmark.org/0.29/#example-235>
fn t235_cr() {
    init!("123456789. ok\r");

    assert_eq!(
        // from spec: <ol start=\"123456789\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("123456789", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("123456789. ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4021
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4021>
/// <https://spec.commonmark.org/0.29/#example-235>
fn t235_cr_nl() {
    init!("123456789. ok\r\n");

    assert_eq!(
        // from spec: <ol start=\"123456789\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("123456789", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("123456789. ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4021
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4021>
/// <https://spec.commonmark.org/0.29/#example-235>
fn t235_no_nl() {
    init!("123456789. ok");

    assert_eq!(
        // from spec: <ol start=\"123456789\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("123456789", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("123456789. ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4021
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4021>
/// <https://spec.commonmark.org/0.29/#example-235>
fn t235_tab() {
    init!("123456789.\tok\n");

    assert_eq!(
        // from spec: <ol start=\"123456789\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("123456789", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("123456789.\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4030
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4030>
/// <https://spec.commonmark.org/0.29/#example-236>
fn t236() {
    init!("1234567890. not ok\n");

    assert_eq!(
        // from spec: <p>1234567890. not ok</p>
        [
            paragraph!(plain!("1234567890. not ok"))
        ].as_slice(),
        body(&mut StringData::new("1234567890. not ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4030
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4030>
/// <https://spec.commonmark.org/0.29/#example-236>
fn t236_cr() {
    init!("1234567890. not ok\r");

    assert_eq!(
        // from spec: <p>1234567890. not ok</p>
        [
            paragraph!(plain!("1234567890. not ok"))
        ].as_slice(),
        body(&mut StringData::new("1234567890. not ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4030
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4030>
/// <https://spec.commonmark.org/0.29/#example-236>
fn t236_cr_nl() {
    init!("1234567890. not ok\r\n");

    assert_eq!(
        // from spec: <p>1234567890. not ok</p>
        [
            paragraph!(plain!("1234567890. not ok"))
        ].as_slice(),
        body(&mut StringData::new("1234567890. not ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4030
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4030>
/// <https://spec.commonmark.org/0.29/#example-236>
fn t236_no_nl() {
    init!("1234567890. not ok");

    assert_eq!(
        // from spec: <p>1234567890. not ok</p>
        [
            paragraph!(plain!("1234567890. not ok"))
        ].as_slice(),
        body(&mut StringData::new("1234567890. not ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4030
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4030>
/// <https://spec.commonmark.org/0.29/#example-236>
fn t236_tab() {
    init!("1234567890.\tnot\tok\n");

    assert_eq!(
        // from spec: <p>1234567890. not ok</p>
        [
            paragraph!(plain!("1234567890.	not	ok"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("1234567890.\tnot\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4039
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4039>
/// <https://spec.commonmark.org/0.29/#example-237>
fn t237() {
    init!("0. ok\n");

    assert_eq!(
        // from spec: <ol start=\"0\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("0", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("0. ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4039
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4039>
/// <https://spec.commonmark.org/0.29/#example-237>
fn t237_cr() {
    init!("0. ok\r");

    assert_eq!(
        // from spec: <ol start=\"0\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("0", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("0. ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4039
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4039>
/// <https://spec.commonmark.org/0.29/#example-237>
fn t237_cr_nl() {
    init!("0. ok\r\n");

    assert_eq!(
        // from spec: <ol start=\"0\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("0", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("0. ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4039
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4039>
/// <https://spec.commonmark.org/0.29/#example-237>
fn t237_no_nl() {
    init!("0. ok");

    assert_eq!(
        // from spec: <ol start=\"0\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("0", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("0. ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4039
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4039>
/// <https://spec.commonmark.org/0.29/#example-237>
fn t237_tab() {
    init!("0.\tok\n");

    assert_eq!(
        // from spec: <ol start=\"0\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("0", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("0.\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4048
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4048>
/// <https://spec.commonmark.org/0.29/#example-238>
fn t238() {
    init!("003. ok\n");

    assert_eq!(
        // from spec: <ol start=\"003\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("003", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("003. ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4048
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4048>
/// <https://spec.commonmark.org/0.29/#example-238>
fn t238_cr() {
    init!("003. ok\r");

    assert_eq!(
        // from spec: <ol start=\"003\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("003", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("003. ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4048
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4048>
/// <https://spec.commonmark.org/0.29/#example-238>
fn t238_cr_nl() {
    init!("003. ok\r\n");

    assert_eq!(
        // from spec: <ol start=\"003\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("003", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("003. ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4048
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4048>
/// <https://spec.commonmark.org/0.29/#example-238>
fn t238_no_nl() {
    init!("003. ok");

    assert_eq!(
        // from spec: <ol start=\"003\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("003", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        body(&mut StringData::new("003. ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4048
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4048>
/// <https://spec.commonmark.org/0.29/#example-238>
fn t238_tab() {
    init!("003.\tok\n");

    assert_eq!(
        // from spec: <ol start=\"003\">\n<li>ok</li>\n</ol>
        [
            ordered_list!("003", vec![paragraph!(plain!("ok"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("003.\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4059>
/// <https://spec.commonmark.org/0.29/#example-239>
fn t239() {
    init!("-1. not ok\n");

    assert_eq!(
        // from spec: <p>-1. not ok</p>
        [
            paragraph!(plain!("-1. not ok"))
        ].as_slice(),
        body(&mut StringData::new("-1. not ok\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4059>
/// <https://spec.commonmark.org/0.29/#example-239>
fn t239_cr() {
    init!("-1. not ok\r");

    assert_eq!(
        // from spec: <p>-1. not ok</p>
        [
            paragraph!(plain!("-1. not ok"))
        ].as_slice(),
        body(&mut StringData::new("-1. not ok\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4059>
/// <https://spec.commonmark.org/0.29/#example-239>
fn t239_cr_nl() {
    init!("-1. not ok\r\n");

    assert_eq!(
        // from spec: <p>-1. not ok</p>
        [
            paragraph!(plain!("-1. not ok"))
        ].as_slice(),
        body(&mut StringData::new("-1. not ok\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4059>
/// <https://spec.commonmark.org/0.29/#example-239>
fn t239_no_nl() {
    init!("-1. not ok");

    assert_eq!(
        // from spec: <p>-1. not ok</p>
        [
            paragraph!(plain!("-1. not ok"))
        ].as_slice(),
        body(&mut StringData::new("-1. not ok", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4059>
/// <https://spec.commonmark.org/0.29/#example-239>
fn t239_tab() {
    init!("-1.\tnot\tok\n");

    assert_eq!(
        // from spec: <p>-1. not ok</p>
        [
            paragraph!(plain!("-1.	not	ok"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("-1.\tnot\tok\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4082>
/// <https://spec.commonmark.org/0.29/#example-240>
fn t240() {
    init!("- foo\n\n      bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n      bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4082>
/// <https://spec.commonmark.org/0.29/#example-240>
fn t240_cr() {
    init!("- foo\r\r      bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\r      bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4082>
/// <https://spec.commonmark.org/0.29/#example-240>
fn t240_cr_nl() {
    init!("- foo\r\n\r\n      bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n\r\n      bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4082>
/// <https://spec.commonmark.org/0.29/#example-240>
fn t240_no_nl() {
    init!("- foo\n\n      bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n      bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4082
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4082>
/// <https://spec.commonmark.org/0.29/#example-240>
fn t240_tab() {
    init!("-\tfoo\n\n    \t\tbar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n\n    \t\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4099
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4099>
/// <https://spec.commonmark.org/0.29/#example-241>
fn t241() {
    init!("  10.  foo\n\n           bar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  10.  foo\n\n           bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4099
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4099>
/// <https://spec.commonmark.org/0.29/#example-241>
fn t241_cr() {
    init!("  10.  foo\r\r           bar\r");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  10.  foo\r\r           bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4099
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4099>
/// <https://spec.commonmark.org/0.29/#example-241>
fn t241_cr_nl() {
    init!("  10.  foo\r\n\r\n           bar\r\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  10.  foo\r\n\r\n           bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4099
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4099>
/// <https://spec.commonmark.org/0.29/#example-241>
fn t241_no_nl() {
    init!("  10.  foo\n\n           bar");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("  10.  foo\n\n           bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4099
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4099>
/// <https://spec.commonmark.org/0.29/#example-241>
fn t241_tab() {
    init!("  10.\t\tfoo\n\n    \t\t\t\t\t\t\tbar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  10.\t\tfoo\n\n    \t\t\t\t\t\t\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4118
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4118>
/// <https://spec.commonmark.org/0.29/#example-242>
fn t242() {
    init!("    indented code\n\nparagraph\n\n    more code\n");

    assert_eq!(
        // from spec: <p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>
        [
            paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))
        ].as_slice(),
        body(&mut StringData::new("    indented code\n\nparagraph\n\n    more code\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4118
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4118>
/// <https://spec.commonmark.org/0.29/#example-242>
fn t242_cr() {
    init!("    indented code\r\rparagraph\r\r    more code\r");

    assert_eq!(
        // from spec: <p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>
        [
            paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))
        ].as_slice(),
        body(&mut StringData::new("    indented code\r\rparagraph\r\r    more code\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4118
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4118>
/// <https://spec.commonmark.org/0.29/#example-242>
fn t242_cr_nl() {
    init!("    indented code\r\n\r\nparagraph\r\n\r\n    more code\r\n");

    assert_eq!(
        // from spec: <p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>
        [
            paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))
        ].as_slice(),
        body(&mut StringData::new("    indented code\r\n\r\nparagraph\r\n\r\n    more code\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4118
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4118>
/// <https://spec.commonmark.org/0.29/#example-242>
fn t242_no_nl() {
    init!("    indented code\n\nparagraph\n\n    more code");

    assert_eq!(
        // from spec: <p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>
        [
            paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))
        ].as_slice(),
        body(&mut StringData::new("    indented code\n\nparagraph\n\n    more code", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4118
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4118>
/// <https://spec.commonmark.org/0.29/#example-242>
fn t242_tab() {
    init!("    indented\tcode\n\nparagraph\n\n    more\tcode\n");

    assert_eq!(
        // from spec: <p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>
        [
            paragraph!(plain!("indented	code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more	code"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("    indented\tcode\n\nparagraph\n\n    more\tcode\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4133
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4133>
/// <https://spec.commonmark.org/0.29/#example-243>
fn t243() {
    init!("1.     indented code\n\n   paragraph\n\n       more code\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.     indented code\n\n   paragraph\n\n       more code\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4133
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4133>
/// <https://spec.commonmark.org/0.29/#example-243>
fn t243_cr() {
    init!("1.     indented code\r\r   paragraph\r\r       more code\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.     indented code\r\r   paragraph\r\r       more code\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4133
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4133>
/// <https://spec.commonmark.org/0.29/#example-243>
fn t243_cr_nl() {
    init!("1.     indented code\r\n\r\n   paragraph\r\n\r\n       more code\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.     indented code\r\n\r\n   paragraph\r\n\r\n       more code\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4133
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4133>
/// <https://spec.commonmark.org/0.29/#example-243>
fn t243_no_nl() {
    init!("1.     indented code\n\n   paragraph\n\n       more code");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.     indented code\n\n   paragraph\n\n       more code", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4133
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4133>
/// <https://spec.commonmark.org/0.29/#example-243>
fn t243_tab() {
    init!("1.\t\t\t\t\tindented\tcode\n\n   paragraph\n\n    \t\t\tmore\tcode\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented	code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more	code"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t\t\t\t\tindented\tcode\n\n   paragraph\n\n    \t\t\tmore\tcode\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4155
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4155>
/// <https://spec.commonmark.org/0.29/#example-244>
fn t244() {
    init!("1.      indented code\n\n   paragraph\n\n       more code\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.      indented code\n\n   paragraph\n\n       more code\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4155
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4155>
/// <https://spec.commonmark.org/0.29/#example-244>
fn t244_cr() {
    init!("1.      indented code\r\r   paragraph\r\r       more code\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.      indented code\r\r   paragraph\r\r       more code\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4155
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4155>
/// <https://spec.commonmark.org/0.29/#example-244>
fn t244_cr_nl() {
    init!("1.      indented code\r\n\r\n   paragraph\r\n\r\n       more code\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.      indented code\r\n\r\n   paragraph\r\n\r\n       more code\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4155
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4155>
/// <https://spec.commonmark.org/0.29/#example-244>
fn t244_no_nl() {
    init!("1.      indented code\n\n   paragraph\n\n       more code");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more code"))])
        ].as_slice(),
        body(&mut StringData::new("1.      indented code\n\n   paragraph\n\n       more code", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4155
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4155>
/// <https://spec.commonmark.org/0.29/#example-244>
fn t244_tab() {
    init!("1.\t\t\t\t\t\tindented\tcode\n\n   paragraph\n\n    \t\t\tmore\tcode\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("indented	code")), paragraph!(plain!("paragraph")), paragraph!(plain!("more	code"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t\t\t\t\t\tindented\tcode\n\n   paragraph\n\n    \t\t\tmore\tcode\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4182
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4182>
/// <https://spec.commonmark.org/0.29/#example-245>
fn t245() {
    init!("   foo\n\nbar\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<p>bar</p>
        [
            paragraph!(plain!("foo")), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("   foo\n\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4182
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4182>
/// <https://spec.commonmark.org/0.29/#example-245>
fn t245_cr() {
    init!("   foo\r\rbar\r");

    assert_eq!(
        // from spec: <p>foo</p>\n<p>bar</p>
        [
            paragraph!(plain!("foo")), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("   foo\r\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4182
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4182>
/// <https://spec.commonmark.org/0.29/#example-245>
fn t245_cr_nl() {
    init!("   foo\r\n\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>foo</p>\n<p>bar</p>
        [
            paragraph!(plain!("foo")), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("   foo\r\n\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4182
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4182>
/// <https://spec.commonmark.org/0.29/#example-245>
fn t245_no_nl() {
    init!("   foo\n\nbar");

    assert_eq!(
        // from spec: <p>foo</p>\n<p>bar</p>
        [
            paragraph!(plain!("foo")), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("   foo\n\nbar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4192
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4192>
/// <https://spec.commonmark.org/0.29/#example-246>
fn t246() {
    init!("-    foo\n\n  bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<p>bar</p>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("-    foo\n\n  bar\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4192
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4192>
/// <https://spec.commonmark.org/0.29/#example-246>
fn t246_cr() {
    init!("-    foo\r\r  bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<p>bar</p>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("-    foo\r\r  bar\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4192
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4192>
/// <https://spec.commonmark.org/0.29/#example-246>
fn t246_cr_nl() {
    init!("-    foo\r\n\r\n  bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<p>bar</p>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("-    foo\r\n\r\n  bar\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4192
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4192>
/// <https://spec.commonmark.org/0.29/#example-246>
fn t246_no_nl() {
    init!("-    foo\n\n  bar");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<p>bar</p>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), paragraph!(plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("-    foo\n\n  bar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4192
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4192>
/// <https://spec.commonmark.org/0.29/#example-246>
fn t246_tab() {
    init!("-\t\t\t\tfoo\n\n  bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>\n<p>bar</p>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))]), paragraph!(plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t\t\t\tfoo\n\n  bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4209>
/// <https://spec.commonmark.org/0.29/#example-247>
fn t247() {
    init!("-  foo\n\n   bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("-  foo\n\n   bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4209>
/// <https://spec.commonmark.org/0.29/#example-247>
fn t247_cr() {
    init!("-  foo\r\r   bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("-  foo\r\r   bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4209>
/// <https://spec.commonmark.org/0.29/#example-247>
fn t247_cr_nl() {
    init!("-  foo\r\n\r\n   bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("-  foo\r\n\r\n   bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4209>
/// <https://spec.commonmark.org/0.29/#example-247>
fn t247_no_nl() {
    init!("-  foo\n\n   bar");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("-  foo\n\n   bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4209>
/// <https://spec.commonmark.org/0.29/#example-247>
fn t247_tab() {
    init!("-\t\tfoo\n\n   bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t\tfoo\n\n   bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4237
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4237>
/// <https://spec.commonmark.org/0.29/#example-248>
fn t248() {
    init!("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![code_block!("", "bar\n")], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4237
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4237>
/// <https://spec.commonmark.org/0.29/#example-248>
fn t248_cr() {
    init!("-\r  foo\r-\r  ```\r  bar\r  ```\r-\r      baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![code_block!("", "bar\r")], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("-\r  foo\r-\r  ```\r  bar\r  ```\r-\r      baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4237
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4237>
/// <https://spec.commonmark.org/0.29/#example-248>
fn t248_cr_nl() {
    init!("-\r\n  foo\r\n-\r\n  ```\r\n  bar\r\n  ```\r\n-\r\n      baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![code_block!("", "bar\r\n")], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("-\r\n  foo\r\n-\r\n  ```\r\n  bar\r\n  ```\r\n-\r\n      baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4237
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4237>
/// <https://spec.commonmark.org/0.29/#example-248>
fn t248_no_nl() {
    init!("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![code_block!("", "bar\n")], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4237
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4237>
/// <https://spec.commonmark.org/0.29/#example-248>
fn t248_tab() {
    init!("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n    \t\tbaz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![code_block!("", "bar\n")], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\n  foo\n-\n  ```\n  bar\n  ```\n-\n    \t\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4263
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4263>
/// <https://spec.commonmark.org/0.29/#example-249>
fn t249() {
    init!("-   \n  foo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-   \n  foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4263
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4263>
/// <https://spec.commonmark.org/0.29/#example-249>
fn t249_cr() {
    init!("-   \r  foo\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-   \r  foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4263
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4263>
/// <https://spec.commonmark.org/0.29/#example-249>
fn t249_cr_nl() {
    init!("-   \r\n  foo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-   \r\n  foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4263
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4263>
/// <https://spec.commonmark.org/0.29/#example-249>
fn t249_no_nl() {
    init!("-   \n  foo");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("-   \n  foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4263
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4263>
/// <https://spec.commonmark.org/0.29/#example-249>
fn t249_tab() {
    init!("-\t  \n  foo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t  \n  foo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4277
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4277>
/// <https://spec.commonmark.org/0.29/#example-250>
fn t250() {
    init!("-\n\n  foo\n");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>\n<p>foo</p>
        [
            unordered_list!(vec![]), paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("-\n\n  foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4277
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4277>
/// <https://spec.commonmark.org/0.29/#example-250>
fn t250_cr() {
    init!("-\r\r  foo\r");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>\n<p>foo</p>
        [
            unordered_list!(vec![]), paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("-\r\r  foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4277
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4277>
/// <https://spec.commonmark.org/0.29/#example-250>
fn t250_cr_nl() {
    init!("-\r\n\r\n  foo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>\n<p>foo</p>
        [
            unordered_list!(vec![]), paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("-\r\n\r\n  foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4277
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4277>
/// <https://spec.commonmark.org/0.29/#example-250>
fn t250_no_nl() {
    init!("-\n\n  foo");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>\n<p>foo</p>
        [
            unordered_list!(vec![]), paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("-\n\n  foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4291>
/// <https://spec.commonmark.org/0.29/#example-251>
fn t251() {
    init!("- foo\n-\n- bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n-\n- bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4291>
/// <https://spec.commonmark.org/0.29/#example-251>
fn t251_cr() {
    init!("- foo\r-\r- bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r-\r- bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4291>
/// <https://spec.commonmark.org/0.29/#example-251>
fn t251_cr_nl() {
    init!("- foo\r\n-\r\n- bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n-\r\n- bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4291>
/// <https://spec.commonmark.org/0.29/#example-251>
fn t251_no_nl() {
    init!("- foo\n-\n- bar");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n-\n- bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4291>
/// <https://spec.commonmark.org/0.29/#example-251>
fn t251_tab() {
    init!("-\tfoo\n-\n-\tbar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n-\n-\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4306
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4306>
/// <https://spec.commonmark.org/0.29/#example-252>
fn t252() {
    init!("- foo\n-   \n- bar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n-   \n- bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4306
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4306>
/// <https://spec.commonmark.org/0.29/#example-252>
fn t252_cr() {
    init!("- foo\r-   \r- bar\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r-   \r- bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4306
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4306>
/// <https://spec.commonmark.org/0.29/#example-252>
fn t252_cr_nl() {
    init!("- foo\r\n-   \r\n- bar\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n-   \r\n- bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4306
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4306>
/// <https://spec.commonmark.org/0.29/#example-252>
fn t252_no_nl() {
    init!("- foo\n-   \n- bar");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n-   \n- bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4306
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4306>
/// <https://spec.commonmark.org/0.29/#example-252>
fn t252_tab() {
    init!("-\tfoo\n-\t  \n-\tbar\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n-\t  \n-\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4321
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4321>
/// <https://spec.commonmark.org/0.29/#example-253>
fn t253() {
    init!("1. foo\n2.\n3. bar\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\n2.\n3. bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4321
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4321>
/// <https://spec.commonmark.org/0.29/#example-253>
fn t253_cr() {
    init!("1. foo\r2.\r3. bar\r");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\r2.\r3. bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4321
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4321>
/// <https://spec.commonmark.org/0.29/#example-253>
fn t253_cr_nl() {
    init!("1. foo\r\n2.\r\n3. bar\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\r\n2.\r\n3. bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4321
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4321>
/// <https://spec.commonmark.org/0.29/#example-253>
fn t253_no_nl() {
    init!("1. foo\n2.\n3. bar");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\n2.\n3. bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4321
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4321>
/// <https://spec.commonmark.org/0.29/#example-253>
fn t253_tab() {
    init!("1.\tfoo\n2.\n3.\tbar\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![], vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\tfoo\n2.\n3.\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4336
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4336>
/// <https://spec.commonmark.org/0.29/#example-254>
fn t254() {
    init!("*\n");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>
        [
            unordered_list!(vec![])
        ].as_slice(),
        body(&mut StringData::new("*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4336
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4336>
/// <https://spec.commonmark.org/0.29/#example-254>
fn t254_cr() {
    init!("*\r");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>
        [
            unordered_list!(vec![])
        ].as_slice(),
        body(&mut StringData::new("*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4336
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4336>
/// <https://spec.commonmark.org/0.29/#example-254>
fn t254_cr_nl() {
    init!("*\r\n");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>
        [
            unordered_list!(vec![])
        ].as_slice(),
        body(&mut StringData::new("*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4336
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4336>
/// <https://spec.commonmark.org/0.29/#example-254>
fn t254_no_nl() {
    init!("*");

    assert_eq!(
        // from spec: <ul>\n<li></li>\n</ul>
        [
            unordered_list!(vec![])
        ].as_slice(),
        body(&mut StringData::new("*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4346
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4346>
/// <https://spec.commonmark.org/0.29/#example-255>
fn t255() {
    init!("foo\n*\n\nfoo\n1.\n");

    assert_eq!(
        // from spec: <p>foo\n*</p>\n<p>foo\n1.</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("*")), paragraph!(plain!("foo"), SoftBreak, plain!("1."))
        ].as_slice(),
        body(&mut StringData::new("foo\n*\n\nfoo\n1.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4346
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4346>
/// <https://spec.commonmark.org/0.29/#example-255>
fn t255_cr() {
    init!("foo\r*\r\rfoo\r1.\r");

    assert_eq!(
        // from spec: <p>foo\n*</p>\n<p>foo\n1.</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("*")), paragraph!(plain!("foo"), SoftBreak, plain!("1."))
        ].as_slice(),
        body(&mut StringData::new("foo\r*\r\rfoo\r1.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4346
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4346>
/// <https://spec.commonmark.org/0.29/#example-255>
fn t255_cr_nl() {
    init!("foo\r\n*\r\n\r\nfoo\r\n1.\r\n");

    assert_eq!(
        // from spec: <p>foo\n*</p>\n<p>foo\n1.</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("*")), paragraph!(plain!("foo"), SoftBreak, plain!("1."))
        ].as_slice(),
        body(&mut StringData::new("foo\r\n*\r\n\r\nfoo\r\n1.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4346
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4346>
/// <https://spec.commonmark.org/0.29/#example-255>
fn t255_no_nl() {
    init!("foo\n*\n\nfoo\n1.");

    assert_eq!(
        // from spec: <p>foo\n*</p>\n<p>foo\n1.</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("*")), paragraph!(plain!("foo"), SoftBreak, plain!("1."))
        ].as_slice(),
        body(&mut StringData::new("foo\n*\n\nfoo\n1.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4368
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4368>
/// <https://spec.commonmark.org/0.29/#example-256>
fn t256() {
    init!(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4368
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4368>
/// <https://spec.commonmark.org/0.29/#example-256>
fn t256_cr() {
    init!(" 1.  A paragraph\r     with two lines.\r\r         indented code\r\r     > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new(" 1.  A paragraph\r     with two lines.\r\r         indented code\r\r     > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4368
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4368>
/// <https://spec.commonmark.org/0.29/#example-256>
fn t256_cr_nl() {
    init!(" 1.  A paragraph\r\n     with two lines.\r\n\r\n         indented code\r\n\r\n     > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new(" 1.  A paragraph\r\n     with two lines.\r\n\r\n         indented code\r\n\r\n     > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4368
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4368>
/// <https://spec.commonmark.org/0.29/#example-256>
fn t256_no_nl() {
    init!(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new(" 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4368
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4368>
/// <https://spec.commonmark.org/0.29/#example-256>
fn t256_tab() {
    init!(" 1.\t\tA\tparagraph\n    \twith\ttwo\tlines.\n\n    \t\t\t\t\tindented\tcode\n\n    \t>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new(" 1.\t\tA\tparagraph\n    \twith\ttwo\tlines.\n\n    \t\t\t\t\tindented\tcode\n\n    \t>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4392>
/// <https://spec.commonmark.org/0.29/#example-257>
fn t257() {
    init!("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4392>
/// <https://spec.commonmark.org/0.29/#example-257>
fn t257_cr() {
    init!("  1.  A paragraph\r      with two lines.\r\r          indented code\r\r      > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\r      with two lines.\r\r          indented code\r\r      > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4392>
/// <https://spec.commonmark.org/0.29/#example-257>
fn t257_cr_nl() {
    init!("  1.  A paragraph\r\n      with two lines.\r\n\r\n          indented code\r\n\r\n      > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\r\n      with two lines.\r\n\r\n          indented code\r\n\r\n      > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4392>
/// <https://spec.commonmark.org/0.29/#example-257>
fn t257_no_nl() {
    init!("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4392>
/// <https://spec.commonmark.org/0.29/#example-257>
fn t257_tab() {
    init!("  1.\t\tA\tparagraph\n    \t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\tindented\tcode\n\n    \t\t>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  1.\t\tA\tparagraph\n    \t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\tindented\tcode\n\n    \t\t>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4416
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4416>
/// <https://spec.commonmark.org/0.29/#example-258>
fn t258() {
    init!("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4416
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4416>
/// <https://spec.commonmark.org/0.29/#example-258>
fn t258_cr() {
    init!("   1.  A paragraph\r       with two lines.\r\r           indented code\r\r       > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("   1.  A paragraph\r       with two lines.\r\r           indented code\r\r       > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4416
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4416>
/// <https://spec.commonmark.org/0.29/#example-258>
fn t258_cr_nl() {
    init!("   1.  A paragraph\r\n       with two lines.\r\n\r\n           indented code\r\n\r\n       > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("   1.  A paragraph\r\n       with two lines.\r\n\r\n           indented code\r\n\r\n       > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4416
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4416>
/// <https://spec.commonmark.org/0.29/#example-258>
fn t258_no_nl() {
    init!("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4416
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4416>
/// <https://spec.commonmark.org/0.29/#example-258>
fn t258_tab() {
    init!("   1.\t\tA\tparagraph\n    \t\t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\t\tindented\tcode\n\n    \t\t\t>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("   1.\t\tA\tparagraph\n    \t\t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\t\tindented\tcode\n\n    \t\t\t>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4440
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4440>
/// <https://spec.commonmark.org/0.29/#example-259>
fn t259() {
    init!("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4440
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4440>
/// <https://spec.commonmark.org/0.29/#example-259>
fn t259_cr() {
    init!("    1.  A paragraph\r        with two lines.\r\r            indented code\r\r        > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("    1.  A paragraph\r        with two lines.\r\r            indented code\r\r        > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4440
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4440>
/// <https://spec.commonmark.org/0.29/#example-259>
fn t259_cr_nl() {
    init!("    1.  A paragraph\r\n        with two lines.\r\n\r\n            indented code\r\n\r\n        > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("    1.  A paragraph\r\n        with two lines.\r\n\r\n            indented code\r\n\r\n        > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4440
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4440>
/// <https://spec.commonmark.org/0.29/#example-259>
fn t259_no_nl() {
    init!("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), paragraph!(plain!("indented code")), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4440
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4440>
/// <https://spec.commonmark.org/0.29/#example-259>
fn t259_tab() {
    init!("    1.\t\tA\tparagraph\n    \t\t\t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\t\t\tindented\tcode\n\n    \t\t\t\t>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<p>indented code</p>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), paragraph!(plain!("indented	code")), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("    1.\t\tA\tparagraph\n    \t\t\t\twith\ttwo\tlines.\n\n    \t\t\t\t\t\t\t\tindented\tcode\n\n    \t\t\t\t>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4470
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4470>
/// <https://spec.commonmark.org/0.29/#example-260>
fn t260() {
    init!("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), code_block!("", "indented code\n"), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4470
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4470>
/// <https://spec.commonmark.org/0.29/#example-260>
fn t260_cr() {
    init!("  1.  A paragraph\rwith two lines.\r\r          indented code\r\r      > A block quote.\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), code_block!("", "indented code\r"), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\rwith two lines.\r\r          indented code\r\r      > A block quote.\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4470
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4470>
/// <https://spec.commonmark.org/0.29/#example-260>
fn t260_cr_nl() {
    init!("  1.  A paragraph\r\nwith two lines.\r\n\r\n          indented code\r\n\r\n      > A block quote.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), code_block!("", "indented code\r\n"), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\r\nwith two lines.\r\n\r\n          indented code\r\n\r\n      > A block quote.\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4470
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4470>
/// <https://spec.commonmark.org/0.29/#example-260>
fn t260_no_nl() {
    init!("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines.")), code_block!("", "indented code\n"), quote!(paragraph!(plain!("A block quote.")))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4470
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4470>
/// <https://spec.commonmark.org/0.29/#example-260>
fn t260_tab() {
    init!("  1.\t\tA\tparagraph\nwith\ttwo\tlines.\n\n    \t\t\t\t\t\tindented\tcode\n\n    \t\t>\tA\tblock\tquote.\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines.")), code_block!("", "indented\tcode\n"), quote!(paragraph!(plain!("A	block	quote.")))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  1.\t\tA\tparagraph\nwith\ttwo\tlines.\n\n    \t\t\t\t\t\tindented\tcode\n\n    \t\t>\tA\tblock\tquote.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4494
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4494>
/// <https://spec.commonmark.org/0.29/#example-261>
fn t261() {
    init!("  1.  A paragraph\n    with two lines.\n");

    assert_eq!(
        // from spec: <ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines."))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\n    with two lines.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4494
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4494>
/// <https://spec.commonmark.org/0.29/#example-261>
fn t261_cr() {
    init!("  1.  A paragraph\r    with two lines.\r");

    assert_eq!(
        // from spec: <ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines."))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\r    with two lines.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4494
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4494>
/// <https://spec.commonmark.org/0.29/#example-261>
fn t261_cr_nl() {
    init!("  1.  A paragraph\r\n    with two lines.\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines."))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\r\n    with two lines.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4494
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4494>
/// <https://spec.commonmark.org/0.29/#example-261>
fn t261_no_nl() {
    init!("  1.  A paragraph\n    with two lines.");

    assert_eq!(
        // from spec: <ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A paragraph"), SoftBreak, plain!("with two lines."))])
        ].as_slice(),
        body(&mut StringData::new("  1.  A paragraph\n    with two lines.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4494
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4494>
/// <https://spec.commonmark.org/0.29/#example-261>
fn t261_tab() {
    init!("  1.\t\tA\tparagraph\n    with\ttwo\tlines.\n");

    assert_eq!(
        // from spec: <ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("A	paragraph"), SoftBreak, plain!("with	two	lines."))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("  1.\t\tA\tparagraph\n    with\ttwo\tlines.\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4507
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4507>
/// <https://spec.commonmark.org/0.29/#example-262>
fn t262() {
    init!("> 1. > Blockquote\ncontinued here.\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\ncontinued here.\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4507
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4507>
/// <https://spec.commonmark.org/0.29/#example-262>
fn t262_cr() {
    init!("> 1. > Blockquote\rcontinued here.\r");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\rcontinued here.\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4507
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4507>
/// <https://spec.commonmark.org/0.29/#example-262>
fn t262_cr_nl() {
    init!("> 1. > Blockquote\r\ncontinued here.\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\r\ncontinued here.\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4507
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4507>
/// <https://spec.commonmark.org/0.29/#example-262>
fn t262_no_nl() {
    init!("> 1. > Blockquote\ncontinued here.");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\ncontinued here.", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4507
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4507>
/// <https://spec.commonmark.org/0.29/#example-262>
fn t262_tab() {
    init!(">\t1.\t>\tBlockquote\ncontinued\there.\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued	here.")))]))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t1.\t>\tBlockquote\ncontinued\there.\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4524>
/// <https://spec.commonmark.org/0.29/#example-263>
fn t263() {
    init!("> 1. > Blockquote\n> continued here.\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\n> continued here.\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4524>
/// <https://spec.commonmark.org/0.29/#example-263>
fn t263_cr() {
    init!("> 1. > Blockquote\r> continued here.\r");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\r> continued here.\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4524>
/// <https://spec.commonmark.org/0.29/#example-263>
fn t263_cr_nl() {
    init!("> 1. > Blockquote\r\n> continued here.\r\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\r\n> continued here.\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4524>
/// <https://spec.commonmark.org/0.29/#example-263>
fn t263_no_nl() {
    init!("> 1. > Blockquote\n> continued here.");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued here.")))]))
        ].as_slice(),
        body(&mut StringData::new("> 1. > Blockquote\n> continued here.", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4524
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4524>
/// <https://spec.commonmark.org/0.29/#example-263>
fn t263_tab() {
    init!(">\t1.\t>\tBlockquote\n>\tcontinued\there.\n");

    assert_eq!(
        // from spec: <blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>
        [
            quote!(ordered_list!(vec![quote!(paragraph!(plain!("Blockquote"), SoftBreak, plain!("continued	here.")))]))
        ].as_slice(),
        space2tab(body(&mut StringData::new(">\t1.\t>\tBlockquote\n>\tcontinued\there.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4552>
/// <https://spec.commonmark.org/0.29/#example-264>
fn t264() {
    init!("- foo\n  - bar\n    - baz\n      - boo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), unordered_list!(vec![paragraph!(plain!("boo"))])])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\n  - bar\n    - baz\n      - boo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4552>
/// <https://spec.commonmark.org/0.29/#example-264>
fn t264_cr() {
    init!("- foo\r  - bar\r    - baz\r      - boo\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), unordered_list!(vec![paragraph!(plain!("boo"))])])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\r  - bar\r    - baz\r      - boo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4552>
/// <https://spec.commonmark.org/0.29/#example-264>
fn t264_cr_nl() {
    init!("- foo\r\n  - bar\r\n    - baz\r\n      - boo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), unordered_list!(vec![paragraph!(plain!("boo"))])])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n  - bar\r\n    - baz\r\n      - boo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4552>
/// <https://spec.commonmark.org/0.29/#example-264>
fn t264_no_nl() {
    init!("- foo\n  - bar\n    - baz\n      - boo");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), unordered_list!(vec![paragraph!(plain!("boo"))])])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\n  - bar\n    - baz\n      - boo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4552>
/// <https://spec.commonmark.org/0.29/#example-264>
fn t264_tab() {
    init!("-\tfoo\n  -\tbar\n    -\tbaz\n    \t\t-\tboo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), unordered_list!(vec![paragraph!(plain!("boo"))])])])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n  -\tbar\n    -\tbaz\n    \t\t-\tboo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4578
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4578>
/// <https://spec.commonmark.org/0.29/#example-265>
fn t265() {
    init!("- foo\n - bar\n  - baz\n   - boo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("boo"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n - bar\n  - baz\n   - boo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4578
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4578>
/// <https://spec.commonmark.org/0.29/#example-265>
fn t265_cr() {
    init!("- foo\r - bar\r  - baz\r   - boo\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("boo"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r - bar\r  - baz\r   - boo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4578
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4578>
/// <https://spec.commonmark.org/0.29/#example-265>
fn t265_cr_nl() {
    init!("- foo\r\n - bar\r\n  - baz\r\n   - boo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("boo"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n - bar\r\n  - baz\r\n   - boo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4578
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4578>
/// <https://spec.commonmark.org/0.29/#example-265>
fn t265_no_nl() {
    init!("- foo\n - bar\n  - baz\n   - boo");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("boo"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n - bar\n  - baz\n   - boo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4578
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4578>
/// <https://spec.commonmark.org/0.29/#example-265>
fn t265_tab() {
    init!("-\tfoo\n -\tbar\n  -\tbaz\n   -\tboo\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("boo"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n -\tbar\n  -\tbaz\n   -\tboo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4595
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4595>
/// <https://spec.commonmark.org/0.29/#example-266>
fn t266() {
    init!("10) foo\n    - bar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("10) foo\n    - bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4595
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4595>
/// <https://spec.commonmark.org/0.29/#example-266>
fn t266_cr() {
    init!("10) foo\r    - bar\r");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("10) foo\r    - bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4595
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4595>
/// <https://spec.commonmark.org/0.29/#example-266>
fn t266_cr_nl() {
    init!("10) foo\r\n    - bar\r\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("10) foo\r\n    - bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4595
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4595>
/// <https://spec.commonmark.org/0.29/#example-266>
fn t266_no_nl() {
    init!("10) foo\n    - bar");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        body(&mut StringData::new("10) foo\n    - bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4595
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4595>
/// <https://spec.commonmark.org/0.29/#example-266>
fn t266_tab() {
    init!("10)\tfoo\n    -\tbar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("10)\tfoo\n    -\tbar\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4611>
/// <https://spec.commonmark.org/0.29/#example-267>
fn t267() {
    init!("10) foo\n   - bar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo"))]), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("10) foo\n   - bar\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4611>
/// <https://spec.commonmark.org/0.29/#example-267>
fn t267_cr() {
    init!("10) foo\r   - bar\r");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo"))]), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("10) foo\r   - bar\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4611>
/// <https://spec.commonmark.org/0.29/#example-267>
fn t267_cr_nl() {
    init!("10) foo\r\n   - bar\r\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo"))]), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("10) foo\r\n   - bar\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4611>
/// <https://spec.commonmark.org/0.29/#example-267>
fn t267_no_nl() {
    init!("10) foo\n   - bar");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo"))]), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("10) foo\n   - bar", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4611>
/// <https://spec.commonmark.org/0.29/#example-267>
fn t267_tab() {
    init!("10)\tfoo\n   -\tbar\n");

    assert_eq!(
        // from spec: <ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>
        [
            ordered_list!("10", vec![paragraph!(plain!("foo"))]), unordered_list!(vec![paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("10)\tfoo\n   -\tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4626
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4626>
/// <https://spec.commonmark.org/0.29/#example-268>
fn t268() {
    init!("- - foo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![unordered_list!(vec![paragraph!(plain!("foo"))])])
        ].as_slice(),
        body(&mut StringData::new("- - foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4626
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4626>
/// <https://spec.commonmark.org/0.29/#example-268>
fn t268_cr() {
    init!("- - foo\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![unordered_list!(vec![paragraph!(plain!("foo"))])])
        ].as_slice(),
        body(&mut StringData::new("- - foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4626
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4626>
/// <https://spec.commonmark.org/0.29/#example-268>
fn t268_cr_nl() {
    init!("- - foo\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![unordered_list!(vec![paragraph!(plain!("foo"))])])
        ].as_slice(),
        body(&mut StringData::new("- - foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4626
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4626>
/// <https://spec.commonmark.org/0.29/#example-268>
fn t268_no_nl() {
    init!("- - foo");

    assert_eq!(
        // from spec: <ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![unordered_list!(vec![paragraph!(plain!("foo"))])])
        ].as_slice(),
        body(&mut StringData::new("- - foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4626
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4626>
/// <https://spec.commonmark.org/0.29/#example-268>
fn t268_tab() {
    init!("-\t-\tfoo\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![unordered_list!(vec![paragraph!(plain!("foo"))])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t-\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4639>
/// <https://spec.commonmark.org/0.29/#example-269>
fn t269() {
    init!("1. - 2. foo\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![unordered_list!(vec![ordered_list!("2", vec![paragraph!(plain!("foo"))])])])
        ].as_slice(),
        body(&mut StringData::new("1. - 2. foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4639>
/// <https://spec.commonmark.org/0.29/#example-269>
fn t269_cr() {
    init!("1. - 2. foo\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![unordered_list!(vec![ordered_list!("2", vec![paragraph!(plain!("foo"))])])])
        ].as_slice(),
        body(&mut StringData::new("1. - 2. foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4639>
/// <https://spec.commonmark.org/0.29/#example-269>
fn t269_cr_nl() {
    init!("1. - 2. foo\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![unordered_list!(vec![ordered_list!("2", vec![paragraph!(plain!("foo"))])])])
        ].as_slice(),
        body(&mut StringData::new("1. - 2. foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4639>
/// <https://spec.commonmark.org/0.29/#example-269>
fn t269_no_nl() {
    init!("1. - 2. foo");

    assert_eq!(
        // from spec: <ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![unordered_list!(vec![ordered_list!("2", vec![paragraph!(plain!("foo"))])])])
        ].as_slice(),
        body(&mut StringData::new("1. - 2. foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4639
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4639>
/// <https://spec.commonmark.org/0.29/#example-269>
fn t269_tab() {
    init!("1.\t-\t2.\tfoo\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>
        [
            ordered_list!(vec![unordered_list!(vec![ordered_list!("2", vec![paragraph!(plain!("foo"))])])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t-\t2.\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4658
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4658>
/// <https://spec.commonmark.org/0.29/#example-270>
fn t270() {
    init!("- # Foo\n- Bar\n  ---\n  baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<p>Bar</p>\n<hr />\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![heading!(1, plain!("Foo"))], vec![paragraph!(plain!("Bar")), Break, paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- # Foo\n- Bar\n  ---\n  baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4658
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4658>
/// <https://spec.commonmark.org/0.29/#example-270>
fn t270_cr() {
    init!("- # Foo\r- Bar\r  ---\r  baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<p>Bar</p>\n<hr />\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![heading!(1, plain!("Foo"))], vec![paragraph!(plain!("Bar")), Break, paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- # Foo\r- Bar\r  ---\r  baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4658
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4658>
/// <https://spec.commonmark.org/0.29/#example-270>
fn t270_cr_nl() {
    init!("- # Foo\r\n- Bar\r\n  ---\r\n  baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<p>Bar</p>\n<hr />\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![heading!(1, plain!("Foo"))], vec![paragraph!(plain!("Bar")), Break, paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- # Foo\r\n- Bar\r\n  ---\r\n  baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4658
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4658>
/// <https://spec.commonmark.org/0.29/#example-270>
fn t270_no_nl() {
    init!("- # Foo\n- Bar\n  ---\n  baz");

    assert_eq!(
        // from spec: <ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<p>Bar</p>\n<hr />\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![heading!(1, plain!("Foo"))], vec![paragraph!(plain!("Bar")), Break, paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- # Foo\n- Bar\n  ---\n  baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4658
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4658>
/// <https://spec.commonmark.org/0.29/#example-270>
fn t270_tab() {
    init!("-\t#\tFoo\n-\tBar\n  ---\n  baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<p>Bar</p>\n<hr />\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![heading!(1, plain!("Foo"))], vec![paragraph!(plain!("Bar")), Break, paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t#\tFoo\n-\tBar\n  ---\n  baz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4894>
/// <https://spec.commonmark.org/0.29/#example-271>
fn t271() {
    init!("- foo\n- bar\n+ baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), unordered_list!(vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n- bar\n+ baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4894>
/// <https://spec.commonmark.org/0.29/#example-271>
fn t271_cr() {
    init!("- foo\r- bar\r+ baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), unordered_list!(vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r- bar\r+ baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4894>
/// <https://spec.commonmark.org/0.29/#example-271>
fn t271_cr_nl() {
    init!("- foo\r\n- bar\r\n+ baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), unordered_list!(vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n- bar\r\n+ baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4894>
/// <https://spec.commonmark.org/0.29/#example-271>
fn t271_no_nl() {
    init!("- foo\n- bar\n+ baz");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), unordered_list!(vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n- bar\n+ baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4894>
/// <https://spec.commonmark.org/0.29/#example-271>
fn t271_tab() {
    init!("-\tfoo\n-\tbar\n+\tbaz\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), unordered_list!(vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n-\tbar\n+\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4909
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4909>
/// <https://spec.commonmark.org/0.29/#example-272>
fn t272() {
    init!("1. foo\n2. bar\n3) baz\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), ordered_list!("3", vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\n2. bar\n3) baz\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4909
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4909>
/// <https://spec.commonmark.org/0.29/#example-272>
fn t272_cr() {
    init!("1. foo\r2. bar\r3) baz\r");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), ordered_list!("3", vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\r2. bar\r3) baz\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4909
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4909>
/// <https://spec.commonmark.org/0.29/#example-272>
fn t272_cr_nl() {
    init!("1. foo\r\n2. bar\r\n3) baz\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), ordered_list!("3", vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\r\n2. bar\r\n3) baz\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4909
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4909>
/// <https://spec.commonmark.org/0.29/#example-272>
fn t272_no_nl() {
    init!("1. foo\n2. bar\n3) baz");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), ordered_list!("3", vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("1. foo\n2. bar\n3) baz", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 4909
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4909>
/// <https://spec.commonmark.org/0.29/#example-272>
fn t272_tab() {
    init!("1.\tfoo\n2.\tbar\n3)\tbaz\n");

    assert_eq!(
        // from spec: <ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), ordered_list!("3", vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\tfoo\n2.\tbar\n3)\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4928>
/// <https://spec.commonmark.org/0.29/#example-273>
fn t273() {
    init!("Foo\n- bar\n- baz\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>
        [
            paragraph!(plain!("Foo")), unordered_list!(vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("Foo\n- bar\n- baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4928>
/// <https://spec.commonmark.org/0.29/#example-273>
fn t273_cr() {
    init!("Foo\r- bar\r- baz\r");

    assert_eq!(
        // from spec: <p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>
        [
            paragraph!(plain!("Foo")), unordered_list!(vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("Foo\r- bar\r- baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4928>
/// <https://spec.commonmark.org/0.29/#example-273>
fn t273_cr_nl() {
    init!("Foo\r\n- bar\r\n- baz\r\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>
        [
            paragraph!(plain!("Foo")), unordered_list!(vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("Foo\r\n- bar\r\n- baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4928>
/// <https://spec.commonmark.org/0.29/#example-273>
fn t273_no_nl() {
    init!("Foo\n- bar\n- baz");

    assert_eq!(
        // from spec: <p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>
        [
            paragraph!(plain!("Foo")), unordered_list!(vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("Foo\n- bar\n- baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 4928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L4928>
/// <https://spec.commonmark.org/0.29/#example-273>
fn t273_tab() {
    init!("Foo\n-\tbar\n-\tbaz\n");

    assert_eq!(
        // from spec: <p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>
        [
            paragraph!(plain!("Foo")), unordered_list!(vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\n-\tbar\n-\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5005>
/// <https://spec.commonmark.org/0.29/#example-274>
fn t274() {
    init!("The number of windows in my house is\n14.  The number of doors is 6.\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is\n14.  The number of doors is 6.</p>
        [
            paragraph!(plain!("The number of windows in my house is"), SoftBreak, plain!("14.  The number of doors is 6."))
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\n14.  The number of doors is 6.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5005>
/// <https://spec.commonmark.org/0.29/#example-274>
fn t274_cr() {
    init!("The number of windows in my house is\r14.  The number of doors is 6.\r");

    assert_eq!(
        // from spec: <p>The number of windows in my house is\n14.  The number of doors is 6.</p>
        [
            paragraph!(plain!("The number of windows in my house is"), SoftBreak, plain!("14.  The number of doors is 6."))
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\r14.  The number of doors is 6.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5005>
/// <https://spec.commonmark.org/0.29/#example-274>
fn t274_cr_nl() {
    init!("The number of windows in my house is\r\n14.  The number of doors is 6.\r\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is\n14.  The number of doors is 6.</p>
        [
            paragraph!(plain!("The number of windows in my house is"), SoftBreak, plain!("14.  The number of doors is 6."))
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\r\n14.  The number of doors is 6.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5005>
/// <https://spec.commonmark.org/0.29/#example-274>
fn t274_no_nl() {
    init!("The number of windows in my house is\n14.  The number of doors is 6.");

    assert_eq!(
        // from spec: <p>The number of windows in my house is\n14.  The number of doors is 6.</p>
        [
            paragraph!(plain!("The number of windows in my house is"), SoftBreak, plain!("14.  The number of doors is 6."))
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\n14.  The number of doors is 6.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5005
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5005>
/// <https://spec.commonmark.org/0.29/#example-274>
fn t274_tab() {
    init!("The\tnumber\tof\twindows\tin\tmy\thouse\tis\n14.\t\tThe\tnumber\tof\tdoors\tis\t6.\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is\n14.  The number of doors is 6.</p>
        [
            paragraph!(plain!("The	number	of	windows	in	my	house	is"), SoftBreak, plain!("14.		The	number	of	doors	is	6."))
        ].as_slice(),
        space2tab(body(&mut StringData::new("The\tnumber\tof\twindows\tin\tmy\thouse\tis\n14.\t\tThe\tnumber\tof\tdoors\tis\t6.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5015
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5015>
/// <https://spec.commonmark.org/0.29/#example-275>
fn t275() {
    init!("The number of windows in my house is\n1.  The number of doors is 6.\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>
        [
            paragraph!(plain!("The number of windows in my house is")), ordered_list!(vec![paragraph!(plain!("The number of doors is 6."))])
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\n1.  The number of doors is 6.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5015
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5015>
/// <https://spec.commonmark.org/0.29/#example-275>
fn t275_cr() {
    init!("The number of windows in my house is\r1.  The number of doors is 6.\r");

    assert_eq!(
        // from spec: <p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>
        [
            paragraph!(plain!("The number of windows in my house is")), ordered_list!(vec![paragraph!(plain!("The number of doors is 6."))])
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\r1.  The number of doors is 6.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5015
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5015>
/// <https://spec.commonmark.org/0.29/#example-275>
fn t275_cr_nl() {
    init!("The number of windows in my house is\r\n1.  The number of doors is 6.\r\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>
        [
            paragraph!(plain!("The number of windows in my house is")), ordered_list!(vec![paragraph!(plain!("The number of doors is 6."))])
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\r\n1.  The number of doors is 6.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5015
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5015>
/// <https://spec.commonmark.org/0.29/#example-275>
fn t275_no_nl() {
    init!("The number of windows in my house is\n1.  The number of doors is 6.");

    assert_eq!(
        // from spec: <p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>
        [
            paragraph!(plain!("The number of windows in my house is")), ordered_list!(vec![paragraph!(plain!("The number of doors is 6."))])
        ].as_slice(),
        body(&mut StringData::new("The number of windows in my house is\n1.  The number of doors is 6.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5015
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5015>
/// <https://spec.commonmark.org/0.29/#example-275>
fn t275_tab() {
    init!("The\tnumber\tof\twindows\tin\tmy\thouse\tis\n1.\t\tThe\tnumber\tof\tdoors\tis\t6.\n");

    assert_eq!(
        // from spec: <p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>
        [
            paragraph!(plain!("The	number	of	windows	in	my	house	is")), ordered_list!(vec![paragraph!(plain!("The	number	of	doors	is	6."))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("The\tnumber\tof\twindows\tin\tmy\thouse\tis\n1.\t\tThe\tnumber\tof\tdoors\tis\t6.\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5029
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5029>
/// <https://spec.commonmark.org/0.29/#example-276>
fn t276() {
    init!("- foo\n\n- bar\n\n\n- baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n- bar\n\n\n- baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5029
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5029>
/// <https://spec.commonmark.org/0.29/#example-276>
fn t276_cr() {
    init!("- foo\r\r- bar\r\r\r- baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\r- bar\r\r\r- baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5029
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5029>
/// <https://spec.commonmark.org/0.29/#example-276>
fn t276_cr_nl() {
    init!("- foo\r\n\r\n- bar\r\n\r\n\r\n- baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n\r\n- bar\r\n\r\n\r\n- baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5029
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5029>
/// <https://spec.commonmark.org/0.29/#example-276>
fn t276_no_nl() {
    init!("- foo\n\n- bar\n\n\n- baz");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n\n- bar\n\n\n- baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5029
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5029>
/// <https://spec.commonmark.org/0.29/#example-276>
fn t276_tab() {
    init!("-\tfoo\n\n-\tbar\n\n\n-\tbaz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))], vec![paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n\n-\tbar\n\n\n-\tbaz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5050>
/// <https://spec.commonmark.org/0.29/#example-277>
fn t277() {
    init!("- foo\n  - bar\n    - baz\n\n\n      bim\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), paragraph!(plain!("bim"))])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\n  - bar\n    - baz\n\n\n      bim\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5050>
/// <https://spec.commonmark.org/0.29/#example-277>
fn t277_cr() {
    init!("- foo\r  - bar\r    - baz\r\r\r      bim\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), paragraph!(plain!("bim"))])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\r  - bar\r    - baz\r\r\r      bim\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5050>
/// <https://spec.commonmark.org/0.29/#example-277>
fn t277_cr_nl() {
    init!("- foo\r\n  - bar\r\n    - baz\r\n\r\n\r\n      bim\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), paragraph!(plain!("bim"))])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n  - bar\r\n    - baz\r\n\r\n\r\n      bim\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5050>
/// <https://spec.commonmark.org/0.29/#example-277>
fn t277_no_nl() {
    init!("- foo\n  - bar\n    - baz\n\n\n      bim");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), paragraph!(plain!("bim"))])])])
        ].as_slice(),
        body(&mut StringData::new("- foo\n  - bar\n    - baz\n\n\n      bim", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5050>
/// <https://spec.commonmark.org/0.29/#example-277>
fn t277_tab() {
    init!("-\tfoo\n  -\tbar\n    -\tbaz\n\n\n    \t\tbim\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar")), unordered_list!(vec![paragraph!(plain!("baz")), paragraph!(plain!("bim"))])])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n  -\tbar\n    -\tbaz\n\n\n    \t\tbim\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5080
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5080>
/// <https://spec.commonmark.org/0.29/#example-278>
fn t278() {
    init!("- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), html_block!("<!-- -->\n"), unordered_list!(vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("bim"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5080
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5080>
/// <https://spec.commonmark.org/0.29/#example-278>
fn t278_cr() {
    init!("- foo\r- bar\r\r<!-- -->\r\r- baz\r- bim\r");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), html_block!("<!-- -->\r"), unordered_list!(vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("bim"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r- bar\r\r<!-- -->\r\r- baz\r- bim\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5080
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5080>
/// <https://spec.commonmark.org/0.29/#example-278>
fn t278_cr_nl() {
    init!("- foo\r\n- bar\r\n\r\n<!-- -->\r\n\r\n- baz\r\n- bim\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), html_block!("<!-- -->\r\n"), unordered_list!(vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("bim"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\r\n- bar\r\n\r\n<!-- -->\r\n\r\n- baz\r\n- bim\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5080
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5080>
/// <https://spec.commonmark.org/0.29/#example-278>
fn t278_no_nl() {
    init!("- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), html_block!("<!-- -->\n"), unordered_list!(vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("bim"))])
        ].as_slice(),
        body(&mut StringData::new("- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5080
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5080>
/// <https://spec.commonmark.org/0.29/#example-278>
fn t278_tab() {
    init!("-\tfoo\n-\tbar\n\n<!--\t-->\n\n-\tbaz\n-\tbim\n");

    assert_eq!(
        // from spec: <ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo"))], vec![paragraph!(plain!("bar"))]), html_block!("<!--\t-->\n"), unordered_list!(vec![paragraph!(plain!("baz"))], vec![paragraph!(plain!("bim"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\tfoo\n-\tbar\n\n<!--\t-->\n\n-\tbaz\n-\tbim\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5101
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5101>
/// <https://spec.commonmark.org/0.29/#example-279>
fn t279() {
    init!("-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>
        [
            unordered_list!(
              vec![
                paragraph!(plain!("foo")),
                paragraph!(plain!("notcode"))
              ],
              vec![paragraph!(plain!("foo"))]
            ),
            html_block!("<!-- -->\n"),
            paragraph!(plain!("code"))
        ].as_slice(),
        body(&mut StringData::new("-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5101
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5101>
/// <https://spec.commonmark.org/0.29/#example-279>
fn t279_cr() {
    init!("-   foo\r\r    notcode\r\r-   foo\r\r<!-- -->\r\r    code\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>
        [
            unordered_list!(
              vec![
                paragraph!(plain!("foo")),
                paragraph!(plain!("notcode"))
              ],
              vec![paragraph!(plain!("foo"))]
            ),
            html_block!("<!-- -->\r"),
            paragraph!(plain!("code"))
        ].as_slice(),
        body(&mut StringData::new("-   foo\r\r    notcode\r\r-   foo\r\r<!-- -->\r\r    code\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5101
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5101>
/// <https://spec.commonmark.org/0.29/#example-279>
fn t279_cr_nl() {
    init!("-   foo\r\n\r\n    notcode\r\n\r\n-   foo\r\n\r\n<!-- -->\r\n\r\n    code\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>
        [
            unordered_list!(
              vec![
                paragraph!(plain!("foo")),
                paragraph!(plain!("notcode"))
              ],
              vec![paragraph!(plain!("foo"))]
            ),
            html_block!("<!-- -->\r\n"),
            paragraph!(plain!("code"))
        ].as_slice(),
        body(&mut StringData::new("-   foo\r\n\r\n    notcode\r\n\r\n-   foo\r\n\r\n<!-- -->\r\n\r\n    code\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5101
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5101>
/// <https://spec.commonmark.org/0.29/#example-279>
fn t279_no_nl() {
    init!("-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>
        [
            unordered_list!(
              vec![
                paragraph!(plain!("foo")),
                paragraph!(plain!("notcode"))
              ],
              vec![paragraph!(plain!("foo"))]
            ),
            html_block!("<!-- -->\n"),
            paragraph!(plain!("code"))
        ].as_slice(),
        body(&mut StringData::new("-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5101
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5101>
/// <https://spec.commonmark.org/0.29/#example-279>
fn t279_tab() {
    init!("-\t\t\tfoo\n\n    notcode\n\n-\t\t\tfoo\n\n<!--\t-->\n\n    code\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>
        [
            unordered_list!(
            		vec![
            				paragraph!(plain!("foo")),
            				paragraph!(plain!("notcode"))
            		],
            		vec![paragraph!(plain!("foo"))]
            ),
            html_block!("<!--	-->\n"),
            paragraph!(plain!("code"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\t\t\tfoo\n\n    notcode\n\n-\t\t\tfoo\n\n<!--\t-->\n\n    code\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5132
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5132>
/// <https://spec.commonmark.org/0.29/#example-280>
fn t280() {
    init!("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))], vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))], vec![paragraph!(plain!("g"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5132
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5132>
/// <https://spec.commonmark.org/0.29/#example-280>
fn t280_cr() {
    init!("- a\r - b\r  - c\r   - d\r  - e\r - f\r- g\r");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))], vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))], vec![paragraph!(plain!("g"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r - b\r  - c\r   - d\r  - e\r - f\r- g\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5132
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5132>
/// <https://spec.commonmark.org/0.29/#example-280>
fn t280_cr_nl() {
    init!("- a\r\n - b\r\n  - c\r\n   - d\r\n  - e\r\n - f\r\n- g\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))], vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))], vec![paragraph!(plain!("g"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n - b\r\n  - c\r\n   - d\r\n  - e\r\n - f\r\n- g\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5132
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5132>
/// <https://spec.commonmark.org/0.29/#example-280>
fn t280_no_nl() {
    init!("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))], vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))], vec![paragraph!(plain!("g"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n - b\n  - c\n   - d\n  - e\n - f\n- g", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5132
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5132>
/// <https://spec.commonmark.org/0.29/#example-280>
fn t280_tab() {
    init!("-\ta\n -\tb\n  -\tc\n   -\td\n  -\te\n -\tf\n-\tg\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))], vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))], vec![paragraph!(plain!("g"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n -\tb\n  -\tc\n   -\td\n  -\te\n -\tf\n-\tg\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5153
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5153>
/// <https://spec.commonmark.org/0.29/#example-281>
fn t281() {
    init!("1. a\n\n  2. b\n\n   3. c\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("1. a\n\n  2. b\n\n   3. c\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5153
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5153>
/// <https://spec.commonmark.org/0.29/#example-281>
fn t281_cr() {
    init!("1. a\r\r  2. b\r\r   3. c\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("1. a\r\r  2. b\r\r   3. c\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5153
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5153>
/// <https://spec.commonmark.org/0.29/#example-281>
fn t281_cr_nl() {
    init!("1. a\r\n\r\n  2. b\r\n\r\n   3. c\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("1. a\r\n\r\n  2. b\r\n\r\n   3. c\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5153
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5153>
/// <https://spec.commonmark.org/0.29/#example-281>
fn t281_no_nl() {
    init!("1. a\n\n  2. b\n\n   3. c");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("1. a\n\n  2. b\n\n   3. c", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5153
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5153>
/// <https://spec.commonmark.org/0.29/#example-281>
fn t281_tab() {
    init!("1.\ta\n\n  2.\tb\n\n   3.\tc\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\ta\n\n  2.\tb\n\n   3.\tc\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5177>
/// <https://spec.commonmark.org/0.29/#example-282>
fn t282() {
    init!("- a\n - b\n  - c\n   - d\n    - e\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"), SoftBreak, plain!("- e"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n - b\n  - c\n   - d\n    - e\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5177>
/// <https://spec.commonmark.org/0.29/#example-282>
fn t282_cr() {
    init!("- a\r - b\r  - c\r   - d\r    - e\r");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"), SoftBreak, plain!("- e"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r - b\r  - c\r   - d\r    - e\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5177>
/// <https://spec.commonmark.org/0.29/#example-282>
fn t282_cr_nl() {
    init!("- a\r\n - b\r\n  - c\r\n   - d\r\n    - e\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"), SoftBreak, plain!("- e"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n - b\r\n  - c\r\n   - d\r\n    - e\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5177>
/// <https://spec.commonmark.org/0.29/#example-282>
fn t282_no_nl() {
    init!("- a\n - b\n  - c\n   - d\n    - e");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"), SoftBreak, plain!("- e"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n - b\n  - c\n   - d\n    - e", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5177>
/// <https://spec.commonmark.org/0.29/#example-282>
fn t282_tab() {
    init!("-\ta\n -\tb\n  -\tc\n   -\td\n    -\te\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))], vec![paragraph!(plain!("d"), SoftBreak, plain!("-	e"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n -\tb\n  -\tc\n   -\td\n    -\te\n", ParserSettings::Html))),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5197
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5197>
/// <https://spec.commonmark.org/0.29/#example-283>
fn t283() {
    init!("1. a\n\n  2. b\n\n    3. c\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))]), code_block!("", "3. c\n")
        ].as_slice(),
        body(&mut StringData::new("1. a\n\n  2. b\n\n    3. c\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5197
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5197>
/// <https://spec.commonmark.org/0.29/#example-283>
fn t283_cr() {
    init!("1. a\r\r  2. b\r\r    3. c\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))]), code_block!("", "3. c\r")
        ].as_slice(),
        body(&mut StringData::new("1. a\r\r  2. b\r\r    3. c\r", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5197
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5197>
/// <https://spec.commonmark.org/0.29/#example-283>
fn t283_cr_nl() {
    init!("1. a\r\n\r\n  2. b\r\n\r\n    3. c\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))]), code_block!("", "3. c\r\n")
        ].as_slice(),
        body(&mut StringData::new("1. a\r\n\r\n  2. b\r\n\r\n    3. c\r\n", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5197
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5197>
/// <https://spec.commonmark.org/0.29/#example-283>
fn t283_no_nl() {
    init!("1. a\n\n  2. b\n\n    3. c");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))]), code_block!("", "3. c\n")
        ].as_slice(),
        body(&mut StringData::new("1. a\n\n  2. b\n\n    3. c", ParserSettings::Html)),
    );
}

#[test]
#[ignore]
/// Test case generated from Commonmark Spec line 5197
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5197>
/// <https://spec.commonmark.org/0.29/#example-283>
fn t283_tab() {
    init!("1.\ta\n\n  2.\tb\n\n    3.\tc\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>
        [
            ordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))]), code_block!("", "3.\tc\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\ta\n\n  2.\tb\n\n    3.\tc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5220>
/// <https://spec.commonmark.org/0.29/#example-284>
fn t284() {
    init!("- a\n- b\n\n- c\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n- c\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5220>
/// <https://spec.commonmark.org/0.29/#example-284>
fn t284_cr() {
    init!("- a\r- b\r\r- c\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r- b\r\r- c\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5220>
/// <https://spec.commonmark.org/0.29/#example-284>
fn t284_cr_nl() {
    init!("- a\r\n- b\r\n\r\n- c\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n- b\r\n\r\n- c\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5220>
/// <https://spec.commonmark.org/0.29/#example-284>
fn t284_no_nl() {
    init!("- a\n- b\n\n- c");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n- c", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5220>
/// <https://spec.commonmark.org/0.29/#example-284>
fn t284_tab() {
    init!("-\ta\n-\tb\n\n-\tc\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n-\tb\n\n-\tc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5242
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5242>
/// <https://spec.commonmark.org/0.29/#example-285>
fn t285() {
    init!("* a\n*\n\n* c\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\n*\n\n* c\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5242
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5242>
/// <https://spec.commonmark.org/0.29/#example-285>
fn t285_cr() {
    init!("* a\r*\r\r* c\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\r*\r\r* c\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5242
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5242>
/// <https://spec.commonmark.org/0.29/#example-285>
fn t285_cr_nl() {
    init!("* a\r\n*\r\n\r\n* c\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\r\n*\r\n\r\n* c\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5242
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5242>
/// <https://spec.commonmark.org/0.29/#example-285>
fn t285_no_nl() {
    init!("* a\n*\n\n* c");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\n*\n\n* c", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5242
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5242>
/// <https://spec.commonmark.org/0.29/#example-285>
fn t285_tab() {
    init!("*\ta\n*\n\n*\tc\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("*\ta\n*\n\n*\tc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5264
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5264>
/// <https://spec.commonmark.org/0.29/#example-286>
fn t286() {
    init!("- a\n- b\n\n  c\n- d\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b")), paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n  c\n- d\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5264
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5264>
/// <https://spec.commonmark.org/0.29/#example-286>
fn t286_cr() {
    init!("- a\r- b\r\r  c\r- d\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b")), paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r- b\r\r  c\r- d\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5264
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5264>
/// <https://spec.commonmark.org/0.29/#example-286>
fn t286_cr_nl() {
    init!("- a\r\n- b\r\n\r\n  c\r\n- d\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b")), paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n- b\r\n\r\n  c\r\n- d\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5264
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5264>
/// <https://spec.commonmark.org/0.29/#example-286>
fn t286_no_nl() {
    init!("- a\n- b\n\n  c\n- d");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b")), paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n  c\n- d", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5264
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5264>
/// <https://spec.commonmark.org/0.29/#example-286>
fn t286_tab() {
    init!("-\ta\n-\tb\n\n  c\n-\td\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![paragraph!(plain!("b")), paragraph!(plain!("c"))], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n-\tb\n\n  c\n-\td\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5286>
/// <https://spec.commonmark.org/0.29/#example-287>
fn t287() {
    init!("- a\n- b\n\n  [ref]: /url\n- d\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(
              vec![paragraph!(plain!("a"))],
              vec![
                paragraph!(plain!("b")),
                linkdef!("ref", "/url"),
              ],
              vec![paragraph!(plain!("d"))]
            )
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n  [ref]: /url\n- d\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5286>
/// <https://spec.commonmark.org/0.29/#example-287>
fn t287_cr() {
    init!("- a\r- b\r\r  [ref]: /url\r- d\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(
              vec![paragraph!(plain!("a"))],
              vec![
                paragraph!(plain!("b")),
                linkdef!("ref", "/url"),
              ],
              vec![paragraph!(plain!("d"))]
            )
        ].as_slice(),
        body(&mut StringData::new("- a\r- b\r\r  [ref]: /url\r- d\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5286>
/// <https://spec.commonmark.org/0.29/#example-287>
fn t287_cr_nl() {
    init!("- a\r\n- b\r\n\r\n  [ref]: /url\r\n- d\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(
              vec![paragraph!(plain!("a"))],
              vec![
                paragraph!(plain!("b")),
                linkdef!("ref", "/url"),
              ],
              vec![paragraph!(plain!("d"))]
            )
        ].as_slice(),
        body(&mut StringData::new("- a\r\n- b\r\n\r\n  [ref]: /url\r\n- d\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5286>
/// <https://spec.commonmark.org/0.29/#example-287>
fn t287_no_nl() {
    init!("- a\n- b\n\n  [ref]: /url\n- d");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(
              vec![paragraph!(plain!("a"))],
              vec![
                paragraph!(plain!("b")),
                linkdef!("ref", "/url"),
              ],
              vec![paragraph!(plain!("d"))]
            )
        ].as_slice(),
        body(&mut StringData::new("- a\n- b\n\n  [ref]: /url\n- d", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5286
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5286>
/// <https://spec.commonmark.org/0.29/#example-287>
fn t287_tab() {
    init!("-\ta\n-\tb\n\n  [ref]:\t/url\n-\td\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>
        [
            unordered_list!(
            		vec![paragraph!(plain!("a"))],
            		vec![
            				paragraph!(plain!("b")),
            				linkdef!("ref",	"/url"),
            		],
            		vec![paragraph!(plain!("d"))]
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n-\tb\n\n  [ref]:\t/url\n-\td\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5309
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5309>
/// <https://spec.commonmark.org/0.29/#example-288>
fn t288() {
    init!("- a\n- ```\n  b\n\n\n  ```\n- c\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![code_block!("", "b\n\n\n")], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- ```\n  b\n\n\n  ```\n- c\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5309
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5309>
/// <https://spec.commonmark.org/0.29/#example-288>
fn t288_cr() {
    init!("- a\r- ```\r  b\r\r\r  ```\r- c\r");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![code_block!("", "b\r\r\r")], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r- ```\r  b\r\r\r  ```\r- c\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5309
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5309>
/// <https://spec.commonmark.org/0.29/#example-288>
fn t288_cr_nl() {
    init!("- a\r\n- ```\r\n  b\r\n\r\n\r\n  ```\r\n- c\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![code_block!("", "b\r\n\r\n\r\n")], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n- ```\r\n  b\r\n\r\n\r\n  ```\r\n- c\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5309
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5309>
/// <https://spec.commonmark.org/0.29/#example-288>
fn t288_no_nl() {
    init!("- a\n- ```\n  b\n\n\n  ```\n- c");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![code_block!("", "b\n\n\n")], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n- ```\n  b\n\n\n  ```\n- c", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5309
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5309>
/// <https://spec.commonmark.org/0.29/#example-288>
fn t288_tab() {
    init!("-\ta\n-\t```\n  b\n\n\n  ```\n-\tc\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))], vec![code_block!("", "b\n\n\n")], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n-\t```\n  b\n\n\n  ```\n-\tc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5335
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5335>
/// <https://spec.commonmark.org/0.29/#example-289>
fn t289() {
    init!("- a\n  - b\n\n    c\n- d\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b")), paragraph!(plain!("c"))])], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b\n\n    c\n- d\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5335
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5335>
/// <https://spec.commonmark.org/0.29/#example-289>
fn t289_cr() {
    init!("- a\r  - b\r\r    c\r- d\r");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b")), paragraph!(plain!("c"))])], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r  - b\r\r    c\r- d\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5335
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5335>
/// <https://spec.commonmark.org/0.29/#example-289>
fn t289_cr_nl() {
    init!("- a\r\n  - b\r\n\r\n    c\r\n- d\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b")), paragraph!(plain!("c"))])], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n  - b\r\n\r\n    c\r\n- d\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5335
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5335>
/// <https://spec.commonmark.org/0.29/#example-289>
fn t289_no_nl() {
    init!("- a\n  - b\n\n    c\n- d");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b")), paragraph!(plain!("c"))])], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b\n\n    c\n- d", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5335
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5335>
/// <https://spec.commonmark.org/0.29/#example-289>
fn t289_tab() {
    init!("-\ta\n  -\tb\n\n    c\n-\td\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b")), paragraph!(plain!("c"))])], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n  -\tb\n\n    c\n-\td\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5359>
/// <https://spec.commonmark.org/0.29/#example-290>
fn t290() {
    init!("* a\n  > b\n  >\n* c\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b")))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\n  > b\n  >\n* c\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5359>
/// <https://spec.commonmark.org/0.29/#example-290>
fn t290_cr() {
    init!("* a\r  > b\r  >\r* c\r");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b")))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\r  > b\r  >\r* c\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5359>
/// <https://spec.commonmark.org/0.29/#example-290>
fn t290_cr_nl() {
    init!("* a\r\n  > b\r\n  >\r\n* c\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b")))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\r\n  > b\r\n  >\r\n* c\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5359>
/// <https://spec.commonmark.org/0.29/#example-290>
fn t290_no_nl() {
    init!("* a\n  > b\n  >\n* c");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b")))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        body(&mut StringData::new("* a\n  > b\n  >\n* c", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5359
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5359>
/// <https://spec.commonmark.org/0.29/#example-290>
fn t290_tab() {
    init!("*\ta\n  >\tb\n  >\n*\tc\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b")))], vec![paragraph!(plain!("c"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("*\ta\n  >\tb\n  >\n*\tc\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5379>
/// <https://spec.commonmark.org/0.29/#example-291>
fn t291() {
    init!("- a\n  > b\n  ```\n  c\n  ```\n- d\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b"))), code_block!("", "c\n")], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n  > b\n  ```\n  c\n  ```\n- d\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5379>
/// <https://spec.commonmark.org/0.29/#example-291>
fn t291_cr() {
    init!("- a\r  > b\r  ```\r  c\r  ```\r- d\r");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b"))), code_block!("", "c\r")], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r  > b\r  ```\r  c\r  ```\r- d\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5379>
/// <https://spec.commonmark.org/0.29/#example-291>
fn t291_cr_nl() {
    init!("- a\r\n  > b\r\n  ```\r\n  c\r\n  ```\r\n- d\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b"))), code_block!("", "c\r\n")], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n  > b\r\n  ```\r\n  c\r\n  ```\r\n- d\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5379>
/// <https://spec.commonmark.org/0.29/#example-291>
fn t291_no_nl() {
    init!("- a\n  > b\n  ```\n  c\n  ```\n- d");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b"))), code_block!("", "c\n")], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n  > b\n  ```\n  c\n  ```\n- d", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5379
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5379>
/// <https://spec.commonmark.org/0.29/#example-291>
fn t291_tab() {
    init!("-\ta\n  >\tb\n  ```\n  c\n  ```\n-\td\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), quote!(paragraph!(plain!("b"))), code_block!("", "c\n")], vec![paragraph!(plain!("d"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n  >\tb\n  ```\n  c\n  ```\n-\td\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5402
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5402>
/// <https://spec.commonmark.org/0.29/#example-292>
fn t292() {
    init!("- a\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))])
        ].as_slice(),
        body(&mut StringData::new("- a\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5402
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5402>
/// <https://spec.commonmark.org/0.29/#example-292>
fn t292_cr() {
    init!("- a\r");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5402
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5402>
/// <https://spec.commonmark.org/0.29/#example-292>
fn t292_cr_nl() {
    init!("- a\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5402
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5402>
/// <https://spec.commonmark.org/0.29/#example-292>
fn t292_no_nl() {
    init!("- a");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))])
        ].as_slice(),
        body(&mut StringData::new("- a", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5402
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5402>
/// <https://spec.commonmark.org/0.29/#example-292>
fn t292_tab() {
    init!("-\ta\n");

    assert_eq!(
        // from spec: <ul>\n<li>a</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5411>
/// <https://spec.commonmark.org/0.29/#example-293>
fn t293() {
    init!("- a\n  - b\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5411>
/// <https://spec.commonmark.org/0.29/#example-293>
fn t293_cr() {
    init!("- a\r  - b\r");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\r  - b\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5411>
/// <https://spec.commonmark.org/0.29/#example-293>
fn t293_cr_nl() {
    init!("- a\r\n  - b\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n  - b\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5411>
/// <https://spec.commonmark.org/0.29/#example-293>
fn t293_no_nl() {
    init!("- a\n  - b");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5411>
/// <https://spec.commonmark.org/0.29/#example-293>
fn t293_tab() {
    init!("-\ta\n  -\tb\n");

    assert_eq!(
        // from spec: <ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n  -\tb\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5428
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5428>
/// <https://spec.commonmark.org/0.29/#example-294>
fn t294() {
    init!("1. ```\n   foo\n   ```\n\n   bar\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!(vec![code_block!("", "foo\n"), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. ```\n   foo\n   ```\n\n   bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5428
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5428>
/// <https://spec.commonmark.org/0.29/#example-294>
fn t294_cr() {
    init!("1. ```\r   foo\r   ```\r\r   bar\r");

    assert_eq!(
        // from spec: <ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!(vec![code_block!("", "foo\r"), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. ```\r   foo\r   ```\r\r   bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5428
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5428>
/// <https://spec.commonmark.org/0.29/#example-294>
fn t294_cr_nl() {
    init!("1. ```\r\n   foo\r\n   ```\r\n\r\n   bar\r\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!(vec![code_block!("", "foo\r\n"), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. ```\r\n   foo\r\n   ```\r\n\r\n   bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5428
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5428>
/// <https://spec.commonmark.org/0.29/#example-294>
fn t294_no_nl() {
    init!("1. ```\n   foo\n   ```\n\n   bar");

    assert_eq!(
        // from spec: <ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!(vec![code_block!("", "foo\n"), paragraph!(plain!("bar"))])
        ].as_slice(),
        body(&mut StringData::new("1. ```\n   foo\n   ```\n\n   bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5428
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5428>
/// <https://spec.commonmark.org/0.29/#example-294>
fn t294_tab() {
    init!("1.\t```\n   foo\n   ```\n\n   bar\n");

    assert_eq!(
        // from spec: <ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>
        [
            ordered_list!(vec![code_block!("", "foo\n"), paragraph!(plain!("bar"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("1.\t```\n   foo\n   ```\n\n   bar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5447
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5447>
/// <https://spec.commonmark.org/0.29/#example-295>
fn t295() {
    init!("* foo\n  * bar\n\n  baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))]), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("* foo\n  * bar\n\n  baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5447
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5447>
/// <https://spec.commonmark.org/0.29/#example-295>
fn t295_cr() {
    init!("* foo\r  * bar\r\r  baz\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))]), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("* foo\r  * bar\r\r  baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5447
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5447>
/// <https://spec.commonmark.org/0.29/#example-295>
fn t295_cr_nl() {
    init!("* foo\r\n  * bar\r\n\r\n  baz\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))]), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("* foo\r\n  * bar\r\n\r\n  baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5447
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5447>
/// <https://spec.commonmark.org/0.29/#example-295>
fn t295_no_nl() {
    init!("* foo\n  * bar\n\n  baz");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))]), paragraph!(plain!("baz"))])
        ].as_slice(),
        body(&mut StringData::new("* foo\n  * bar\n\n  baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5447
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5447>
/// <https://spec.commonmark.org/0.29/#example-295>
fn t295_tab() {
    init!("*\tfoo\n  *\tbar\n\n  baz\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("foo")), unordered_list!(vec![paragraph!(plain!("bar"))]), paragraph!(plain!("baz"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("*\tfoo\n  *\tbar\n\n  baz\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5465>
/// <https://spec.commonmark.org/0.29/#example-296>
fn t296() {
    init!("- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])], vec![paragraph!(plain!("d")), unordered_list!(vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5465>
/// <https://spec.commonmark.org/0.29/#example-296>
fn t296_cr() {
    init!("- a\r  - b\r  - c\r\r- d\r  - e\r  - f\r");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])], vec![paragraph!(plain!("d")), unordered_list!(vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\r  - b\r  - c\r\r- d\r  - e\r  - f\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5465>
/// <https://spec.commonmark.org/0.29/#example-296>
fn t296_cr_nl() {
    init!("- a\r\n  - b\r\n  - c\r\n\r\n- d\r\n  - e\r\n  - f\r\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])], vec![paragraph!(plain!("d")), unordered_list!(vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\r\n  - b\r\n  - c\r\n\r\n- d\r\n  - e\r\n  - f\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5465>
/// <https://spec.commonmark.org/0.29/#example-296>
fn t296_no_nl() {
    init!("- a\n  - b\n  - c\n\n- d\n  - e\n  - f");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])], vec![paragraph!(plain!("d")), unordered_list!(vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))])])
        ].as_slice(),
        body(&mut StringData::new("- a\n  - b\n  - c\n\n- d\n  - e\n  - f", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5465>
/// <https://spec.commonmark.org/0.29/#example-296>
fn t296_tab() {
    init!("-\ta\n  -\tb\n  -\tc\n\n-\td\n  -\te\n  -\tf\n");

    assert_eq!(
        // from spec: <ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>
        [
            unordered_list!(vec![paragraph!(plain!("a")), unordered_list!(vec![paragraph!(plain!("b"))], vec![paragraph!(plain!("c"))])], vec![paragraph!(plain!("d")), unordered_list!(vec![paragraph!(plain!("e"))], vec![paragraph!(plain!("f"))])])
        ].as_slice(),
        space2tab(body(&mut StringData::new("-\ta\n  -\tb\n  -\tc\n\n-\td\n  -\te\n  -\tf\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5499
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5499>
/// <https://spec.commonmark.org/0.29/#example-297>
fn t297() {
    init!("`hi`lo`\n");

    assert_eq!(
        // from spec: <p><code>hi</code>lo`</p>
        [
            paragraph!(code!("hi"), plain!("lo`"))
        ].as_slice(),
        body(&mut StringData::new("`hi`lo`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5499
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5499>
/// <https://spec.commonmark.org/0.29/#example-297>
fn t297_cr() {
    init!("`hi`lo`\r");

    assert_eq!(
        // from spec: <p><code>hi</code>lo`</p>
        [
            paragraph!(code!("hi"), plain!("lo`"))
        ].as_slice(),
        body(&mut StringData::new("`hi`lo`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5499
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5499>
/// <https://spec.commonmark.org/0.29/#example-297>
fn t297_cr_nl() {
    init!("`hi`lo`\r\n");

    assert_eq!(
        // from spec: <p><code>hi</code>lo`</p>
        [
            paragraph!(code!("hi"), plain!("lo`"))
        ].as_slice(),
        body(&mut StringData::new("`hi`lo`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5499
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5499>
/// <https://spec.commonmark.org/0.29/#example-297>
fn t297_no_nl() {
    init!("`hi`lo`");

    assert_eq!(
        // from spec: <p><code>hi</code>lo`</p>
        [
            paragraph!(code!("hi"), plain!("lo`"))
        ].as_slice(),
        body(&mut StringData::new("`hi`lo`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5513
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5513>
/// <https://spec.commonmark.org/0.29/#example-298>
fn t298() {
    init!("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n");

    assert_eq!(
        // from spec: <p>!&quot;#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>
        [
            paragraph!(plain!("!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~"))
        ].as_slice(),
        body(&mut StringData::new("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5513
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5513>
/// <https://spec.commonmark.org/0.29/#example-298>
fn t298_cr() {
    init!("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\r");

    assert_eq!(
        // from spec: <p>!&quot;#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>
        [
            paragraph!(plain!("!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~"))
        ].as_slice(),
        body(&mut StringData::new("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5513
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5513>
/// <https://spec.commonmark.org/0.29/#example-298>
fn t298_cr_nl() {
    init!("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\r\n");

    assert_eq!(
        // from spec: <p>!&quot;#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>
        [
            paragraph!(plain!("!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~"))
        ].as_slice(),
        body(&mut StringData::new("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5513
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5513>
/// <https://spec.commonmark.org/0.29/#example-298>
fn t298_no_nl() {
    init!("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~");

    assert_eq!(
        // from spec: <p>!&quot;#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>
        [
            paragraph!(plain!("!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~"))
        ].as_slice(),
        body(&mut StringData::new("\\!\\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5523
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5523>
/// <https://spec.commonmark.org/0.29/#example-299>
fn t299() {
    init!("\\→\\A\\a\\ \\3\\φ\\«\n");

    assert_eq!(
        // from spec: <p>\\→\\A\\a\\ \\3\\φ\\«</p>
        [
            paragraph!(plain!("\\\t\\A\\a\\ \\3\\φ\\«"))
        ].as_slice(),
        body(&mut StringData::new("\\\t\\A\\a\\ \\3\\\u{3c6}\\\u{ab}\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5523
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5523>
/// <https://spec.commonmark.org/0.29/#example-299>
fn t299_cr() {
    init!("\\→\\A\\a\\ \\3\\φ\\«\r");

    assert_eq!(
        // from spec: <p>\\→\\A\\a\\ \\3\\φ\\«</p>
        [
            paragraph!(plain!("\\\t\\A\\a\\ \\3\\φ\\«"))
        ].as_slice(),
        body(&mut StringData::new("\\\t\\A\\a\\ \\3\\\u{3c6}\\\u{ab}\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5523
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5523>
/// <https://spec.commonmark.org/0.29/#example-299>
fn t299_cr_nl() {
    init!("\\→\\A\\a\\ \\3\\φ\\«\r\n");

    assert_eq!(
        // from spec: <p>\\→\\A\\a\\ \\3\\φ\\«</p>
        [
            paragraph!(plain!("\\\t\\A\\a\\ \\3\\φ\\«"))
        ].as_slice(),
        body(&mut StringData::new("\\\t\\A\\a\\ \\3\\\u{3c6}\\\u{ab}\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5523
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5523>
/// <https://spec.commonmark.org/0.29/#example-299>
fn t299_no_nl() {
    init!("\\→\\A\\a\\ \\3\\φ\\«");

    assert_eq!(
        // from spec: <p>\\→\\A\\a\\ \\3\\φ\\«</p>
        [
            paragraph!(plain!("\\\t\\A\\a\\ \\3\\φ\\«"))
        ].as_slice(),
        body(&mut StringData::new("\\\t\\A\\a\\ \\3\\\u{3c6}\\\u{ab}", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5523
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5523>
/// <https://spec.commonmark.org/0.29/#example-299>
fn t299_tab() {
    init!("\\→\\A\\a\\\t\\3\\φ\\«\n");

    assert_eq!(
        // from spec: <p>\\→\\A\\a\\ \\3\\φ\\«</p>
        [
            paragraph!(plain!("\\\t\\A\\a\\	\\3\\φ\\«"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\\t\\A\\a\\\t\\3\\\u{3c6}\\\u{ab}\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5533
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5533>
/// <https://spec.commonmark.org/0.29/#example-300>
fn t300() {
    init!("\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n");

    assert_eq!(
        // from spec: <p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>
        [
            paragraph!(plain!("*not emphasized*"), SoftBreak, plain!("<br/> not a tag"), SoftBreak, plain!("[not a link](/foo)"), SoftBreak, plain!("`not code`"), SoftBreak, plain!("1. not a list"), SoftBreak, plain!("* not a list"), SoftBreak, plain!("# not a heading"), SoftBreak, plain!("[foo]: /url \"not a reference\""), SoftBreak, plain!("&ouml; not a character entity"))
        ].as_slice(),
        body(&mut StringData::new("\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5533
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5533>
/// <https://spec.commonmark.org/0.29/#example-300>
fn t300_cr() {
    init!("\\*not emphasized*\r\\<br/> not a tag\r\\[not a link](/foo)\r\\`not code`\r1\\. not a list\r\\* not a list\r\\# not a heading\r\\[foo]: /url \"not a reference\"\r\\&ouml; not a character entity\r");

    assert_eq!(
        // from spec: <p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>
        [
            paragraph!(plain!("*not emphasized*"), SoftBreak, plain!("<br/> not a tag"), SoftBreak, plain!("[not a link](/foo)"), SoftBreak, plain!("`not code`"), SoftBreak, plain!("1. not a list"), SoftBreak, plain!("* not a list"), SoftBreak, plain!("# not a heading"), SoftBreak, plain!("[foo]: /url \"not a reference\""), SoftBreak, plain!("&ouml; not a character entity"))
        ].as_slice(),
        body(&mut StringData::new("\\*not emphasized*\r\\<br/> not a tag\r\\[not a link](/foo)\r\\`not code`\r1\\. not a list\r\\* not a list\r\\# not a heading\r\\[foo]: /url \"not a reference\"\r\\&ouml; not a character entity\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5533
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5533>
/// <https://spec.commonmark.org/0.29/#example-300>
fn t300_cr_nl() {
    init!("\\*not emphasized*\r\n\\<br/> not a tag\r\n\\[not a link](/foo)\r\n\\`not code`\r\n1\\. not a list\r\n\\* not a list\r\n\\# not a heading\r\n\\[foo]: /url \"not a reference\"\r\n\\&ouml; not a character entity\r\n");

    assert_eq!(
        // from spec: <p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>
        [
            paragraph!(plain!("*not emphasized*"), SoftBreak, plain!("<br/> not a tag"), SoftBreak, plain!("[not a link](/foo)"), SoftBreak, plain!("`not code`"), SoftBreak, plain!("1. not a list"), SoftBreak, plain!("* not a list"), SoftBreak, plain!("# not a heading"), SoftBreak, plain!("[foo]: /url \"not a reference\""), SoftBreak, plain!("&ouml; not a character entity"))
        ].as_slice(),
        body(&mut StringData::new("\\*not emphasized*\r\n\\<br/> not a tag\r\n\\[not a link](/foo)\r\n\\`not code`\r\n1\\. not a list\r\n\\* not a list\r\n\\# not a heading\r\n\\[foo]: /url \"not a reference\"\r\n\\&ouml; not a character entity\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5533
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5533>
/// <https://spec.commonmark.org/0.29/#example-300>
fn t300_no_nl() {
    init!("\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity");

    assert_eq!(
        // from spec: <p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>
        [
            paragraph!(plain!("*not emphasized*"), SoftBreak, plain!("<br/> not a tag"), SoftBreak, plain!("[not a link](/foo)"), SoftBreak, plain!("`not code`"), SoftBreak, plain!("1. not a list"), SoftBreak, plain!("* not a list"), SoftBreak, plain!("# not a heading"), SoftBreak, plain!("[foo]: /url \"not a reference\""), SoftBreak, plain!("&ouml; not a character entity"))
        ].as_slice(),
        body(&mut StringData::new("\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5533
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5533>
/// <https://spec.commonmark.org/0.29/#example-300>
fn t300_tab() {
    init!("\\*not\temphasized*\n\\<br/>\tnot\ta\ttag\n\\[not\ta\tlink](/foo)\n\\`not\tcode`\n1\\.\tnot\ta\tlist\n\\*\tnot\ta\tlist\n\\#\tnot\ta\theading\n\\[foo]:\t/url\t\"not\ta\treference\"\n\\&ouml;\tnot\ta\tcharacter\tentity\n");

    assert_eq!(
        // from spec: <p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>
        [
            paragraph!(plain!("*not	emphasized*"), SoftBreak, plain!("<br/>	not	a	tag"), SoftBreak, plain!("[not	a	link](/foo)"), SoftBreak, plain!("`not	code`"), SoftBreak, plain!("1.	not	a	list"), SoftBreak, plain!("*	not	a	list"), SoftBreak, plain!("#	not	a	heading"), SoftBreak, plain!("[foo]:	/url	\"not	a	reference\""), SoftBreak, plain!("&ouml;	not	a	character	entity"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\*not\temphasized*\n\\<br/>\tnot\ta\ttag\n\\[not\ta\tlink](/foo)\n\\`not\tcode`\n1\\.\tnot\ta\tlist\n\\*\tnot\ta\tlist\n\\#\tnot\ta\theading\n\\[foo]:\t/url\t\"not\ta\treference\"\n\\&ouml;\tnot\ta\tcharacter\tentity\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5558>
/// <https://spec.commonmark.org/0.29/#example-301>
fn t301() {
    init!("\\\\*emphasis*\n");

    assert_eq!(
        // from spec: <p>\\<em>emphasis</em></p>
        [
            paragraph!(plain!("\\"), emph!(plain!("emphasis")))
        ].as_slice(),
        body(&mut StringData::new("\\\\*emphasis*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5558>
/// <https://spec.commonmark.org/0.29/#example-301>
fn t301_cr() {
    init!("\\\\*emphasis*\r");

    assert_eq!(
        // from spec: <p>\\<em>emphasis</em></p>
        [
            paragraph!(plain!("\\"), emph!(plain!("emphasis")))
        ].as_slice(),
        body(&mut StringData::new("\\\\*emphasis*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5558>
/// <https://spec.commonmark.org/0.29/#example-301>
fn t301_cr_nl() {
    init!("\\\\*emphasis*\r\n");

    assert_eq!(
        // from spec: <p>\\<em>emphasis</em></p>
        [
            paragraph!(plain!("\\"), emph!(plain!("emphasis")))
        ].as_slice(),
        body(&mut StringData::new("\\\\*emphasis*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5558>
/// <https://spec.commonmark.org/0.29/#example-301>
fn t301_no_nl() {
    init!("\\\\*emphasis*");

    assert_eq!(
        // from spec: <p>\\<em>emphasis</em></p>
        [
            paragraph!(plain!("\\"), emph!(plain!("emphasis")))
        ].as_slice(),
        body(&mut StringData::new("\\\\*emphasis*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5567>
/// <https://spec.commonmark.org/0.29/#example-302>
fn t302() {
    init!("foo\\\nbar\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\nbar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5567>
/// <https://spec.commonmark.org/0.29/#example-302>
fn t302_cr() {
    init!("foo\\\rbar\r");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\rbar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5567>
/// <https://spec.commonmark.org/0.29/#example-302>
fn t302_cr_nl() {
    init!("foo\\\r\nbar\r\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r\nbar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5567>
/// <https://spec.commonmark.org/0.29/#example-302>
fn t302_no_nl() {
    init!("foo\\\nbar");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\nbar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5579>
/// <https://spec.commonmark.org/0.29/#example-303>
fn t303() {
    init!("`` \\[\\` ``\n");

    assert_eq!(
        // from spec: <p><code>\\[\\`</code></p>
        [
            paragraph!(code!("\\[\\`"))
        ].as_slice(),
        body(&mut StringData::new("`` \\[\\` ``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5579>
/// <https://spec.commonmark.org/0.29/#example-303>
fn t303_cr() {
    init!("`` \\[\\` ``\r");

    assert_eq!(
        // from spec: <p><code>\\[\\`</code></p>
        [
            paragraph!(code!("\\[\\`"))
        ].as_slice(),
        body(&mut StringData::new("`` \\[\\` ``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5579>
/// <https://spec.commonmark.org/0.29/#example-303>
fn t303_cr_nl() {
    init!("`` \\[\\` ``\r\n");

    assert_eq!(
        // from spec: <p><code>\\[\\`</code></p>
        [
            paragraph!(code!("\\[\\`"))
        ].as_slice(),
        body(&mut StringData::new("`` \\[\\` ``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5579>
/// <https://spec.commonmark.org/0.29/#example-303>
fn t303_no_nl() {
    init!("`` \\[\\` ``");

    assert_eq!(
        // from spec: <p><code>\\[\\`</code></p>
        [
            paragraph!(code!("\\[\\`"))
        ].as_slice(),
        body(&mut StringData::new("`` \\[\\` ``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5586
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5586>
/// <https://spec.commonmark.org/0.29/#example-304>
fn t304() {
    init!("    \\[\\]\n");

    assert_eq!(
        // from spec: <p>[]</p>
        [
            paragraph!(plain!("[]"))
        ].as_slice(),
        body(&mut StringData::new("    \\[\\]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5586
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5586>
/// <https://spec.commonmark.org/0.29/#example-304>
fn t304_cr() {
    init!("    \\[\\]\r");

    assert_eq!(
        // from spec: <p>[]</p>
        [
            paragraph!(plain!("[]"))
        ].as_slice(),
        body(&mut StringData::new("    \\[\\]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5586
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5586>
/// <https://spec.commonmark.org/0.29/#example-304>
fn t304_cr_nl() {
    init!("    \\[\\]\r\n");

    assert_eq!(
        // from spec: <p>[]</p>
        [
            paragraph!(plain!("[]"))
        ].as_slice(),
        body(&mut StringData::new("    \\[\\]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5586
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5586>
/// <https://spec.commonmark.org/0.29/#example-304>
fn t304_no_nl() {
    init!("    \\[\\]");

    assert_eq!(
        // from spec: <p>[]</p>
        [
            paragraph!(plain!("[]"))
        ].as_slice(),
        body(&mut StringData::new("    \\[\\]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5594
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5594>
/// <https://spec.commonmark.org/0.29/#example-305>
fn t305() {
    init!("~~~\n\\[\\]\n~~~\n");

    assert_eq!(
        // from spec: <pre><code>\\[\\]\n</code></pre>
        [
            code_block!("", "\\[\\]\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\n\\[\\]\n~~~\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5594
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5594>
/// <https://spec.commonmark.org/0.29/#example-305>
fn t305_cr() {
    init!("~~~\r\\[\\]\r~~~\r");

    assert_eq!(
        // from spec: <pre><code>\\[\\]\n</code></pre>
        [
            code_block!("", "\\[\\]\r")
        ].as_slice(),
        body(&mut StringData::new("~~~\r\\[\\]\r~~~\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5594
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5594>
/// <https://spec.commonmark.org/0.29/#example-305>
fn t305_cr_nl() {
    init!("~~~\r\n\\[\\]\r\n~~~\r\n");

    assert_eq!(
        // from spec: <pre><code>\\[\\]\n</code></pre>
        [
            code_block!("", "\\[\\]\r\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\r\n\\[\\]\r\n~~~\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5594
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5594>
/// <https://spec.commonmark.org/0.29/#example-305>
fn t305_no_nl() {
    init!("~~~\n\\[\\]\n~~~");

    assert_eq!(
        // from spec: <pre><code>\\[\\]\n</code></pre>
        [
            code_block!("", "\\[\\]\n")
        ].as_slice(),
        body(&mut StringData::new("~~~\n\\[\\]\n~~~", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5604
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5604>
/// <https://spec.commonmark.org/0.29/#example-306>
fn t306() {
    init!("<http://example.com?find=\\*>\n");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>
        [
            paragraph!(link!("http://example.com?find=\\*", "", plain!("http://example.com?find=\\*")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com?find=\\*>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5604
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5604>
/// <https://spec.commonmark.org/0.29/#example-306>
fn t306_cr() {
    init!("<http://example.com?find=\\*>\r");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>
        [
            paragraph!(link!("http://example.com?find=\\*", "", plain!("http://example.com?find=\\*")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com?find=\\*>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5604
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5604>
/// <https://spec.commonmark.org/0.29/#example-306>
fn t306_cr_nl() {
    init!("<http://example.com?find=\\*>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>
        [
            paragraph!(link!("http://example.com?find=\\*", "", plain!("http://example.com?find=\\*")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com?find=\\*>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5604
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5604>
/// <https://spec.commonmark.org/0.29/#example-306>
fn t306_no_nl() {
    init!("<http://example.com?find=\\*>");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>
        [
            paragraph!(link!("http://example.com?find=\\*", "", plain!("http://example.com?find=\\*")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com?find=\\*>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5611>
/// <https://spec.commonmark.org/0.29/#example-307>
fn t307() {
    init!("<a href=\"/bar\\/)\">\n");

    assert_eq!(
        // from spec: <a href=\"/bar\\/)\">
        [
            html_block!("<a href=\"/bar\\/)\">\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"/bar\\/)\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5611>
/// <https://spec.commonmark.org/0.29/#example-307>
fn t307_cr() {
    init!("<a href=\"/bar\\/)\">\r");

    assert_eq!(
        // from spec: <a href=\"/bar\\/)\">
        [
            html_block!("<a href=\"/bar\\/)\">\r")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"/bar\\/)\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5611>
/// <https://spec.commonmark.org/0.29/#example-307>
fn t307_cr_nl() {
    init!("<a href=\"/bar\\/)\">\r\n");

    assert_eq!(
        // from spec: <a href=\"/bar\\/)\">
        [
            html_block!("<a href=\"/bar\\/)\">\r\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"/bar\\/)\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5611>
/// <https://spec.commonmark.org/0.29/#example-307>
fn t307_no_nl() {
    init!("<a href=\"/bar\\/)\">");

    assert_eq!(
        // from spec: <a href=\"/bar\\/)\">
        [
            html_block!("<a href=\"/bar\\/)\">\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"/bar\\/)\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5611
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5611>
/// <https://spec.commonmark.org/0.29/#example-307>
fn t307_tab() {
    init!("<a\thref=\"/bar\\/)\">\n");

    assert_eq!(
        // from spec: <a href=\"/bar\\/)\">
        [
            html_block!("<a	href=\"/bar\\/)\">\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"/bar\\/)\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5621
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5621>
/// <https://spec.commonmark.org/0.29/#example-308>
fn t308() {
    init!("[foo](/bar\\* \"ti\\*tle\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(link!("/bar*", "ti*tle", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/bar\\* \"ti\\*tle\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5621
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5621>
/// <https://spec.commonmark.org/0.29/#example-308>
fn t308_cr() {
    init!("[foo](/bar\\* \"ti\\*tle\")\r");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(link!("/bar*", "ti*tle", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/bar\\* \"ti\\*tle\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5621
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5621>
/// <https://spec.commonmark.org/0.29/#example-308>
fn t308_cr_nl() {
    init!("[foo](/bar\\* \"ti\\*tle\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(link!("/bar*", "ti*tle", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/bar\\* \"ti\\*tle\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5621
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5621>
/// <https://spec.commonmark.org/0.29/#example-308>
fn t308_no_nl() {
    init!("[foo](/bar\\* \"ti\\*tle\")");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(link!("/bar*", "ti*tle", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/bar\\* \"ti\\*tle\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5621
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5621>
/// <https://spec.commonmark.org/0.29/#example-308>
fn t308_tab() {
    init!("[foo](/bar\\*\t\"ti\\*tle\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(link!("/bar*", "ti*tle", plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo](/bar\\*\t\"ti\\*tle\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5628
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5628>
/// <https://spec.commonmark.org/0.29/#example-309>
fn t309() {
    init!("[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/bar*", "ti*tle")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5628
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5628>
/// <https://spec.commonmark.org/0.29/#example-309>
fn t309_cr() {
    init!("[foo]\r\r[foo]: /bar\\* \"ti\\*tle\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/bar*", "ti*tle")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r[foo]: /bar\\* \"ti\\*tle\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5628
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5628>
/// <https://spec.commonmark.org/0.29/#example-309>
fn t309_cr_nl() {
    init!("[foo]\r\n\r\n[foo]: /bar\\* \"ti\\*tle\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/bar*", "ti*tle")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n[foo]: /bar\\* \"ti\\*tle\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5628
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5628>
/// <https://spec.commonmark.org/0.29/#example-309>
fn t309_no_nl() {
    init!("[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/bar*", "ti*tle")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5628
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5628>
/// <https://spec.commonmark.org/0.29/#example-309>
fn t309_tab() {
    init!("[foo]\n\n[foo]:\t/bar\\*\t\"ti\\*tle\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"/bar*",	"ti*tle")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n[foo]:\t/bar\\*\t\"ti\\*tle\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5637
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5637>
/// <https://spec.commonmark.org/0.29/#example-310>
fn t310() {
    init!("``` foo\\+bar\nfoo\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-foo+bar\">foo\n</code></pre>
        [
            code_block!("foo+bar", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("``` foo\\+bar\nfoo\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5637
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5637>
/// <https://spec.commonmark.org/0.29/#example-310>
fn t310_cr() {
    init!("``` foo\\+bar\rfoo\r```\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-foo+bar\">foo\n</code></pre>
        [
            code_block!("foo+bar", "foo\r")
        ].as_slice(),
        body(&mut StringData::new("``` foo\\+bar\rfoo\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5637
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5637>
/// <https://spec.commonmark.org/0.29/#example-310>
fn t310_cr_nl() {
    init!("``` foo\\+bar\r\nfoo\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-foo+bar\">foo\n</code></pre>
        [
            code_block!("foo+bar", "foo\r\n")
        ].as_slice(),
        body(&mut StringData::new("``` foo\\+bar\r\nfoo\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5637
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5637>
/// <https://spec.commonmark.org/0.29/#example-310>
fn t310_no_nl() {
    init!("``` foo\\+bar\nfoo\n```");

    assert_eq!(
        // from spec: <pre><code class=\"language-foo+bar\">foo\n</code></pre>
        [
            code_block!("foo+bar", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("``` foo\\+bar\nfoo\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5637
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5637>
/// <https://spec.commonmark.org/0.29/#example-310>
fn t310_tab() {
    init!("```\tfoo\\+bar\nfoo\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-foo+bar\">foo\n</code></pre>
        [
            code_block!("foo+bar", "foo\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("```\tfoo\\+bar\nfoo\n```\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5674
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5674>
/// <https://spec.commonmark.org/0.29/#example-311>
fn t311() {
    init!("&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n");

    assert_eq!(
        // from spec: <p>\u{a0} &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>
        [
            paragraph!(plain!("\u{a0} & © Æ Ď"), SoftBreak, plain!("¾ ℋ ⅆ"), SoftBreak, plain!("∲ ≧̸"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5674
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5674>
/// <https://spec.commonmark.org/0.29/#example-311>
fn t311_cr() {
    init!("&nbsp; &amp; &copy; &AElig; &Dcaron;\r&frac34; &HilbertSpace; &DifferentialD;\r&ClockwiseContourIntegral; &ngE;\r");

    assert_eq!(
        // from spec: <p>\u{a0} &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>
        [
            paragraph!(plain!("\u{a0} & © Æ Ď"), SoftBreak, plain!("¾ ℋ ⅆ"), SoftBreak, plain!("∲ ≧̸"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp; &amp; &copy; &AElig; &Dcaron;\r&frac34; &HilbertSpace; &DifferentialD;\r&ClockwiseContourIntegral; &ngE;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5674
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5674>
/// <https://spec.commonmark.org/0.29/#example-311>
fn t311_cr_nl() {
    init!("&nbsp; &amp; &copy; &AElig; &Dcaron;\r\n&frac34; &HilbertSpace; &DifferentialD;\r\n&ClockwiseContourIntegral; &ngE;\r\n");

    assert_eq!(
        // from spec: <p>\u{a0} &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>
        [
            paragraph!(plain!("\u{a0} & © Æ Ď"), SoftBreak, plain!("¾ ℋ ⅆ"), SoftBreak, plain!("∲ ≧̸"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp; &amp; &copy; &AElig; &Dcaron;\r\n&frac34; &HilbertSpace; &DifferentialD;\r\n&ClockwiseContourIntegral; &ngE;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5674
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5674>
/// <https://spec.commonmark.org/0.29/#example-311>
fn t311_no_nl() {
    init!("&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;");

    assert_eq!(
        // from spec: <p>\u{a0} &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>
        [
            paragraph!(plain!("\u{a0} & © Æ Ď"), SoftBreak, plain!("¾ ℋ ⅆ"), SoftBreak, plain!("∲ ≧̸"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5674
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5674>
/// <https://spec.commonmark.org/0.29/#example-311>
fn t311_tab() {
    init!("&nbsp;\t&amp;\t&copy;\t&AElig;\t&Dcaron;\n&frac34;\t&HilbertSpace;\t&DifferentialD;\n&ClockwiseContourIntegral;\t&ngE;\n");

    assert_eq!(
        // from spec: <p>\u{a0} &amp; © Æ Ď\n¾ ℋ ⅆ\n∲ ≧̸</p>
        [
            paragraph!(plain!("\u{a0}	&	©	Æ	Ď"), SoftBreak, plain!("¾	ℋ	ⅆ"), SoftBreak, plain!("∲	≧̸"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("&nbsp;\t&amp;\t&copy;\t&AElig;\t&Dcaron;\n&frac34;\t&HilbertSpace;\t&DifferentialD;\n&ClockwiseContourIntegral;\t&ngE;\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5693
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5693>
/// <https://spec.commonmark.org/0.29/#example-312>
fn t312() {
    init!("&#35; &#1234; &#992; &#0;\n");

    assert_eq!(
        // from spec: <p># Ӓ Ϡ �</p>
        [
            paragraph!(plain!("# Ӓ Ϡ �"))
        ].as_slice(),
        body(&mut StringData::new("&#35; &#1234; &#992; &#0;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5693
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5693>
/// <https://spec.commonmark.org/0.29/#example-312>
fn t312_cr() {
    init!("&#35; &#1234; &#992; &#0;\r");

    assert_eq!(
        // from spec: <p># Ӓ Ϡ �</p>
        [
            paragraph!(plain!("# Ӓ Ϡ �"))
        ].as_slice(),
        body(&mut StringData::new("&#35; &#1234; &#992; &#0;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5693
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5693>
/// <https://spec.commonmark.org/0.29/#example-312>
fn t312_cr_nl() {
    init!("&#35; &#1234; &#992; &#0;\r\n");

    assert_eq!(
        // from spec: <p># Ӓ Ϡ �</p>
        [
            paragraph!(plain!("# Ӓ Ϡ �"))
        ].as_slice(),
        body(&mut StringData::new("&#35; &#1234; &#992; &#0;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5693
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5693>
/// <https://spec.commonmark.org/0.29/#example-312>
fn t312_no_nl() {
    init!("&#35; &#1234; &#992; &#0;");

    assert_eq!(
        // from spec: <p># Ӓ Ϡ �</p>
        [
            paragraph!(plain!("# Ӓ Ϡ �"))
        ].as_slice(),
        body(&mut StringData::new("&#35; &#1234; &#992; &#0;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5693
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5693>
/// <https://spec.commonmark.org/0.29/#example-312>
fn t312_tab() {
    init!("&#35;\t&#1234;\t&#992;\t&#0;\n");

    assert_eq!(
        // from spec: <p># Ӓ Ϡ �</p>
        [
            paragraph!(plain!("#	Ӓ	Ϡ	�"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("&#35;\t&#1234;\t&#992;\t&#0;\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5706>
/// <https://spec.commonmark.org/0.29/#example-313>
fn t313() {
    init!("&#X22; &#XD06; &#xcab;\n");

    assert_eq!(
        // from spec: <p>&quot; ആ ಫ</p>
        [
            paragraph!(plain!("\" ആ ಫ"))
        ].as_slice(),
        body(&mut StringData::new("&#X22; &#XD06; &#xcab;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5706>
/// <https://spec.commonmark.org/0.29/#example-313>
fn t313_cr() {
    init!("&#X22; &#XD06; &#xcab;\r");

    assert_eq!(
        // from spec: <p>&quot; ആ ಫ</p>
        [
            paragraph!(plain!("\" ആ ಫ"))
        ].as_slice(),
        body(&mut StringData::new("&#X22; &#XD06; &#xcab;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5706>
/// <https://spec.commonmark.org/0.29/#example-313>
fn t313_cr_nl() {
    init!("&#X22; &#XD06; &#xcab;\r\n");

    assert_eq!(
        // from spec: <p>&quot; ആ ಫ</p>
        [
            paragraph!(plain!("\" ആ ಫ"))
        ].as_slice(),
        body(&mut StringData::new("&#X22; &#XD06; &#xcab;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5706>
/// <https://spec.commonmark.org/0.29/#example-313>
fn t313_no_nl() {
    init!("&#X22; &#XD06; &#xcab;");

    assert_eq!(
        // from spec: <p>&quot; ആ ಫ</p>
        [
            paragraph!(plain!("\" ആ ಫ"))
        ].as_slice(),
        body(&mut StringData::new("&#X22; &#XD06; &#xcab;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5706
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5706>
/// <https://spec.commonmark.org/0.29/#example-313>
fn t313_tab() {
    init!("&#X22;\t&#XD06;\t&#xcab;\n");

    assert_eq!(
        // from spec: <p>&quot; ആ ಫ</p>
        [
            paragraph!(plain!("\"	ആ	ಫ"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("&#X22;\t&#XD06;\t&#xcab;\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5715>
/// <https://spec.commonmark.org/0.29/#example-314>
fn t314() {
    init!("&nbsp &x; &#; &#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n");

    assert_eq!(
        // from spec: <p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#87654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>
        [
            paragraph!(plain!("&nbsp &x; &#; &#x;"), SoftBreak, plain!("&#87654321;"), SoftBreak, plain!("&#abcdef0;"), SoftBreak, plain!("&ThisIsNotDefined; &hi?;"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp &x; &#; &#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5715>
/// <https://spec.commonmark.org/0.29/#example-314>
fn t314_cr() {
    init!("&nbsp &x; &#; &#x;\r&#87654321;\r&#abcdef0;\r&ThisIsNotDefined; &hi?;\r");

    assert_eq!(
        // from spec: <p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#87654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>
        [
            paragraph!(plain!("&nbsp &x; &#; &#x;"), SoftBreak, plain!("&#87654321;"), SoftBreak, plain!("&#abcdef0;"), SoftBreak, plain!("&ThisIsNotDefined; &hi?;"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp &x; &#; &#x;\r&#87654321;\r&#abcdef0;\r&ThisIsNotDefined; &hi?;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5715>
/// <https://spec.commonmark.org/0.29/#example-314>
fn t314_cr_nl() {
    init!("&nbsp &x; &#; &#x;\r\n&#87654321;\r\n&#abcdef0;\r\n&ThisIsNotDefined; &hi?;\r\n");

    assert_eq!(
        // from spec: <p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#87654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>
        [
            paragraph!(plain!("&nbsp &x; &#; &#x;"), SoftBreak, plain!("&#87654321;"), SoftBreak, plain!("&#abcdef0;"), SoftBreak, plain!("&ThisIsNotDefined; &hi?;"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp &x; &#; &#x;\r\n&#87654321;\r\n&#abcdef0;\r\n&ThisIsNotDefined; &hi?;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5715>
/// <https://spec.commonmark.org/0.29/#example-314>
fn t314_no_nl() {
    init!("&nbsp &x; &#; &#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;");

    assert_eq!(
        // from spec: <p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#87654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>
        [
            paragraph!(plain!("&nbsp &x; &#; &#x;"), SoftBreak, plain!("&#87654321;"), SoftBreak, plain!("&#abcdef0;"), SoftBreak, plain!("&ThisIsNotDefined; &hi?;"))
        ].as_slice(),
        body(&mut StringData::new("&nbsp &x; &#; &#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5715
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5715>
/// <https://spec.commonmark.org/0.29/#example-314>
fn t314_tab() {
    init!("&nbsp\t&x;\t&#;\t&#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined;\t&hi?;\n");

    assert_eq!(
        // from spec: <p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#87654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>
        [
            paragraph!(plain!("&nbsp	&x;	&#;	&#x;"), SoftBreak, plain!("&#87654321;"), SoftBreak, plain!("&#abcdef0;"), SoftBreak, plain!("&ThisIsNotDefined;	&hi?;"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("&nbsp\t&x;\t&#;\t&#x;\n&#87654321;\n&#abcdef0;\n&ThisIsNotDefined;\t&hi?;\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5732>
/// <https://spec.commonmark.org/0.29/#example-315>
fn t315() {
    init!("&copy\n");

    assert_eq!(
        // from spec: <p>&amp;copy</p>
        [
            paragraph!(plain!("&copy"))
        ].as_slice(),
        body(&mut StringData::new("&copy\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5732>
/// <https://spec.commonmark.org/0.29/#example-315>
fn t315_cr() {
    init!("&copy\r");

    assert_eq!(
        // from spec: <p>&amp;copy</p>
        [
            paragraph!(plain!("&copy"))
        ].as_slice(),
        body(&mut StringData::new("&copy\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5732>
/// <https://spec.commonmark.org/0.29/#example-315>
fn t315_cr_nl() {
    init!("&copy\r\n");

    assert_eq!(
        // from spec: <p>&amp;copy</p>
        [
            paragraph!(plain!("&copy"))
        ].as_slice(),
        body(&mut StringData::new("&copy\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5732>
/// <https://spec.commonmark.org/0.29/#example-315>
fn t315_no_nl() {
    init!("&copy");

    assert_eq!(
        // from spec: <p>&amp;copy</p>
        [
            paragraph!(plain!("&copy"))
        ].as_slice(),
        body(&mut StringData::new("&copy", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5742>
/// <https://spec.commonmark.org/0.29/#example-316>
fn t316() {
    init!("&MadeUpEntity;\n");

    assert_eq!(
        // from spec: <p>&amp;MadeUpEntity;</p>
        [
            paragraph!(plain!("&MadeUpEntity;"))
        ].as_slice(),
        body(&mut StringData::new("&MadeUpEntity;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5742>
/// <https://spec.commonmark.org/0.29/#example-316>
fn t316_cr() {
    init!("&MadeUpEntity;\r");

    assert_eq!(
        // from spec: <p>&amp;MadeUpEntity;</p>
        [
            paragraph!(plain!("&MadeUpEntity;"))
        ].as_slice(),
        body(&mut StringData::new("&MadeUpEntity;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5742>
/// <https://spec.commonmark.org/0.29/#example-316>
fn t316_cr_nl() {
    init!("&MadeUpEntity;\r\n");

    assert_eq!(
        // from spec: <p>&amp;MadeUpEntity;</p>
        [
            paragraph!(plain!("&MadeUpEntity;"))
        ].as_slice(),
        body(&mut StringData::new("&MadeUpEntity;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5742>
/// <https://spec.commonmark.org/0.29/#example-316>
fn t316_no_nl() {
    init!("&MadeUpEntity;");

    assert_eq!(
        // from spec: <p>&amp;MadeUpEntity;</p>
        [
            paragraph!(plain!("&MadeUpEntity;"))
        ].as_slice(),
        body(&mut StringData::new("&MadeUpEntity;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5753
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5753>
/// <https://spec.commonmark.org/0.29/#example-317>
fn t317() {
    init!("<a href=\"&ouml;&ouml;.html\">\n");

    assert_eq!(
        // from spec: <a href=\"&ouml;&ouml;.html\">
        [
            html_block!("<a href=\"&ouml;&ouml;.html\">\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"&ouml;&ouml;.html\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5753
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5753>
/// <https://spec.commonmark.org/0.29/#example-317>
fn t317_cr() {
    init!("<a href=\"&ouml;&ouml;.html\">\r");

    assert_eq!(
        // from spec: <a href=\"&ouml;&ouml;.html\">
        [
            html_block!("<a href=\"&ouml;&ouml;.html\">\r")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"&ouml;&ouml;.html\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5753
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5753>
/// <https://spec.commonmark.org/0.29/#example-317>
fn t317_cr_nl() {
    init!("<a href=\"&ouml;&ouml;.html\">\r\n");

    assert_eq!(
        // from spec: <a href=\"&ouml;&ouml;.html\">
        [
            html_block!("<a href=\"&ouml;&ouml;.html\">\r\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"&ouml;&ouml;.html\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5753
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5753>
/// <https://spec.commonmark.org/0.29/#example-317>
fn t317_no_nl() {
    init!("<a href=\"&ouml;&ouml;.html\">");

    assert_eq!(
        // from spec: <a href=\"&ouml;&ouml;.html\">
        [
            html_block!("<a href=\"&ouml;&ouml;.html\">\n")
        ].as_slice(),
        body(&mut StringData::new("<a href=\"&ouml;&ouml;.html\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5753
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5753>
/// <https://spec.commonmark.org/0.29/#example-317>
fn t317_tab() {
    init!("<a\thref=\"&ouml;&ouml;.html\">\n");

    assert_eq!(
        // from spec: <a href=\"&ouml;&ouml;.html\">
        [
            html_block!("<a	href=\"&ouml;&ouml;.html\">\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"&ouml;&ouml;.html\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5760
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5760>
/// <https://spec.commonmark.org/0.29/#example-318>
fn t318() {
    init!("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(link!("/f\u{f6}\u{f6}", "f\u{f6}\u{f6}", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5760
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5760>
/// <https://spec.commonmark.org/0.29/#example-318>
fn t318_cr() {
    init!("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\r");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(link!("/f\u{f6}\u{f6}", "f\u{f6}\u{f6}", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5760
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5760>
/// <https://spec.commonmark.org/0.29/#example-318>
fn t318_cr_nl() {
    init!("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(link!("/f\u{f6}\u{f6}", "f\u{f6}\u{f6}", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5760
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5760>
/// <https://spec.commonmark.org/0.29/#example-318>
fn t318_no_nl() {
    init!("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(link!("/f\u{f6}\u{f6}", "f\u{f6}\u{f6}", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5760
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5760>
/// <https://spec.commonmark.org/0.29/#example-318>
fn t318_tab() {
    init!("[foo](/f&ouml;&ouml;\t\"f&ouml;&ouml;\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(link!("/f\u{f6}\u{f6}", "f\u{f6}\u{f6}", plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo](/f&ouml;&ouml;\t\"f&ouml;&ouml;\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5767
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5767>
/// <https://spec.commonmark.org/0.29/#example-319>
fn t319() {
    init!("[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/f\u{f6}\u{f6}", "f\u{f6}\u{f6}")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5767
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5767>
/// <https://spec.commonmark.org/0.29/#example-319>
fn t319_cr() {
    init!("[foo]\r\r[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/f\u{f6}\u{f6}", "f\u{f6}\u{f6}")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5767
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5767>
/// <https://spec.commonmark.org/0.29/#example-319>
fn t319_cr_nl() {
    init!("[foo]\r\n\r\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/f\u{f6}\u{f6}", "f\u{f6}\u{f6}")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5767
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5767>
/// <https://spec.commonmark.org/0.29/#example-319>
fn t319_no_nl() {
    init!("[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/f\u{f6}\u{f6}", "f\u{f6}\u{f6}")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5767
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5767>
/// <https://spec.commonmark.org/0.29/#example-319>
fn t319_tab() {
    init!("[foo]\n\n[foo]:\t/f&ouml;&ouml;\t\"f&ouml;&ouml;\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"/f\u{f6}\u{f6}",	"f\u{f6}\u{f6}")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n[foo]:\t/f&ouml;&ouml;\t\"f&ouml;&ouml;\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5776
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5776>
/// <https://spec.commonmark.org/0.29/#example-320>
fn t320() {
    init!("``` f&ouml;&ouml;\nfoo\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-föö\">foo\n</code></pre>
        [
            code_block!("f\u{f6}\u{f6}", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("``` f&ouml;&ouml;\nfoo\n```\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5776
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5776>
/// <https://spec.commonmark.org/0.29/#example-320>
fn t320_cr() {
    init!("``` f&ouml;&ouml;\rfoo\r```\r");

    assert_eq!(
        // from spec: <pre><code class=\"language-föö\">foo\n</code></pre>
        [
            code_block!("f\u{f6}\u{f6}", "foo\r")
        ].as_slice(),
        body(&mut StringData::new("``` f&ouml;&ouml;\rfoo\r```\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5776
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5776>
/// <https://spec.commonmark.org/0.29/#example-320>
fn t320_cr_nl() {
    init!("``` f&ouml;&ouml;\r\nfoo\r\n```\r\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-föö\">foo\n</code></pre>
        [
            code_block!("f\u{f6}\u{f6}", "foo\r\n")
        ].as_slice(),
        body(&mut StringData::new("``` f&ouml;&ouml;\r\nfoo\r\n```\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5776
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5776>
/// <https://spec.commonmark.org/0.29/#example-320>
fn t320_no_nl() {
    init!("``` f&ouml;&ouml;\nfoo\n```");

    assert_eq!(
        // from spec: <pre><code class=\"language-föö\">foo\n</code></pre>
        [
            code_block!("f\u{f6}\u{f6}", "foo\n")
        ].as_slice(),
        body(&mut StringData::new("``` f&ouml;&ouml;\nfoo\n```", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5776
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5776>
/// <https://spec.commonmark.org/0.29/#example-320>
fn t320_tab() {
    init!("```\tf&ouml;&ouml;\nfoo\n```\n");

    assert_eq!(
        // from spec: <pre><code class=\"language-föö\">foo\n</code></pre>
        [
            code_block!("f\u{f6}\u{f6}", "foo\n")
        ].as_slice(),
        space2tab(body(&mut StringData::new("```\tf&ouml;&ouml;\nfoo\n```\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5789
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5789>
/// <https://spec.commonmark.org/0.29/#example-321>
fn t321() {
    init!("`f&ouml;&ouml;`\n");

    assert_eq!(
        // from spec: <p><code>f&amp;ouml;&amp;ouml;</code></p>
        [
            paragraph!(code!("f&ouml;&ouml;"))
        ].as_slice(),
        body(&mut StringData::new("`f&ouml;&ouml;`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5789
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5789>
/// <https://spec.commonmark.org/0.29/#example-321>
fn t321_cr() {
    init!("`f&ouml;&ouml;`\r");

    assert_eq!(
        // from spec: <p><code>f&amp;ouml;&amp;ouml;</code></p>
        [
            paragraph!(code!("f&ouml;&ouml;"))
        ].as_slice(),
        body(&mut StringData::new("`f&ouml;&ouml;`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5789
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5789>
/// <https://spec.commonmark.org/0.29/#example-321>
fn t321_cr_nl() {
    init!("`f&ouml;&ouml;`\r\n");

    assert_eq!(
        // from spec: <p><code>f&amp;ouml;&amp;ouml;</code></p>
        [
            paragraph!(code!("f&ouml;&ouml;"))
        ].as_slice(),
        body(&mut StringData::new("`f&ouml;&ouml;`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5789
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5789>
/// <https://spec.commonmark.org/0.29/#example-321>
fn t321_no_nl() {
    init!("`f&ouml;&ouml;`");

    assert_eq!(
        // from spec: <p><code>f&amp;ouml;&amp;ouml;</code></p>
        [
            paragraph!(code!("f&ouml;&ouml;"))
        ].as_slice(),
        body(&mut StringData::new("`f&ouml;&ouml;`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5796
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5796>
/// <https://spec.commonmark.org/0.29/#example-322>
fn t322() {
    init!("    f&ouml;f&ouml;\n");

    assert_eq!(
        // from spec: <p>föfö</p>
        [
            paragraph!(plain!("föfö"))
        ].as_slice(),
        body(&mut StringData::new("    f&ouml;f&ouml;\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5796
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5796>
/// <https://spec.commonmark.org/0.29/#example-322>
fn t322_cr() {
    init!("    f&ouml;f&ouml;\r");

    assert_eq!(
        // from spec: <p>föfö</p>
        [
            paragraph!(plain!("föfö"))
        ].as_slice(),
        body(&mut StringData::new("    f&ouml;f&ouml;\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5796
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5796>
/// <https://spec.commonmark.org/0.29/#example-322>
fn t322_cr_nl() {
    init!("    f&ouml;f&ouml;\r\n");

    assert_eq!(
        // from spec: <p>föfö</p>
        [
            paragraph!(plain!("föfö"))
        ].as_slice(),
        body(&mut StringData::new("    f&ouml;f&ouml;\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5796
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5796>
/// <https://spec.commonmark.org/0.29/#example-322>
fn t322_no_nl() {
    init!("    f&ouml;f&ouml;");

    assert_eq!(
        // from spec: <p>föfö</p>
        [
            paragraph!(plain!("föfö"))
        ].as_slice(),
        body(&mut StringData::new("    f&ouml;f&ouml;", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5808
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5808>
/// <https://spec.commonmark.org/0.29/#example-323>
fn t323() {
    init!("&#42;foo&#42;\n*foo*\n");

    assert_eq!(
        // from spec: <p>*foo*\n<em>foo</em></p>
        [
            paragraph!(plain!("*foo*"), SoftBreak, emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("&#42;foo&#42;\n*foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5808
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5808>
/// <https://spec.commonmark.org/0.29/#example-323>
fn t323_cr() {
    init!("&#42;foo&#42;\r*foo*\r");

    assert_eq!(
        // from spec: <p>*foo*\n<em>foo</em></p>
        [
            paragraph!(plain!("*foo*"), SoftBreak, emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("&#42;foo&#42;\r*foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5808
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5808>
/// <https://spec.commonmark.org/0.29/#example-323>
fn t323_cr_nl() {
    init!("&#42;foo&#42;\r\n*foo*\r\n");

    assert_eq!(
        // from spec: <p>*foo*\n<em>foo</em></p>
        [
            paragraph!(plain!("*foo*"), SoftBreak, emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("&#42;foo&#42;\r\n*foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5808
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5808>
/// <https://spec.commonmark.org/0.29/#example-323>
fn t323_no_nl() {
    init!("&#42;foo&#42;\n*foo*");

    assert_eq!(
        // from spec: <p>*foo*\n<em>foo</em></p>
        [
            paragraph!(plain!("*foo*"), SoftBreak, emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("&#42;foo&#42;\n*foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5816>
/// <https://spec.commonmark.org/0.29/#example-324>
fn t324() {
    init!("&#42; foo\n\n* foo\n");

    assert_eq!(
        // from spec: <p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>
        [
            paragraph!(plain!("* foo")), unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("&#42; foo\n\n* foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5816>
/// <https://spec.commonmark.org/0.29/#example-324>
fn t324_cr() {
    init!("&#42; foo\r\r* foo\r");

    assert_eq!(
        // from spec: <p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>
        [
            paragraph!(plain!("* foo")), unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("&#42; foo\r\r* foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5816>
/// <https://spec.commonmark.org/0.29/#example-324>
fn t324_cr_nl() {
    init!("&#42; foo\r\n\r\n* foo\r\n");

    assert_eq!(
        // from spec: <p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>
        [
            paragraph!(plain!("* foo")), unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("&#42; foo\r\n\r\n* foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5816>
/// <https://spec.commonmark.org/0.29/#example-324>
fn t324_no_nl() {
    init!("&#42; foo\n\n* foo");

    assert_eq!(
        // from spec: <p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>
        [
            paragraph!(plain!("* foo")), unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        body(&mut StringData::new("&#42; foo\n\n* foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5816
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5816>
/// <https://spec.commonmark.org/0.29/#example-324>
fn t324_tab() {
    init!("&#42;\tfoo\n\n*\tfoo\n");

    assert_eq!(
        // from spec: <p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>
        [
            paragraph!(plain!("*	foo")), unordered_list!(vec![paragraph!(plain!("foo"))])
        ].as_slice(),
        space2tab(body(&mut StringData::new("&#42;\tfoo\n\n*\tfoo\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5827
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5827>
/// <https://spec.commonmark.org/0.29/#example-325>
fn t325() {
    init!("foo&#10;&#10;bar\n");

    assert_eq!(
        // from spec: <p>foo\n\nbar</p>
        [
            paragraph!(plain!("foo\n\nbar"))
        ].as_slice(),
        body(&mut StringData::new("foo&#10;&#10;bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5827
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5827>
/// <https://spec.commonmark.org/0.29/#example-325>
fn t325_no_nl() {
    init!("foo&#10;&#10;bar");

    assert_eq!(
        // from spec: <p>foo\n\nbar</p>
        [
            paragraph!(plain!("foo\n\nbar"))
        ].as_slice(),
        body(&mut StringData::new("foo&#10;&#10;bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5835
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5835>
/// <https://spec.commonmark.org/0.29/#example-326>
fn t326() {
    init!("&#9;foo\n");

    assert_eq!(
        // from spec: <p>→foo</p>
        [
            paragraph!(plain!("\tfoo"))
        ].as_slice(),
        body(&mut StringData::new("&#9;foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5835
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5835>
/// <https://spec.commonmark.org/0.29/#example-326>
fn t326_cr() {
    init!("&#9;foo\r");

    assert_eq!(
        // from spec: <p>→foo</p>
        [
            paragraph!(plain!("\tfoo"))
        ].as_slice(),
        body(&mut StringData::new("&#9;foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5835
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5835>
/// <https://spec.commonmark.org/0.29/#example-326>
fn t326_cr_nl() {
    init!("&#9;foo\r\n");

    assert_eq!(
        // from spec: <p>→foo</p>
        [
            paragraph!(plain!("\tfoo"))
        ].as_slice(),
        body(&mut StringData::new("&#9;foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5835
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5835>
/// <https://spec.commonmark.org/0.29/#example-326>
fn t326_no_nl() {
    init!("&#9;foo");

    assert_eq!(
        // from spec: <p>→foo</p>
        [
            paragraph!(plain!("\tfoo"))
        ].as_slice(),
        body(&mut StringData::new("&#9;foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5842>
/// <https://spec.commonmark.org/0.29/#example-327>
fn t327() {
    init!("[a](url &quot;tit&quot;)\n");

    assert_eq!(
        // from spec: <p>[a](url &quot;tit&quot;)</p>
        [
            paragraph!(linkref!(plain!("a")), plain!("(url \"tit\")"))
        ].as_slice(),
        body(&mut StringData::new("[a](url &quot;tit&quot;)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5842>
/// <https://spec.commonmark.org/0.29/#example-327>
fn t327_cr() {
    init!("[a](url &quot;tit&quot;)\r");

    assert_eq!(
        // from spec: <p>[a](url &quot;tit&quot;)</p>
        [
            paragraph!(linkref!(plain!("a")), plain!("(url \"tit\")"))
        ].as_slice(),
        body(&mut StringData::new("[a](url &quot;tit&quot;)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5842>
/// <https://spec.commonmark.org/0.29/#example-327>
fn t327_cr_nl() {
    init!("[a](url &quot;tit&quot;)\r\n");

    assert_eq!(
        // from spec: <p>[a](url &quot;tit&quot;)</p>
        [
            paragraph!(linkref!(plain!("a")), plain!("(url \"tit\")"))
        ].as_slice(),
        body(&mut StringData::new("[a](url &quot;tit&quot;)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5842>
/// <https://spec.commonmark.org/0.29/#example-327>
fn t327_no_nl() {
    init!("[a](url &quot;tit&quot;)");

    assert_eq!(
        // from spec: <p>[a](url &quot;tit&quot;)</p>
        [
            paragraph!(linkref!(plain!("a")), plain!("(url \"tit\")"))
        ].as_slice(),
        body(&mut StringData::new("[a](url &quot;tit&quot;)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5842>
/// <https://spec.commonmark.org/0.29/#example-327>
fn t327_tab() {
    init!("[a](url\t&quot;tit&quot;)\n");

    assert_eq!(
        // from spec: <p>[a](url &quot;tit&quot;)</p>
        [
            paragraph!(linkref!(plain!("a")),	plain!("(url	\"tit\")"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[a](url\t&quot;tit&quot;)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5870>
/// <https://spec.commonmark.org/0.29/#example-328>
fn t328() {
    init!("`foo`\n");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5870>
/// <https://spec.commonmark.org/0.29/#example-328>
fn t328_cr() {
    init!("`foo`\r");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5870>
/// <https://spec.commonmark.org/0.29/#example-328>
fn t328_cr_nl() {
    init!("`foo`\r\n");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5870>
/// <https://spec.commonmark.org/0.29/#example-328>
fn t328_no_nl() {
    init!("`foo`");

    assert_eq!(
        // from spec: <p><code>foo</code></p>
        [
            paragraph!(code!("foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5881
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5881>
/// <https://spec.commonmark.org/0.29/#example-329>
fn t329() {
    init!("`` foo ` bar ``\n");

    assert_eq!(
        // from spec: <p><code>foo ` bar</code></p>
        [
            paragraph!(code!("foo ` bar"))
        ].as_slice(),
        body(&mut StringData::new("`` foo ` bar ``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5881
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5881>
/// <https://spec.commonmark.org/0.29/#example-329>
fn t329_cr() {
    init!("`` foo ` bar ``\r");

    assert_eq!(
        // from spec: <p><code>foo ` bar</code></p>
        [
            paragraph!(code!("foo ` bar"))
        ].as_slice(),
        body(&mut StringData::new("`` foo ` bar ``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5881
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5881>
/// <https://spec.commonmark.org/0.29/#example-329>
fn t329_cr_nl() {
    init!("`` foo ` bar ``\r\n");

    assert_eq!(
        // from spec: <p><code>foo ` bar</code></p>
        [
            paragraph!(code!("foo ` bar"))
        ].as_slice(),
        body(&mut StringData::new("`` foo ` bar ``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5881
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5881>
/// <https://spec.commonmark.org/0.29/#example-329>
fn t329_no_nl() {
    init!("`` foo ` bar ``");

    assert_eq!(
        // from spec: <p><code>foo ` bar</code></p>
        [
            paragraph!(code!("foo ` bar"))
        ].as_slice(),
        body(&mut StringData::new("`` foo ` bar ``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5881
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5881>
/// <https://spec.commonmark.org/0.29/#example-329>
fn t329_tab() {
    init!("`` foo\t`\tbar ``\n");

    assert_eq!(
        // from spec: <p><code>foo ` bar</code></p>
        [
            paragraph!(code!("foo\t`\tbar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`` foo\t`\tbar ``\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5891
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5891>
/// <https://spec.commonmark.org/0.29/#example-330>
fn t330() {
    init!("` `` `\n");

    assert_eq!(
        // from spec: <p><code>``</code></p>
        [
            paragraph!(code!("``"))
        ].as_slice(),
        body(&mut StringData::new("` `` `\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5891
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5891>
/// <https://spec.commonmark.org/0.29/#example-330>
fn t330_cr() {
    init!("` `` `\r");

    assert_eq!(
        // from spec: <p><code>``</code></p>
        [
            paragraph!(code!("``"))
        ].as_slice(),
        body(&mut StringData::new("` `` `\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5891
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5891>
/// <https://spec.commonmark.org/0.29/#example-330>
fn t330_cr_nl() {
    init!("` `` `\r\n");

    assert_eq!(
        // from spec: <p><code>``</code></p>
        [
            paragraph!(code!("``"))
        ].as_slice(),
        body(&mut StringData::new("` `` `\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5891
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5891>
/// <https://spec.commonmark.org/0.29/#example-330>
fn t330_no_nl() {
    init!("` `` `");

    assert_eq!(
        // from spec: <p><code>``</code></p>
        [
            paragraph!(code!("``"))
        ].as_slice(),
        body(&mut StringData::new("` `` `", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5899
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5899>
/// <https://spec.commonmark.org/0.29/#example-331>
fn t331() {
    init!("`  ``  `\n");

    assert_eq!(
        // from spec: <p><code> `` </code></p>
        [
            paragraph!(code!(" `` "))
        ].as_slice(),
        body(&mut StringData::new("`  ``  `\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5899
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5899>
/// <https://spec.commonmark.org/0.29/#example-331>
fn t331_cr() {
    init!("`  ``  `\r");

    assert_eq!(
        // from spec: <p><code> `` </code></p>
        [
            paragraph!(code!(" `` "))
        ].as_slice(),
        body(&mut StringData::new("`  ``  `\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5899
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5899>
/// <https://spec.commonmark.org/0.29/#example-331>
fn t331_cr_nl() {
    init!("`  ``  `\r\n");

    assert_eq!(
        // from spec: <p><code> `` </code></p>
        [
            paragraph!(code!(" `` "))
        ].as_slice(),
        body(&mut StringData::new("`  ``  `\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5899
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5899>
/// <https://spec.commonmark.org/0.29/#example-331>
fn t331_no_nl() {
    init!("`  ``  `");

    assert_eq!(
        // from spec: <p><code> `` </code></p>
        [
            paragraph!(code!(" `` "))
        ].as_slice(),
        body(&mut StringData::new("`  ``  `", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5899
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5899>
/// <https://spec.commonmark.org/0.29/#example-331>
fn t331_tab() {
    init!("` \t``\t `\n");

    assert_eq!(
        // from spec: <p><code> `` </code></p>
        [
            paragraph!(code!("\t``\t"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("` \t``\t `\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5908>
/// <https://spec.commonmark.org/0.29/#example-332>
fn t332() {
    init!("` a`\n");

    assert_eq!(
        // from spec: <p><code> a</code></p>
        [
            paragraph!(code!(" a"))
        ].as_slice(),
        body(&mut StringData::new("` a`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5908>
/// <https://spec.commonmark.org/0.29/#example-332>
fn t332_cr() {
    init!("` a`\r");

    assert_eq!(
        // from spec: <p><code> a</code></p>
        [
            paragraph!(code!(" a"))
        ].as_slice(),
        body(&mut StringData::new("` a`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5908>
/// <https://spec.commonmark.org/0.29/#example-332>
fn t332_cr_nl() {
    init!("` a`\r\n");

    assert_eq!(
        // from spec: <p><code> a</code></p>
        [
            paragraph!(code!(" a"))
        ].as_slice(),
        body(&mut StringData::new("` a`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5908>
/// <https://spec.commonmark.org/0.29/#example-332>
fn t332_no_nl() {
    init!("` a`");

    assert_eq!(
        // from spec: <p><code> a</code></p>
        [
            paragraph!(code!(" a"))
        ].as_slice(),
        body(&mut StringData::new("` a`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5908
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5908>
/// <https://spec.commonmark.org/0.29/#example-332>
fn t332_tab() {
    init!("`\ta`\n");

    assert_eq!(
        // from spec: <p><code> a</code></p>
        [
            paragraph!(code!("\ta"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`\ta`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5917
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5917>
/// <https://spec.commonmark.org/0.29/#example-333>
fn t333() {
    init!("`\u{a0}b\u{a0}`\n");

    assert_eq!(
        // from spec: <p><code>\u{a0}b\u{a0}</code></p>
        [
            paragraph!(code!("\u{a0}b\u{a0}"))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}b\u{a0}`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5917
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5917>
/// <https://spec.commonmark.org/0.29/#example-333>
fn t333_cr() {
    init!("`\u{a0}b\u{a0}`\r");

    assert_eq!(
        // from spec: <p><code>\u{a0}b\u{a0}</code></p>
        [
            paragraph!(code!("\u{a0}b\u{a0}"))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}b\u{a0}`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5917
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5917>
/// <https://spec.commonmark.org/0.29/#example-333>
fn t333_cr_nl() {
    init!("`\u{a0}b\u{a0}`\r\n");

    assert_eq!(
        // from spec: <p><code>\u{a0}b\u{a0}</code></p>
        [
            paragraph!(code!("\u{a0}b\u{a0}"))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}b\u{a0}`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5917
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5917>
/// <https://spec.commonmark.org/0.29/#example-333>
fn t333_no_nl() {
    init!("`\u{a0}b\u{a0}`");

    assert_eq!(
        // from spec: <p><code>\u{a0}b\u{a0}</code></p>
        [
            paragraph!(code!("\u{a0}b\u{a0}"))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}b\u{a0}`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5925>
/// <https://spec.commonmark.org/0.29/#example-334>
fn t334() {
    init!("`\u{a0}`\n`  `\n");

    assert_eq!(
        // from spec: <p><code>\u{a0}</code>\n<code>  </code></p>
        [
            paragraph!(code!("\u{a0}"), SoftBreak, code!("  "))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}`\n`  `\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5925>
/// <https://spec.commonmark.org/0.29/#example-334>
fn t334_cr() {
    init!("`\u{a0}`\r`  `\r");

    assert_eq!(
        // from spec: <p><code>\u{a0}</code>\n<code>  </code></p>
        [
            paragraph!(code!("\u{a0}"), SoftBreak, code!("  "))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}`\r`  `\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5925>
/// <https://spec.commonmark.org/0.29/#example-334>
fn t334_cr_nl() {
    init!("`\u{a0}`\r\n`  `\r\n");

    assert_eq!(
        // from spec: <p><code>\u{a0}</code>\n<code>  </code></p>
        [
            paragraph!(code!("\u{a0}"), SoftBreak, code!("  "))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}`\r\n`  `\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5925
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5925>
/// <https://spec.commonmark.org/0.29/#example-334>
fn t334_no_nl() {
    init!("`\u{a0}`\n`  `");

    assert_eq!(
        // from spec: <p><code>\u{a0}</code>\n<code>  </code></p>
        [
            paragraph!(code!("\u{a0}"), SoftBreak, code!("  "))
        ].as_slice(),
        body(&mut StringData::new("`\u{a0}`\n`  `", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5936
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5936>
/// <https://spec.commonmark.org/0.29/#example-335>
fn t335() {
    init!("``\nfoo\nbar  \nbaz\n``\n");

    assert_eq!(
        // from spec: <p><code>foo bar   baz</code></p>
        [
            paragraph!(code!("foo bar   baz"))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo\nbar  \nbaz\n``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5936
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5936>
/// <https://spec.commonmark.org/0.29/#example-335>
fn t335_cr() {
    init!("``\rfoo\rbar  \rbaz\r``\r");

    assert_eq!(
        // from spec: <p><code>foo bar   baz</code></p>
        [
            paragraph!(code!("foo bar   baz"))
        ].as_slice(),
        body(&mut StringData::new("``\rfoo\rbar  \rbaz\r``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5936
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5936>
/// <https://spec.commonmark.org/0.29/#example-335>
fn t335_cr_nl() {
    init!("``\r\nfoo\r\nbar  \r\nbaz\r\n``\r\n");

    assert_eq!(
        // from spec: <p><code>foo bar   baz</code></p>
        [
            paragraph!(code!("foo bar   baz"))
        ].as_slice(),
        body(&mut StringData::new("``\r\nfoo\r\nbar  \r\nbaz\r\n``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5936
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5936>
/// <https://spec.commonmark.org/0.29/#example-335>
fn t335_no_nl() {
    init!("``\nfoo\nbar  \nbaz\n``");

    assert_eq!(
        // from spec: <p><code>foo bar   baz</code></p>
        [
            paragraph!(code!("foo bar   baz"))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo\nbar  \nbaz\n``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5946>
/// <https://spec.commonmark.org/0.29/#example-336>
fn t336() {
    init!("``\nfoo \n``\n");

    assert_eq!(
        // from spec: <p><code>foo </code></p>
        [
            paragraph!(code!("foo "))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo \n``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5946>
/// <https://spec.commonmark.org/0.29/#example-336>
fn t336_cr() {
    init!("``\rfoo \r``\r");

    assert_eq!(
        // from spec: <p><code>foo </code></p>
        [
            paragraph!(code!("foo "))
        ].as_slice(),
        body(&mut StringData::new("``\rfoo \r``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5946>
/// <https://spec.commonmark.org/0.29/#example-336>
fn t336_cr_nl() {
    init!("``\r\nfoo \r\n``\r\n");

    assert_eq!(
        // from spec: <p><code>foo </code></p>
        [
            paragraph!(code!("foo "))
        ].as_slice(),
        body(&mut StringData::new("``\r\nfoo \r\n``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5946>
/// <https://spec.commonmark.org/0.29/#example-336>
fn t336_no_nl() {
    init!("``\nfoo \n``");

    assert_eq!(
        // from spec: <p><code>foo </code></p>
        [
            paragraph!(code!("foo "))
        ].as_slice(),
        body(&mut StringData::new("``\nfoo \n``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5946>
/// <https://spec.commonmark.org/0.29/#example-336>
fn t336_tab() {
    init!("``\nfoo\t\n``\n");

    assert_eq!(
        // from spec: <p><code>foo </code></p>
        [
            paragraph!(code!("foo\t"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("``\nfoo\t\n``\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5957
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5957>
/// <https://spec.commonmark.org/0.29/#example-337>
fn t337() {
    init!("`foo   bar \nbaz`\n");

    assert_eq!(
        // from spec: <p><code>foo   bar  baz</code></p>
        [
            paragraph!(code!("foo   bar  baz"))
        ].as_slice(),
        body(&mut StringData::new("`foo   bar \nbaz`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5957
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5957>
/// <https://spec.commonmark.org/0.29/#example-337>
fn t337_cr() {
    init!("`foo   bar \rbaz`\r");

    assert_eq!(
        // from spec: <p><code>foo   bar  baz</code></p>
        [
            paragraph!(code!("foo   bar  baz"))
        ].as_slice(),
        body(&mut StringData::new("`foo   bar \rbaz`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5957
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5957>
/// <https://spec.commonmark.org/0.29/#example-337>
fn t337_cr_nl() {
    init!("`foo   bar \r\nbaz`\r\n");

    assert_eq!(
        // from spec: <p><code>foo   bar  baz</code></p>
        [
            paragraph!(code!("foo   bar  baz"))
        ].as_slice(),
        body(&mut StringData::new("`foo   bar \r\nbaz`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5957
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5957>
/// <https://spec.commonmark.org/0.29/#example-337>
fn t337_no_nl() {
    init!("`foo   bar \nbaz`");

    assert_eq!(
        // from spec: <p><code>foo   bar  baz</code></p>
        [
            paragraph!(code!("foo   bar  baz"))
        ].as_slice(),
        body(&mut StringData::new("`foo   bar \nbaz`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5957
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5957>
/// <https://spec.commonmark.org/0.29/#example-337>
fn t337_tab() {
    init!("`foo\t\t\tbar\t\nbaz`\n");

    assert_eq!(
        // from spec: <p><code>foo   bar  baz</code></p>
        [
            paragraph!(code!("foo\t\t\tbar\t\tbaz"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`foo\t\t\tbar\t\nbaz`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5974
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5974>
/// <https://spec.commonmark.org/0.29/#example-338>
fn t338() {
    init!("`foo\\`bar`\n");

    assert_eq!(
        // from spec: <p><code>foo\\</code>bar`</p>
        [
            paragraph!(code!("foo\\"), plain!("bar`"))
        ].as_slice(),
        body(&mut StringData::new("`foo\\`bar`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5974
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5974>
/// <https://spec.commonmark.org/0.29/#example-338>
fn t338_cr() {
    init!("`foo\\`bar`\r");

    assert_eq!(
        // from spec: <p><code>foo\\</code>bar`</p>
        [
            paragraph!(code!("foo\\"), plain!("bar`"))
        ].as_slice(),
        body(&mut StringData::new("`foo\\`bar`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5974
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5974>
/// <https://spec.commonmark.org/0.29/#example-338>
fn t338_cr_nl() {
    init!("`foo\\`bar`\r\n");

    assert_eq!(
        // from spec: <p><code>foo\\</code>bar`</p>
        [
            paragraph!(code!("foo\\"), plain!("bar`"))
        ].as_slice(),
        body(&mut StringData::new("`foo\\`bar`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5974
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5974>
/// <https://spec.commonmark.org/0.29/#example-338>
fn t338_no_nl() {
    init!("`foo\\`bar`");

    assert_eq!(
        // from spec: <p><code>foo\\</code>bar`</p>
        [
            paragraph!(code!("foo\\"), plain!("bar`"))
        ].as_slice(),
        body(&mut StringData::new("`foo\\`bar`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5985>
/// <https://spec.commonmark.org/0.29/#example-339>
fn t339() {
    init!("``foo`bar``\n");

    assert_eq!(
        // from spec: <p><code>foo`bar</code></p>
        [
            paragraph!(code!("foo`bar"))
        ].as_slice(),
        body(&mut StringData::new("``foo`bar``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5985>
/// <https://spec.commonmark.org/0.29/#example-339>
fn t339_cr() {
    init!("``foo`bar``\r");

    assert_eq!(
        // from spec: <p><code>foo`bar</code></p>
        [
            paragraph!(code!("foo`bar"))
        ].as_slice(),
        body(&mut StringData::new("``foo`bar``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5985>
/// <https://spec.commonmark.org/0.29/#example-339>
fn t339_cr_nl() {
    init!("``foo`bar``\r\n");

    assert_eq!(
        // from spec: <p><code>foo`bar</code></p>
        [
            paragraph!(code!("foo`bar"))
        ].as_slice(),
        body(&mut StringData::new("``foo`bar``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5985
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5985>
/// <https://spec.commonmark.org/0.29/#example-339>
fn t339_no_nl() {
    init!("``foo`bar``");

    assert_eq!(
        // from spec: <p><code>foo`bar</code></p>
        [
            paragraph!(code!("foo`bar"))
        ].as_slice(),
        body(&mut StringData::new("``foo`bar``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5991
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5991>
/// <https://spec.commonmark.org/0.29/#example-340>
fn t340() {
    init!("` foo `` bar `\n");

    assert_eq!(
        // from spec: <p><code>foo `` bar</code></p>
        [
            paragraph!(code!("foo `` bar"))
        ].as_slice(),
        body(&mut StringData::new("` foo `` bar `\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5991
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5991>
/// <https://spec.commonmark.org/0.29/#example-340>
fn t340_cr() {
    init!("` foo `` bar `\r");

    assert_eq!(
        // from spec: <p><code>foo `` bar</code></p>
        [
            paragraph!(code!("foo `` bar"))
        ].as_slice(),
        body(&mut StringData::new("` foo `` bar `\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5991
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5991>
/// <https://spec.commonmark.org/0.29/#example-340>
fn t340_cr_nl() {
    init!("` foo `` bar `\r\n");

    assert_eq!(
        // from spec: <p><code>foo `` bar</code></p>
        [
            paragraph!(code!("foo `` bar"))
        ].as_slice(),
        body(&mut StringData::new("` foo `` bar `\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5991
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5991>
/// <https://spec.commonmark.org/0.29/#example-340>
fn t340_no_nl() {
    init!("` foo `` bar `");

    assert_eq!(
        // from spec: <p><code>foo `` bar</code></p>
        [
            paragraph!(code!("foo `` bar"))
        ].as_slice(),
        body(&mut StringData::new("` foo `` bar `", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 5991
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L5991>
/// <https://spec.commonmark.org/0.29/#example-340>
fn t340_tab() {
    init!("` foo\t``\tbar `\n");

    assert_eq!(
        // from spec: <p><code>foo `` bar</code></p>
        [
            paragraph!(code!("foo\t``\tbar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("` foo\t``\tbar `\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6003
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6003>
/// <https://spec.commonmark.org/0.29/#example-341>
fn t341() {
    init!("*foo`*`\n");

    assert_eq!(
        // from spec: <p>*foo<code>*</code></p>
        [
            paragraph!(plain!("*foo"), code!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo`*`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6003
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6003>
/// <https://spec.commonmark.org/0.29/#example-341>
fn t341_cr() {
    init!("*foo`*`\r");

    assert_eq!(
        // from spec: <p>*foo<code>*</code></p>
        [
            paragraph!(plain!("*foo"), code!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo`*`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6003
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6003>
/// <https://spec.commonmark.org/0.29/#example-341>
fn t341_cr_nl() {
    init!("*foo`*`\r\n");

    assert_eq!(
        // from spec: <p>*foo<code>*</code></p>
        [
            paragraph!(plain!("*foo"), code!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo`*`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6003
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6003>
/// <https://spec.commonmark.org/0.29/#example-341>
fn t341_no_nl() {
    init!("*foo`*`");

    assert_eq!(
        // from spec: <p>*foo<code>*</code></p>
        [
            paragraph!(plain!("*foo"), code!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo`*`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6012
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6012>
/// <https://spec.commonmark.org/0.29/#example-342>
fn t342() {
    init!("[not a `link](/foo`)\n");

    assert_eq!(
        // from spec: <p>[not a <code>link](/foo</code>)</p>
        [
            paragraph!(plain!("[not a "), code!("link](/foo"), plain!(")"))
        ].as_slice(),
        body(&mut StringData::new("[not a `link](/foo`)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6012
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6012>
/// <https://spec.commonmark.org/0.29/#example-342>
fn t342_cr() {
    init!("[not a `link](/foo`)\r");

    assert_eq!(
        // from spec: <p>[not a <code>link](/foo</code>)</p>
        [
            paragraph!(plain!("[not a "), code!("link](/foo"), plain!(")"))
        ].as_slice(),
        body(&mut StringData::new("[not a `link](/foo`)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6012
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6012>
/// <https://spec.commonmark.org/0.29/#example-342>
fn t342_cr_nl() {
    init!("[not a `link](/foo`)\r\n");

    assert_eq!(
        // from spec: <p>[not a <code>link](/foo</code>)</p>
        [
            paragraph!(plain!("[not a "), code!("link](/foo"), plain!(")"))
        ].as_slice(),
        body(&mut StringData::new("[not a `link](/foo`)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6012
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6012>
/// <https://spec.commonmark.org/0.29/#example-342>
fn t342_no_nl() {
    init!("[not a `link](/foo`)");

    assert_eq!(
        // from spec: <p>[not a <code>link](/foo</code>)</p>
        [
            paragraph!(plain!("[not a "), code!("link](/foo"), plain!(")"))
        ].as_slice(),
        body(&mut StringData::new("[not a `link](/foo`)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6012
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6012>
/// <https://spec.commonmark.org/0.29/#example-342>
fn t342_tab() {
    init!("[not\ta\t`link](/foo`)\n");

    assert_eq!(
        // from spec: <p>[not a <code>link](/foo</code>)</p>
        [
            paragraph!(plain!("[not	a	"), code!("link](/foo"), plain!(")"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[not\ta\t`link](/foo`)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6022
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6022>
/// <https://spec.commonmark.org/0.29/#example-343>
fn t343() {
    init!("`<a href=\"`\">`\n");

    assert_eq!(
        // from spec: <p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
        [
            paragraph!(code!("<a href=\""), plain!("\">`"))
        ].as_slice(),
        body(&mut StringData::new("`<a href=\"`\">`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6022
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6022>
/// <https://spec.commonmark.org/0.29/#example-343>
fn t343_cr() {
    init!("`<a href=\"`\">`\r");

    assert_eq!(
        // from spec: <p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
        [
            paragraph!(code!("<a href=\""), plain!("\">`"))
        ].as_slice(),
        body(&mut StringData::new("`<a href=\"`\">`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6022
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6022>
/// <https://spec.commonmark.org/0.29/#example-343>
fn t343_cr_nl() {
    init!("`<a href=\"`\">`\r\n");

    assert_eq!(
        // from spec: <p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
        [
            paragraph!(code!("<a href=\""), plain!("\">`"))
        ].as_slice(),
        body(&mut StringData::new("`<a href=\"`\">`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6022
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6022>
/// <https://spec.commonmark.org/0.29/#example-343>
fn t343_no_nl() {
    init!("`<a href=\"`\">`");

    assert_eq!(
        // from spec: <p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
        [
            paragraph!(code!("<a href=\""), plain!("\">`"))
        ].as_slice(),
        body(&mut StringData::new("`<a href=\"`\">`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6022
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6022>
/// <https://spec.commonmark.org/0.29/#example-343>
fn t343_tab() {
    init!("`<a\thref=\"`\">`\n");

    assert_eq!(
        // from spec: <p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
        [
            paragraph!(code!("<a\thref=\""), plain!("\">`"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`<a\thref=\"`\">`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6031>
/// <https://spec.commonmark.org/0.29/#example-344>
fn t344() {
    init!("<a href=\"`\">`\n");

    assert_eq!(
        // from spec: <p><a href=\"`\">`</p>
        [
            paragraph!(html!("<a href=\"`\">"), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"`\">`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6031>
/// <https://spec.commonmark.org/0.29/#example-344>
fn t344_cr() {
    init!("<a href=\"`\">`\r");

    assert_eq!(
        // from spec: <p><a href=\"`\">`</p>
        [
            paragraph!(html!("<a href=\"`\">"), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"`\">`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6031>
/// <https://spec.commonmark.org/0.29/#example-344>
fn t344_cr_nl() {
    init!("<a href=\"`\">`\r\n");

    assert_eq!(
        // from spec: <p><a href=\"`\">`</p>
        [
            paragraph!(html!("<a href=\"`\">"), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"`\">`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6031>
/// <https://spec.commonmark.org/0.29/#example-344>
fn t344_no_nl() {
    init!("<a href=\"`\">`");

    assert_eq!(
        // from spec: <p><a href=\"`\">`</p>
        [
            paragraph!(html!("<a href=\"`\">"), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"`\">`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6031>
/// <https://spec.commonmark.org/0.29/#example-344>
fn t344_tab() {
    init!("<a\thref=\"`\">`\n");

    assert_eq!(
        // from spec: <p><a href=\"`\">`</p>
        [
            paragraph!(html!("<a	href=\"`\">"),	plain!("`"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"`\">`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6040>
/// <https://spec.commonmark.org/0.29/#example-345>
fn t345() {
    init!("`<http://foo.bar.`baz>`\n");

    assert_eq!(
        // from spec: <p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
        [
            paragraph!(code!("<http://foo.bar."), plain!("baz>`"))
        ].as_slice(),
        body(&mut StringData::new("`<http://foo.bar.`baz>`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6040>
/// <https://spec.commonmark.org/0.29/#example-345>
fn t345_cr() {
    init!("`<http://foo.bar.`baz>`\r");

    assert_eq!(
        // from spec: <p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
        [
            paragraph!(code!("<http://foo.bar."), plain!("baz>`"))
        ].as_slice(),
        body(&mut StringData::new("`<http://foo.bar.`baz>`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6040>
/// <https://spec.commonmark.org/0.29/#example-345>
fn t345_cr_nl() {
    init!("`<http://foo.bar.`baz>`\r\n");

    assert_eq!(
        // from spec: <p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
        [
            paragraph!(code!("<http://foo.bar."), plain!("baz>`"))
        ].as_slice(),
        body(&mut StringData::new("`<http://foo.bar.`baz>`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6040>
/// <https://spec.commonmark.org/0.29/#example-345>
fn t345_no_nl() {
    init!("`<http://foo.bar.`baz>`");

    assert_eq!(
        // from spec: <p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
        [
            paragraph!(code!("<http://foo.bar."), plain!("baz>`"))
        ].as_slice(),
        body(&mut StringData::new("`<http://foo.bar.`baz>`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6049>
/// <https://spec.commonmark.org/0.29/#example-346>
fn t346() {
    init!("<http://foo.bar.`baz>`\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>
        [
            paragraph!(link!("http://foo.bar.`baz", "", plain!("http://foo.bar.`baz")), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.`baz>`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6049>
/// <https://spec.commonmark.org/0.29/#example-346>
fn t346_cr() {
    init!("<http://foo.bar.`baz>`\r");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>
        [
            paragraph!(link!("http://foo.bar.`baz", "", plain!("http://foo.bar.`baz")), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.`baz>`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6049>
/// <https://spec.commonmark.org/0.29/#example-346>
fn t346_cr_nl() {
    init!("<http://foo.bar.`baz>`\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>
        [
            paragraph!(link!("http://foo.bar.`baz", "", plain!("http://foo.bar.`baz")), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.`baz>`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6049>
/// <https://spec.commonmark.org/0.29/#example-346>
fn t346_no_nl() {
    init!("<http://foo.bar.`baz>`");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>
        [
            paragraph!(link!("http://foo.bar.`baz", "", plain!("http://foo.bar.`baz")), plain!("`"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.`baz>`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6059>
/// <https://spec.commonmark.org/0.29/#example-347>
fn t347() {
    init!("```foo``\n");

    assert_eq!(
        // from spec: <p>```foo``</p>
        [
            paragraph!(plain!("```foo``"))
        ].as_slice(),
        body(&mut StringData::new("```foo``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6059>
/// <https://spec.commonmark.org/0.29/#example-347>
fn t347_cr() {
    init!("```foo``\r");

    assert_eq!(
        // from spec: <p>```foo``</p>
        [
            paragraph!(plain!("```foo``"))
        ].as_slice(),
        body(&mut StringData::new("```foo``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6059>
/// <https://spec.commonmark.org/0.29/#example-347>
fn t347_cr_nl() {
    init!("```foo``\r\n");

    assert_eq!(
        // from spec: <p>```foo``</p>
        [
            paragraph!(plain!("```foo``"))
        ].as_slice(),
        body(&mut StringData::new("```foo``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6059>
/// <https://spec.commonmark.org/0.29/#example-347>
fn t347_no_nl() {
    init!("```foo``");

    assert_eq!(
        // from spec: <p>```foo``</p>
        [
            paragraph!(plain!("```foo``"))
        ].as_slice(),
        body(&mut StringData::new("```foo``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6066>
/// <https://spec.commonmark.org/0.29/#example-348>
fn t348() {
    init!("`foo\n");

    assert_eq!(
        // from spec: <p>`foo</p>
        [
            paragraph!(plain!("`foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6066>
/// <https://spec.commonmark.org/0.29/#example-348>
fn t348_cr() {
    init!("`foo\r");

    assert_eq!(
        // from spec: <p>`foo</p>
        [
            paragraph!(plain!("`foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6066>
/// <https://spec.commonmark.org/0.29/#example-348>
fn t348_cr_nl() {
    init!("`foo\r\n");

    assert_eq!(
        // from spec: <p>`foo</p>
        [
            paragraph!(plain!("`foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6066>
/// <https://spec.commonmark.org/0.29/#example-348>
fn t348_no_nl() {
    init!("`foo");

    assert_eq!(
        // from spec: <p>`foo</p>
        [
            paragraph!(plain!("`foo"))
        ].as_slice(),
        body(&mut StringData::new("`foo", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6075
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6075>
/// <https://spec.commonmark.org/0.29/#example-349>
fn t349() {
    init!("`foo``bar``\n");

    assert_eq!(
        // from spec: <p>`foo<code>bar</code></p>
        [
            paragraph!(plain!("`foo"), code!("bar"))
        ].as_slice(),
        body(&mut StringData::new("`foo``bar``\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6075
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6075>
/// <https://spec.commonmark.org/0.29/#example-349>
fn t349_cr() {
    init!("`foo``bar``\r");

    assert_eq!(
        // from spec: <p>`foo<code>bar</code></p>
        [
            paragraph!(plain!("`foo"), code!("bar"))
        ].as_slice(),
        body(&mut StringData::new("`foo``bar``\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6075
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6075>
/// <https://spec.commonmark.org/0.29/#example-349>
fn t349_cr_nl() {
    init!("`foo``bar``\r\n");

    assert_eq!(
        // from spec: <p>`foo<code>bar</code></p>
        [
            paragraph!(plain!("`foo"), code!("bar"))
        ].as_slice(),
        body(&mut StringData::new("`foo``bar``\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6075
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6075>
/// <https://spec.commonmark.org/0.29/#example-349>
fn t349_no_nl() {
    init!("`foo``bar``");

    assert_eq!(
        // from spec: <p>`foo<code>bar</code></p>
        [
            paragraph!(plain!("`foo"), code!("bar"))
        ].as_slice(),
        body(&mut StringData::new("`foo``bar``", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6292
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6292>
/// <https://spec.commonmark.org/0.29/#example-350>
fn t350() {
    init!("*foo bar*\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6292
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6292>
/// <https://spec.commonmark.org/0.29/#example-350>
fn t350_cr() {
    init!("*foo bar*\r");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6292
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6292>
/// <https://spec.commonmark.org/0.29/#example-350>
fn t350_cr_nl() {
    init!("*foo bar*\r\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6292
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6292>
/// <https://spec.commonmark.org/0.29/#example-350>
fn t350_no_nl() {
    init!("*foo bar*");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6292
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6292>
/// <https://spec.commonmark.org/0.29/#example-350>
fn t350_tab() {
    init!("*foo\tbar*\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\tbar*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6302
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6302>
/// <https://spec.commonmark.org/0.29/#example-351>
fn t351() {
    init!("a * foo bar*\n");

    assert_eq!(
        // from spec: <p>a * foo bar*</p>
        [
            paragraph!(plain!("a * foo bar*"))
        ].as_slice(),
        body(&mut StringData::new("a * foo bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6302
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6302>
/// <https://spec.commonmark.org/0.29/#example-351>
fn t351_cr() {
    init!("a * foo bar*\r");

    assert_eq!(
        // from spec: <p>a * foo bar*</p>
        [
            paragraph!(plain!("a * foo bar*"))
        ].as_slice(),
        body(&mut StringData::new("a * foo bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6302
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6302>
/// <https://spec.commonmark.org/0.29/#example-351>
fn t351_cr_nl() {
    init!("a * foo bar*\r\n");

    assert_eq!(
        // from spec: <p>a * foo bar*</p>
        [
            paragraph!(plain!("a * foo bar*"))
        ].as_slice(),
        body(&mut StringData::new("a * foo bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6302
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6302>
/// <https://spec.commonmark.org/0.29/#example-351>
fn t351_no_nl() {
    init!("a * foo bar*");

    assert_eq!(
        // from spec: <p>a * foo bar*</p>
        [
            paragraph!(plain!("a * foo bar*"))
        ].as_slice(),
        body(&mut StringData::new("a * foo bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6302
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6302>
/// <https://spec.commonmark.org/0.29/#example-351>
fn t351_tab() {
    init!("a\t*\tfoo\tbar*\n");

    assert_eq!(
        // from spec: <p>a * foo bar*</p>
        [
            paragraph!(plain!("a	*	foo	bar*"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("a\t*\tfoo\tbar*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6313
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6313>
/// <https://spec.commonmark.org/0.29/#example-352>
fn t352() {
    init!("a*\"foo\"*\n");

    assert_eq!(
        // from spec: <p>a*&quot;foo&quot;*</p>
        [
            paragraph!(plain!("a*\"foo\"*"))
        ].as_slice(),
        body(&mut StringData::new("a*\"foo\"*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6313
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6313>
/// <https://spec.commonmark.org/0.29/#example-352>
fn t352_cr() {
    init!("a*\"foo\"*\r");

    assert_eq!(
        // from spec: <p>a*&quot;foo&quot;*</p>
        [
            paragraph!(plain!("a*\"foo\"*"))
        ].as_slice(),
        body(&mut StringData::new("a*\"foo\"*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6313
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6313>
/// <https://spec.commonmark.org/0.29/#example-352>
fn t352_cr_nl() {
    init!("a*\"foo\"*\r\n");

    assert_eq!(
        // from spec: <p>a*&quot;foo&quot;*</p>
        [
            paragraph!(plain!("a*\"foo\"*"))
        ].as_slice(),
        body(&mut StringData::new("a*\"foo\"*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6313
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6313>
/// <https://spec.commonmark.org/0.29/#example-352>
fn t352_no_nl() {
    init!("a*\"foo\"*");

    assert_eq!(
        // from spec: <p>a*&quot;foo&quot;*</p>
        [
            paragraph!(plain!("a*\"foo\"*"))
        ].as_slice(),
        body(&mut StringData::new("a*\"foo\"*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6322
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6322>
/// <https://spec.commonmark.org/0.29/#example-353>
fn t353() {
    init!("*\u{a0}a\u{a0}*\n");

    assert_eq!(
        // from spec: <p>*\u{a0}a\u{a0}*</p>
        [
            paragraph!(plain!("*\u{a0}a\u{a0}*"))
        ].as_slice(),
        body(&mut StringData::new("*\u{a0}a\u{a0}*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6322
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6322>
/// <https://spec.commonmark.org/0.29/#example-353>
fn t353_cr() {
    init!("*\u{a0}a\u{a0}*\r");

    assert_eq!(
        // from spec: <p>*\u{a0}a\u{a0}*</p>
        [
            paragraph!(plain!("*\u{a0}a\u{a0}*"))
        ].as_slice(),
        body(&mut StringData::new("*\u{a0}a\u{a0}*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6322
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6322>
/// <https://spec.commonmark.org/0.29/#example-353>
fn t353_cr_nl() {
    init!("*\u{a0}a\u{a0}*\r\n");

    assert_eq!(
        // from spec: <p>*\u{a0}a\u{a0}*</p>
        [
            paragraph!(plain!("*\u{a0}a\u{a0}*"))
        ].as_slice(),
        body(&mut StringData::new("*\u{a0}a\u{a0}*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6322
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6322>
/// <https://spec.commonmark.org/0.29/#example-353>
fn t353_no_nl() {
    init!("*\u{a0}a\u{a0}*");

    assert_eq!(
        // from spec: <p>*\u{a0}a\u{a0}*</p>
        [
            paragraph!(plain!("*\u{a0}a\u{a0}*"))
        ].as_slice(),
        body(&mut StringData::new("*\u{a0}a\u{a0}*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6331>
/// <https://spec.commonmark.org/0.29/#example-354>
fn t354() {
    init!("foo*bar*\n");

    assert_eq!(
        // from spec: <p>foo<em>bar</em></p>
        [
            paragraph!(plain!("foo"), emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo*bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6331>
/// <https://spec.commonmark.org/0.29/#example-354>
fn t354_cr() {
    init!("foo*bar*\r");

    assert_eq!(
        // from spec: <p>foo<em>bar</em></p>
        [
            paragraph!(plain!("foo"), emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo*bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6331>
/// <https://spec.commonmark.org/0.29/#example-354>
fn t354_cr_nl() {
    init!("foo*bar*\r\n");

    assert_eq!(
        // from spec: <p>foo<em>bar</em></p>
        [
            paragraph!(plain!("foo"), emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo*bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6331
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6331>
/// <https://spec.commonmark.org/0.29/#example-354>
fn t354_no_nl() {
    init!("foo*bar*");

    assert_eq!(
        // from spec: <p>foo<em>bar</em></p>
        [
            paragraph!(plain!("foo"), emph!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo*bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6338>
/// <https://spec.commonmark.org/0.29/#example-355>
fn t355() {
    init!("5*6*78\n");

    assert_eq!(
        // from spec: <p>5<em>6</em>78</p>
        [
            paragraph!(plain!("5"), emph!(plain!("6")), plain!("78"))
        ].as_slice(),
        body(&mut StringData::new("5*6*78\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6338>
/// <https://spec.commonmark.org/0.29/#example-355>
fn t355_cr() {
    init!("5*6*78\r");

    assert_eq!(
        // from spec: <p>5<em>6</em>78</p>
        [
            paragraph!(plain!("5"), emph!(plain!("6")), plain!("78"))
        ].as_slice(),
        body(&mut StringData::new("5*6*78\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6338>
/// <https://spec.commonmark.org/0.29/#example-355>
fn t355_cr_nl() {
    init!("5*6*78\r\n");

    assert_eq!(
        // from spec: <p>5<em>6</em>78</p>
        [
            paragraph!(plain!("5"), emph!(plain!("6")), plain!("78"))
        ].as_slice(),
        body(&mut StringData::new("5*6*78\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6338>
/// <https://spec.commonmark.org/0.29/#example-355>
fn t355_no_nl() {
    init!("5*6*78");

    assert_eq!(
        // from spec: <p>5<em>6</em>78</p>
        [
            paragraph!(plain!("5"), emph!(plain!("6")), plain!("78"))
        ].as_slice(),
        body(&mut StringData::new("5*6*78", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6347>
/// <https://spec.commonmark.org/0.29/#example-356>
fn t356() {
    init!("_foo bar_\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("_foo bar_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6347>
/// <https://spec.commonmark.org/0.29/#example-356>
fn t356_cr() {
    init!("_foo bar_\r");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("_foo bar_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6347>
/// <https://spec.commonmark.org/0.29/#example-356>
fn t356_cr_nl() {
    init!("_foo bar_\r\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("_foo bar_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6347>
/// <https://spec.commonmark.org/0.29/#example-356>
fn t356_no_nl() {
    init!("_foo bar_");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("_foo bar_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6347
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6347>
/// <https://spec.commonmark.org/0.29/#example-356>
fn t356_tab() {
    init!("_foo\tbar_\n");

    assert_eq!(
        // from spec: <p><em>foo bar</em></p>
        [
            paragraph!(emph!(plain!("foo	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_foo\tbar_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6357
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6357>
/// <https://spec.commonmark.org/0.29/#example-357>
fn t357() {
    init!("_ foo bar_\n");

    assert_eq!(
        // from spec: <p>_ foo bar_</p>
        [
            paragraph!(plain!("_ foo bar_"))
        ].as_slice(),
        body(&mut StringData::new("_ foo bar_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6357
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6357>
/// <https://spec.commonmark.org/0.29/#example-357>
fn t357_cr() {
    init!("_ foo bar_\r");

    assert_eq!(
        // from spec: <p>_ foo bar_</p>
        [
            paragraph!(plain!("_ foo bar_"))
        ].as_slice(),
        body(&mut StringData::new("_ foo bar_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6357
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6357>
/// <https://spec.commonmark.org/0.29/#example-357>
fn t357_cr_nl() {
    init!("_ foo bar_\r\n");

    assert_eq!(
        // from spec: <p>_ foo bar_</p>
        [
            paragraph!(plain!("_ foo bar_"))
        ].as_slice(),
        body(&mut StringData::new("_ foo bar_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6357
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6357>
/// <https://spec.commonmark.org/0.29/#example-357>
fn t357_no_nl() {
    init!("_ foo bar_");

    assert_eq!(
        // from spec: <p>_ foo bar_</p>
        [
            paragraph!(plain!("_ foo bar_"))
        ].as_slice(),
        body(&mut StringData::new("_ foo bar_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6357
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6357>
/// <https://spec.commonmark.org/0.29/#example-357>
fn t357_tab() {
    init!("_\tfoo\tbar_\n");

    assert_eq!(
        // from spec: <p>_ foo bar_</p>
        [
            paragraph!(plain!("_	foo	bar_"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_\tfoo\tbar_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6367
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6367>
/// <https://spec.commonmark.org/0.29/#example-358>
fn t358() {
    init!("a_\"foo\"_\n");

    assert_eq!(
        // from spec: <p>a_&quot;foo&quot;_</p>
        [
            paragraph!(plain!("a_\"foo\"_"))
        ].as_slice(),
        body(&mut StringData::new("a_\"foo\"_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6367
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6367>
/// <https://spec.commonmark.org/0.29/#example-358>
fn t358_cr() {
    init!("a_\"foo\"_\r");

    assert_eq!(
        // from spec: <p>a_&quot;foo&quot;_</p>
        [
            paragraph!(plain!("a_\"foo\"_"))
        ].as_slice(),
        body(&mut StringData::new("a_\"foo\"_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6367
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6367>
/// <https://spec.commonmark.org/0.29/#example-358>
fn t358_cr_nl() {
    init!("a_\"foo\"_\r\n");

    assert_eq!(
        // from spec: <p>a_&quot;foo&quot;_</p>
        [
            paragraph!(plain!("a_\"foo\"_"))
        ].as_slice(),
        body(&mut StringData::new("a_\"foo\"_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6367
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6367>
/// <https://spec.commonmark.org/0.29/#example-358>
fn t358_no_nl() {
    init!("a_\"foo\"_");

    assert_eq!(
        // from spec: <p>a_&quot;foo&quot;_</p>
        [
            paragraph!(plain!("a_\"foo\"_"))
        ].as_slice(),
        body(&mut StringData::new("a_\"foo\"_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6376
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6376>
/// <https://spec.commonmark.org/0.29/#example-359>
fn t359() {
    init!("foo_bar_\n");

    assert_eq!(
        // from spec: <p>foo_bar_</p>
        [
            paragraph!(plain!("foo_bar_"))
        ].as_slice(),
        body(&mut StringData::new("foo_bar_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6376
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6376>
/// <https://spec.commonmark.org/0.29/#example-359>
fn t359_cr() {
    init!("foo_bar_\r");

    assert_eq!(
        // from spec: <p>foo_bar_</p>
        [
            paragraph!(plain!("foo_bar_"))
        ].as_slice(),
        body(&mut StringData::new("foo_bar_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6376
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6376>
/// <https://spec.commonmark.org/0.29/#example-359>
fn t359_cr_nl() {
    init!("foo_bar_\r\n");

    assert_eq!(
        // from spec: <p>foo_bar_</p>
        [
            paragraph!(plain!("foo_bar_"))
        ].as_slice(),
        body(&mut StringData::new("foo_bar_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6376
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6376>
/// <https://spec.commonmark.org/0.29/#example-359>
fn t359_no_nl() {
    init!("foo_bar_");

    assert_eq!(
        // from spec: <p>foo_bar_</p>
        [
            paragraph!(plain!("foo_bar_"))
        ].as_slice(),
        body(&mut StringData::new("foo_bar_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6383
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6383>
/// <https://spec.commonmark.org/0.29/#example-360>
fn t360() {
    init!("5_6_78\n");

    assert_eq!(
        // from spec: <p>5_6_78</p>
        [
            paragraph!(plain!("5_6_78"))
        ].as_slice(),
        body(&mut StringData::new("5_6_78\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6383
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6383>
/// <https://spec.commonmark.org/0.29/#example-360>
fn t360_cr() {
    init!("5_6_78\r");

    assert_eq!(
        // from spec: <p>5_6_78</p>
        [
            paragraph!(plain!("5_6_78"))
        ].as_slice(),
        body(&mut StringData::new("5_6_78\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6383
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6383>
/// <https://spec.commonmark.org/0.29/#example-360>
fn t360_cr_nl() {
    init!("5_6_78\r\n");

    assert_eq!(
        // from spec: <p>5_6_78</p>
        [
            paragraph!(plain!("5_6_78"))
        ].as_slice(),
        body(&mut StringData::new("5_6_78\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6383
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6383>
/// <https://spec.commonmark.org/0.29/#example-360>
fn t360_no_nl() {
    init!("5_6_78");

    assert_eq!(
        // from spec: <p>5_6_78</p>
        [
            paragraph!(plain!("5_6_78"))
        ].as_slice(),
        body(&mut StringData::new("5_6_78", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6390>
/// <https://spec.commonmark.org/0.29/#example-361>
fn t361() {
    init!("пристаням_стремятся_\n");

    assert_eq!(
        // from spec: <p>пристаням_стремятся_</p>
        [
            paragraph!(plain!("пристаням_стремятся_"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6390>
/// <https://spec.commonmark.org/0.29/#example-361>
fn t361_cr() {
    init!("пристаням_стремятся_\r");

    assert_eq!(
        // from spec: <p>пристаням_стремятся_</p>
        [
            paragraph!(plain!("пристаням_стремятся_"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6390>
/// <https://spec.commonmark.org/0.29/#example-361>
fn t361_cr_nl() {
    init!("пристаням_стремятся_\r\n");

    assert_eq!(
        // from spec: <p>пристаням_стремятся_</p>
        [
            paragraph!(plain!("пристаням_стремятся_"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6390
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6390>
/// <https://spec.commonmark.org/0.29/#example-361>
fn t361_no_nl() {
    init!("пристаням_стремятся_");

    assert_eq!(
        // from spec: <p>пристаням_стремятся_</p>
        [
            paragraph!(plain!("пристаням_стремятся_"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6400
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6400>
/// <https://spec.commonmark.org/0.29/#example-362>
fn t362() {
    init!("aa_\"bb\"_cc\n");

    assert_eq!(
        // from spec: <p>aa_&quot;bb&quot;_cc</p>
        [
            paragraph!(plain!("aa_\"bb\"_cc"))
        ].as_slice(),
        body(&mut StringData::new("aa_\"bb\"_cc\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6400
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6400>
/// <https://spec.commonmark.org/0.29/#example-362>
fn t362_cr() {
    init!("aa_\"bb\"_cc\r");

    assert_eq!(
        // from spec: <p>aa_&quot;bb&quot;_cc</p>
        [
            paragraph!(plain!("aa_\"bb\"_cc"))
        ].as_slice(),
        body(&mut StringData::new("aa_\"bb\"_cc\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6400
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6400>
/// <https://spec.commonmark.org/0.29/#example-362>
fn t362_cr_nl() {
    init!("aa_\"bb\"_cc\r\n");

    assert_eq!(
        // from spec: <p>aa_&quot;bb&quot;_cc</p>
        [
            paragraph!(plain!("aa_\"bb\"_cc"))
        ].as_slice(),
        body(&mut StringData::new("aa_\"bb\"_cc\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6400
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6400>
/// <https://spec.commonmark.org/0.29/#example-362>
fn t362_no_nl() {
    init!("aa_\"bb\"_cc");

    assert_eq!(
        // from spec: <p>aa_&quot;bb&quot;_cc</p>
        [
            paragraph!(plain!("aa_\"bb\"_cc"))
        ].as_slice(),
        body(&mut StringData::new("aa_\"bb\"_cc", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6411>
/// <https://spec.commonmark.org/0.29/#example-363>
fn t363() {
    init!("foo-_(bar)_\n");

    assert_eq!(
        // from spec: <p>foo-<em>(bar)</em></p>
        [
            paragraph!(plain!("foo-"), emph!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-_(bar)_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6411>
/// <https://spec.commonmark.org/0.29/#example-363>
fn t363_cr() {
    init!("foo-_(bar)_\r");

    assert_eq!(
        // from spec: <p>foo-<em>(bar)</em></p>
        [
            paragraph!(plain!("foo-"), emph!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-_(bar)_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6411>
/// <https://spec.commonmark.org/0.29/#example-363>
fn t363_cr_nl() {
    init!("foo-_(bar)_\r\n");

    assert_eq!(
        // from spec: <p>foo-<em>(bar)</em></p>
        [
            paragraph!(plain!("foo-"), emph!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-_(bar)_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6411
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6411>
/// <https://spec.commonmark.org/0.29/#example-363>
fn t363_no_nl() {
    init!("foo-_(bar)_");

    assert_eq!(
        // from spec: <p>foo-<em>(bar)</em></p>
        [
            paragraph!(plain!("foo-"), emph!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-_(bar)_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6423>
/// <https://spec.commonmark.org/0.29/#example-364>
fn t364() {
    init!("_foo*\n");

    assert_eq!(
        // from spec: <p>_foo*</p>
        [
            paragraph!(plain!("_foo*"))
        ].as_slice(),
        body(&mut StringData::new("_foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6423>
/// <https://spec.commonmark.org/0.29/#example-364>
fn t364_cr() {
    init!("_foo*\r");

    assert_eq!(
        // from spec: <p>_foo*</p>
        [
            paragraph!(plain!("_foo*"))
        ].as_slice(),
        body(&mut StringData::new("_foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6423>
/// <https://spec.commonmark.org/0.29/#example-364>
fn t364_cr_nl() {
    init!("_foo*\r\n");

    assert_eq!(
        // from spec: <p>_foo*</p>
        [
            paragraph!(plain!("_foo*"))
        ].as_slice(),
        body(&mut StringData::new("_foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6423>
/// <https://spec.commonmark.org/0.29/#example-364>
fn t364_no_nl() {
    init!("_foo*");

    assert_eq!(
        // from spec: <p>_foo*</p>
        [
            paragraph!(plain!("_foo*"))
        ].as_slice(),
        body(&mut StringData::new("_foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6433
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6433>
/// <https://spec.commonmark.org/0.29/#example-365>
fn t365() {
    init!("*foo bar *\n");

    assert_eq!(
        // from spec: <p>*foo bar *</p>
        [
            paragraph!(plain!("*foo bar *"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar *\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6433
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6433>
/// <https://spec.commonmark.org/0.29/#example-365>
fn t365_cr() {
    init!("*foo bar *\r");

    assert_eq!(
        // from spec: <p>*foo bar *</p>
        [
            paragraph!(plain!("*foo bar *"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar *\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6433
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6433>
/// <https://spec.commonmark.org/0.29/#example-365>
fn t365_cr_nl() {
    init!("*foo bar *\r\n");

    assert_eq!(
        // from spec: <p>*foo bar *</p>
        [
            paragraph!(plain!("*foo bar *"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar *\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6433
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6433>
/// <https://spec.commonmark.org/0.29/#example-365>
fn t365_no_nl() {
    init!("*foo bar *");

    assert_eq!(
        // from spec: <p>*foo bar *</p>
        [
            paragraph!(plain!("*foo bar *"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar *", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6433
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6433>
/// <https://spec.commonmark.org/0.29/#example-365>
fn t365_tab() {
    init!("*foo\tbar\t*\n");

    assert_eq!(
        // from spec: <p>*foo bar *</p>
        [
            paragraph!(plain!("*foo	bar	*"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\tbar\t*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6442
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6442>
/// <https://spec.commonmark.org/0.29/#example-366>
fn t366() {
    init!("*foo bar\n*\n");

    assert_eq!(
        // from spec: <p>*foo bar\n*</p>
        [
            paragraph!(plain!("*foo bar"), SoftBreak, plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar\n*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6442
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6442>
/// <https://spec.commonmark.org/0.29/#example-366>
fn t366_cr() {
    init!("*foo bar\r*\r");

    assert_eq!(
        // from spec: <p>*foo bar\n*</p>
        [
            paragraph!(plain!("*foo bar"), SoftBreak, plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar\r*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6442
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6442>
/// <https://spec.commonmark.org/0.29/#example-366>
fn t366_cr_nl() {
    init!("*foo bar\r\n*\r\n");

    assert_eq!(
        // from spec: <p>*foo bar\n*</p>
        [
            paragraph!(plain!("*foo bar"), SoftBreak, plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar\r\n*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6442
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6442>
/// <https://spec.commonmark.org/0.29/#example-366>
fn t366_no_nl() {
    init!("*foo bar\n*");

    assert_eq!(
        // from spec: <p>*foo bar\n*</p>
        [
            paragraph!(plain!("*foo bar"), SoftBreak, plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo bar\n*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6442
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6442>
/// <https://spec.commonmark.org/0.29/#example-366>
fn t366_tab() {
    init!("*foo\tbar\n*\n");

    assert_eq!(
        // from spec: <p>*foo bar\n*</p>
        [
            paragraph!(plain!("*foo	bar"), SoftBreak, plain!("*"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\tbar\n*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6455
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6455>
/// <https://spec.commonmark.org/0.29/#example-367>
fn t367() {
    init!("*(*foo)\n");

    assert_eq!(
        // from spec: <p>*(*foo)</p>
        [
            paragraph!(plain!("*(*foo)"))
        ].as_slice(),
        body(&mut StringData::new("*(*foo)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6455
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6455>
/// <https://spec.commonmark.org/0.29/#example-367>
fn t367_cr() {
    init!("*(*foo)\r");

    assert_eq!(
        // from spec: <p>*(*foo)</p>
        [
            paragraph!(plain!("*(*foo)"))
        ].as_slice(),
        body(&mut StringData::new("*(*foo)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6455
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6455>
/// <https://spec.commonmark.org/0.29/#example-367>
fn t367_cr_nl() {
    init!("*(*foo)\r\n");

    assert_eq!(
        // from spec: <p>*(*foo)</p>
        [
            paragraph!(plain!("*(*foo)"))
        ].as_slice(),
        body(&mut StringData::new("*(*foo)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6455
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6455>
/// <https://spec.commonmark.org/0.29/#example-367>
fn t367_no_nl() {
    init!("*(*foo)");

    assert_eq!(
        // from spec: <p>*(*foo)</p>
        [
            paragraph!(plain!("*(*foo)"))
        ].as_slice(),
        body(&mut StringData::new("*(*foo)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6465>
/// <https://spec.commonmark.org/0.29/#example-368>
fn t368() {
    init!("*(*foo*)*\n");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(*foo*)*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6465>
/// <https://spec.commonmark.org/0.29/#example-368>
fn t368_cr() {
    init!("*(*foo*)*\r");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(*foo*)*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6465>
/// <https://spec.commonmark.org/0.29/#example-368>
fn t368_cr_nl() {
    init!("*(*foo*)*\r\n");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(*foo*)*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6465
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6465>
/// <https://spec.commonmark.org/0.29/#example-368>
fn t368_no_nl() {
    init!("*(*foo*)*");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(*foo*)*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6474
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6474>
/// <https://spec.commonmark.org/0.29/#example-369>
fn t369() {
    init!("*foo*bar\n");

    assert_eq!(
        // from spec: <p><em>foo</em>bar</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("*foo*bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6474
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6474>
/// <https://spec.commonmark.org/0.29/#example-369>
fn t369_cr() {
    init!("*foo*bar\r");

    assert_eq!(
        // from spec: <p><em>foo</em>bar</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("*foo*bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6474
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6474>
/// <https://spec.commonmark.org/0.29/#example-369>
fn t369_cr_nl() {
    init!("*foo*bar\r\n");

    assert_eq!(
        // from spec: <p><em>foo</em>bar</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("*foo*bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6474
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6474>
/// <https://spec.commonmark.org/0.29/#example-369>
fn t369_no_nl() {
    init!("*foo*bar");

    assert_eq!(
        // from spec: <p><em>foo</em>bar</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("*foo*bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6487
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6487>
/// <https://spec.commonmark.org/0.29/#example-370>
fn t370() {
    init!("_foo bar _\n");

    assert_eq!(
        // from spec: <p>_foo bar _</p>
        [
            paragraph!(plain!("_foo bar _"))
        ].as_slice(),
        body(&mut StringData::new("_foo bar _\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6487
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6487>
/// <https://spec.commonmark.org/0.29/#example-370>
fn t370_cr() {
    init!("_foo bar _\r");

    assert_eq!(
        // from spec: <p>_foo bar _</p>
        [
            paragraph!(plain!("_foo bar _"))
        ].as_slice(),
        body(&mut StringData::new("_foo bar _\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6487
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6487>
/// <https://spec.commonmark.org/0.29/#example-370>
fn t370_cr_nl() {
    init!("_foo bar _\r\n");

    assert_eq!(
        // from spec: <p>_foo bar _</p>
        [
            paragraph!(plain!("_foo bar _"))
        ].as_slice(),
        body(&mut StringData::new("_foo bar _\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6487
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6487>
/// <https://spec.commonmark.org/0.29/#example-370>
fn t370_no_nl() {
    init!("_foo bar _");

    assert_eq!(
        // from spec: <p>_foo bar _</p>
        [
            paragraph!(plain!("_foo bar _"))
        ].as_slice(),
        body(&mut StringData::new("_foo bar _", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6487
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6487>
/// <https://spec.commonmark.org/0.29/#example-370>
fn t370_tab() {
    init!("_foo\tbar\t_\n");

    assert_eq!(
        // from spec: <p>_foo bar _</p>
        [
            paragraph!(plain!("_foo	bar	_"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_foo\tbar\t_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6497
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6497>
/// <https://spec.commonmark.org/0.29/#example-371>
fn t371() {
    init!("_(_foo)\n");

    assert_eq!(
        // from spec: <p>_(_foo)</p>
        [
            paragraph!(plain!("_(_foo)"))
        ].as_slice(),
        body(&mut StringData::new("_(_foo)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6497
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6497>
/// <https://spec.commonmark.org/0.29/#example-371>
fn t371_cr() {
    init!("_(_foo)\r");

    assert_eq!(
        // from spec: <p>_(_foo)</p>
        [
            paragraph!(plain!("_(_foo)"))
        ].as_slice(),
        body(&mut StringData::new("_(_foo)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6497
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6497>
/// <https://spec.commonmark.org/0.29/#example-371>
fn t371_cr_nl() {
    init!("_(_foo)\r\n");

    assert_eq!(
        // from spec: <p>_(_foo)</p>
        [
            paragraph!(plain!("_(_foo)"))
        ].as_slice(),
        body(&mut StringData::new("_(_foo)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6497
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6497>
/// <https://spec.commonmark.org/0.29/#example-371>
fn t371_no_nl() {
    init!("_(_foo)");

    assert_eq!(
        // from spec: <p>_(_foo)</p>
        [
            paragraph!(plain!("_(_foo)"))
        ].as_slice(),
        body(&mut StringData::new("_(_foo)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6506
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6506>
/// <https://spec.commonmark.org/0.29/#example-372>
fn t372() {
    init!("_(_foo_)_\n");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(_foo_)_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6506
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6506>
/// <https://spec.commonmark.org/0.29/#example-372>
fn t372_cr() {
    init!("_(_foo_)_\r");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(_foo_)_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6506
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6506>
/// <https://spec.commonmark.org/0.29/#example-372>
fn t372_cr_nl() {
    init!("_(_foo_)_\r\n");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(_foo_)_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6506
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6506>
/// <https://spec.commonmark.org/0.29/#example-372>
fn t372_no_nl() {
    init!("_(_foo_)_");

    assert_eq!(
        // from spec: <p><em>(<em>foo</em>)</em></p>
        [
            paragraph!(emph!(plain!("("), emph!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(_foo_)_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6515
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6515>
/// <https://spec.commonmark.org/0.29/#example-373>
fn t373() {
    init!("_foo_bar\n");

    assert_eq!(
        // from spec: <p>_foo_bar</p>
        [
            paragraph!(plain!("_foo_bar"))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6515
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6515>
/// <https://spec.commonmark.org/0.29/#example-373>
fn t373_cr() {
    init!("_foo_bar\r");

    assert_eq!(
        // from spec: <p>_foo_bar</p>
        [
            paragraph!(plain!("_foo_bar"))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6515
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6515>
/// <https://spec.commonmark.org/0.29/#example-373>
fn t373_cr_nl() {
    init!("_foo_bar\r\n");

    assert_eq!(
        // from spec: <p>_foo_bar</p>
        [
            paragraph!(plain!("_foo_bar"))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6515
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6515>
/// <https://spec.commonmark.org/0.29/#example-373>
fn t373_no_nl() {
    init!("_foo_bar");

    assert_eq!(
        // from spec: <p>_foo_bar</p>
        [
            paragraph!(plain!("_foo_bar"))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6522
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6522>
/// <https://spec.commonmark.org/0.29/#example-374>
fn t374() {
    init!("_пристаням_стремятся\n");

    assert_eq!(
        // from spec: <p>_пристаням_стремятся</p>
        [
            paragraph!(plain!("_пристаням_стремятся"))
        ].as_slice(),
        body(&mut StringData::new("_\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6522
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6522>
/// <https://spec.commonmark.org/0.29/#example-374>
fn t374_cr() {
    init!("_пристаням_стремятся\r");

    assert_eq!(
        // from spec: <p>_пристаням_стремятся</p>
        [
            paragraph!(plain!("_пристаням_стремятся"))
        ].as_slice(),
        body(&mut StringData::new("_\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6522
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6522>
/// <https://spec.commonmark.org/0.29/#example-374>
fn t374_cr_nl() {
    init!("_пристаням_стремятся\r\n");

    assert_eq!(
        // from spec: <p>_пристаням_стремятся</p>
        [
            paragraph!(plain!("_пристаням_стремятся"))
        ].as_slice(),
        body(&mut StringData::new("_\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6522
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6522>
/// <https://spec.commonmark.org/0.29/#example-374>
fn t374_no_nl() {
    init!("_пристаням_стремятся");

    assert_eq!(
        // from spec: <p>_пристаням_стремятся</p>
        [
            paragraph!(plain!("_пристаням_стремятся"))
        ].as_slice(),
        body(&mut StringData::new("_\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}_\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6529>
/// <https://spec.commonmark.org/0.29/#example-375>
fn t375() {
    init!("_foo_bar_baz_\n");

    assert_eq!(
        // from spec: <p><em>foo_bar_baz</em></p>
        [
            paragraph!(emph!(plain!("foo_bar_baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar_baz_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6529>
/// <https://spec.commonmark.org/0.29/#example-375>
fn t375_cr() {
    init!("_foo_bar_baz_\r");

    assert_eq!(
        // from spec: <p><em>foo_bar_baz</em></p>
        [
            paragraph!(emph!(plain!("foo_bar_baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar_baz_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6529>
/// <https://spec.commonmark.org/0.29/#example-375>
fn t375_cr_nl() {
    init!("_foo_bar_baz_\r\n");

    assert_eq!(
        // from spec: <p><em>foo_bar_baz</em></p>
        [
            paragraph!(emph!(plain!("foo_bar_baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar_baz_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6529
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6529>
/// <https://spec.commonmark.org/0.29/#example-375>
fn t375_no_nl() {
    init!("_foo_bar_baz_");

    assert_eq!(
        // from spec: <p><em>foo_bar_baz</em></p>
        [
            paragraph!(emph!(plain!("foo_bar_baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo_bar_baz_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6540
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6540>
/// <https://spec.commonmark.org/0.29/#example-376>
fn t376() {
    init!("_(bar)_.\n");

    assert_eq!(
        // from spec: <p><em>(bar)</em>.</p>
        [
            paragraph!(emph!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("_(bar)_.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6540
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6540>
/// <https://spec.commonmark.org/0.29/#example-376>
fn t376_cr() {
    init!("_(bar)_.\r");

    assert_eq!(
        // from spec: <p><em>(bar)</em>.</p>
        [
            paragraph!(emph!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("_(bar)_.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6540
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6540>
/// <https://spec.commonmark.org/0.29/#example-376>
fn t376_cr_nl() {
    init!("_(bar)_.\r\n");

    assert_eq!(
        // from spec: <p><em>(bar)</em>.</p>
        [
            paragraph!(emph!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("_(bar)_.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6540
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6540>
/// <https://spec.commonmark.org/0.29/#example-376>
fn t376_no_nl() {
    init!("_(bar)_.");

    assert_eq!(
        // from spec: <p><em>(bar)</em>.</p>
        [
            paragraph!(emph!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("_(bar)_.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6549
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6549>
/// <https://spec.commonmark.org/0.29/#example-377>
fn t377() {
    init!("**foo bar**\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo bar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6549
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6549>
/// <https://spec.commonmark.org/0.29/#example-377>
fn t377_cr() {
    init!("**foo bar**\r");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo bar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6549
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6549>
/// <https://spec.commonmark.org/0.29/#example-377>
fn t377_cr_nl() {
    init!("**foo bar**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo bar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6549
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6549>
/// <https://spec.commonmark.org/0.29/#example-377>
fn t377_no_nl() {
    init!("**foo bar**");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo bar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6549
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6549>
/// <https://spec.commonmark.org/0.29/#example-377>
fn t377_tab() {
    init!("**foo\tbar**\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\tbar**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6559
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6559>
/// <https://spec.commonmark.org/0.29/#example-378>
fn t378() {
    init!("** foo bar**\n");

    assert_eq!(
        // from spec: <p>** foo bar**</p>
        [
            paragraph!(plain!("** foo bar**"))
        ].as_slice(),
        body(&mut StringData::new("** foo bar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6559
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6559>
/// <https://spec.commonmark.org/0.29/#example-378>
fn t378_cr() {
    init!("** foo bar**\r");

    assert_eq!(
        // from spec: <p>** foo bar**</p>
        [
            paragraph!(plain!("** foo bar**"))
        ].as_slice(),
        body(&mut StringData::new("** foo bar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6559
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6559>
/// <https://spec.commonmark.org/0.29/#example-378>
fn t378_cr_nl() {
    init!("** foo bar**\r\n");

    assert_eq!(
        // from spec: <p>** foo bar**</p>
        [
            paragraph!(plain!("** foo bar**"))
        ].as_slice(),
        body(&mut StringData::new("** foo bar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6559
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6559>
/// <https://spec.commonmark.org/0.29/#example-378>
fn t378_no_nl() {
    init!("** foo bar**");

    assert_eq!(
        // from spec: <p>** foo bar**</p>
        [
            paragraph!(plain!("** foo bar**"))
        ].as_slice(),
        body(&mut StringData::new("** foo bar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6559
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6559>
/// <https://spec.commonmark.org/0.29/#example-378>
fn t378_tab() {
    init!("**\tfoo\tbar**\n");

    assert_eq!(
        // from spec: <p>** foo bar**</p>
        [
            paragraph!(plain!("**	foo	bar**"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**\tfoo\tbar**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6570>
/// <https://spec.commonmark.org/0.29/#example-379>
fn t379() {
    init!("a**\"foo\"**\n");

    assert_eq!(
        // from spec: <p>a**&quot;foo&quot;**</p>
        [
            paragraph!(plain!("a**\"foo\"**"))
        ].as_slice(),
        body(&mut StringData::new("a**\"foo\"**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6570>
/// <https://spec.commonmark.org/0.29/#example-379>
fn t379_cr() {
    init!("a**\"foo\"**\r");

    assert_eq!(
        // from spec: <p>a**&quot;foo&quot;**</p>
        [
            paragraph!(plain!("a**\"foo\"**"))
        ].as_slice(),
        body(&mut StringData::new("a**\"foo\"**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6570>
/// <https://spec.commonmark.org/0.29/#example-379>
fn t379_cr_nl() {
    init!("a**\"foo\"**\r\n");

    assert_eq!(
        // from spec: <p>a**&quot;foo&quot;**</p>
        [
            paragraph!(plain!("a**\"foo\"**"))
        ].as_slice(),
        body(&mut StringData::new("a**\"foo\"**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6570
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6570>
/// <https://spec.commonmark.org/0.29/#example-379>
fn t379_no_nl() {
    init!("a**\"foo\"**");

    assert_eq!(
        // from spec: <p>a**&quot;foo&quot;**</p>
        [
            paragraph!(plain!("a**\"foo\"**"))
        ].as_slice(),
        body(&mut StringData::new("a**\"foo\"**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6579>
/// <https://spec.commonmark.org/0.29/#example-380>
fn t380() {
    init!("foo**bar**\n");

    assert_eq!(
        // from spec: <p>foo<strong>bar</strong></p>
        [
            paragraph!(plain!("foo"), strong!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo**bar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6579>
/// <https://spec.commonmark.org/0.29/#example-380>
fn t380_cr() {
    init!("foo**bar**\r");

    assert_eq!(
        // from spec: <p>foo<strong>bar</strong></p>
        [
            paragraph!(plain!("foo"), strong!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo**bar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6579>
/// <https://spec.commonmark.org/0.29/#example-380>
fn t380_cr_nl() {
    init!("foo**bar**\r\n");

    assert_eq!(
        // from spec: <p>foo<strong>bar</strong></p>
        [
            paragraph!(plain!("foo"), strong!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo**bar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6579>
/// <https://spec.commonmark.org/0.29/#example-380>
fn t380_no_nl() {
    init!("foo**bar**");

    assert_eq!(
        // from spec: <p>foo<strong>bar</strong></p>
        [
            paragraph!(plain!("foo"), strong!(plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("foo**bar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6588>
/// <https://spec.commonmark.org/0.29/#example-381>
fn t381() {
    init!("__foo bar__\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo bar__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6588>
/// <https://spec.commonmark.org/0.29/#example-381>
fn t381_cr() {
    init!("__foo bar__\r");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo bar__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6588>
/// <https://spec.commonmark.org/0.29/#example-381>
fn t381_cr_nl() {
    init!("__foo bar__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo bar__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6588>
/// <https://spec.commonmark.org/0.29/#example-381>
fn t381_no_nl() {
    init!("__foo bar__");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo bar__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6588>
/// <https://spec.commonmark.org/0.29/#example-381>
fn t381_tab() {
    init!("__foo\tbar__\n");

    assert_eq!(
        // from spec: <p><strong>foo bar</strong></p>
        [
            paragraph!(strong!(plain!("foo	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo\tbar__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6598>
/// <https://spec.commonmark.org/0.29/#example-382>
fn t382() {
    init!("__ foo bar__\n");

    assert_eq!(
        // from spec: <p>__ foo bar__</p>
        [
            paragraph!(plain!("__ foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__ foo bar__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6598>
/// <https://spec.commonmark.org/0.29/#example-382>
fn t382_cr() {
    init!("__ foo bar__\r");

    assert_eq!(
        // from spec: <p>__ foo bar__</p>
        [
            paragraph!(plain!("__ foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__ foo bar__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6598>
/// <https://spec.commonmark.org/0.29/#example-382>
fn t382_cr_nl() {
    init!("__ foo bar__\r\n");

    assert_eq!(
        // from spec: <p>__ foo bar__</p>
        [
            paragraph!(plain!("__ foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__ foo bar__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6598>
/// <https://spec.commonmark.org/0.29/#example-382>
fn t382_no_nl() {
    init!("__ foo bar__");

    assert_eq!(
        // from spec: <p>__ foo bar__</p>
        [
            paragraph!(plain!("__ foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__ foo bar__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6598
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6598>
/// <https://spec.commonmark.org/0.29/#example-382>
fn t382_tab() {
    init!("__\tfoo\tbar__\n");

    assert_eq!(
        // from spec: <p>__ foo bar__</p>
        [
            paragraph!(plain!("__	foo	bar__"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__\tfoo\tbar__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6606
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6606>
/// <https://spec.commonmark.org/0.29/#example-383>
fn t383() {
    init!("__\nfoo bar__\n");

    assert_eq!(
        // from spec: <p>__\nfoo bar__</p>
        [
            paragraph!(plain!("__"), SoftBreak, plain!("foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__\nfoo bar__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6606
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6606>
/// <https://spec.commonmark.org/0.29/#example-383>
fn t383_cr() {
    init!("__\rfoo bar__\r");

    assert_eq!(
        // from spec: <p>__\nfoo bar__</p>
        [
            paragraph!(plain!("__"), SoftBreak, plain!("foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__\rfoo bar__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6606
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6606>
/// <https://spec.commonmark.org/0.29/#example-383>
fn t383_cr_nl() {
    init!("__\r\nfoo bar__\r\n");

    assert_eq!(
        // from spec: <p>__\nfoo bar__</p>
        [
            paragraph!(plain!("__"), SoftBreak, plain!("foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__\r\nfoo bar__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6606
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6606>
/// <https://spec.commonmark.org/0.29/#example-383>
fn t383_no_nl() {
    init!("__\nfoo bar__");

    assert_eq!(
        // from spec: <p>__\nfoo bar__</p>
        [
            paragraph!(plain!("__"), SoftBreak, plain!("foo bar__"))
        ].as_slice(),
        body(&mut StringData::new("__\nfoo bar__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6606
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6606>
/// <https://spec.commonmark.org/0.29/#example-383>
fn t383_tab() {
    init!("__\nfoo\tbar__\n");

    assert_eq!(
        // from spec: <p>__\nfoo bar__</p>
        [
            paragraph!(plain!("__"), SoftBreak, plain!("foo	bar__"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__\nfoo\tbar__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6618>
/// <https://spec.commonmark.org/0.29/#example-384>
fn t384() {
    init!("a__\"foo\"__\n");

    assert_eq!(
        // from spec: <p>a__&quot;foo&quot;__</p>
        [
            paragraph!(plain!("a__\"foo\"__"))
        ].as_slice(),
        body(&mut StringData::new("a__\"foo\"__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6618>
/// <https://spec.commonmark.org/0.29/#example-384>
fn t384_cr() {
    init!("a__\"foo\"__\r");

    assert_eq!(
        // from spec: <p>a__&quot;foo&quot;__</p>
        [
            paragraph!(plain!("a__\"foo\"__"))
        ].as_slice(),
        body(&mut StringData::new("a__\"foo\"__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6618>
/// <https://spec.commonmark.org/0.29/#example-384>
fn t384_cr_nl() {
    init!("a__\"foo\"__\r\n");

    assert_eq!(
        // from spec: <p>a__&quot;foo&quot;__</p>
        [
            paragraph!(plain!("a__\"foo\"__"))
        ].as_slice(),
        body(&mut StringData::new("a__\"foo\"__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6618>
/// <https://spec.commonmark.org/0.29/#example-384>
fn t384_no_nl() {
    init!("a__\"foo\"__");

    assert_eq!(
        // from spec: <p>a__&quot;foo&quot;__</p>
        [
            paragraph!(plain!("a__\"foo\"__"))
        ].as_slice(),
        body(&mut StringData::new("a__\"foo\"__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6627
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6627>
/// <https://spec.commonmark.org/0.29/#example-385>
fn t385() {
    init!("foo__bar__\n");

    assert_eq!(
        // from spec: <p>foo__bar__</p>
        [
            paragraph!(plain!("foo__bar__"))
        ].as_slice(),
        body(&mut StringData::new("foo__bar__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6627
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6627>
/// <https://spec.commonmark.org/0.29/#example-385>
fn t385_cr() {
    init!("foo__bar__\r");

    assert_eq!(
        // from spec: <p>foo__bar__</p>
        [
            paragraph!(plain!("foo__bar__"))
        ].as_slice(),
        body(&mut StringData::new("foo__bar__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6627
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6627>
/// <https://spec.commonmark.org/0.29/#example-385>
fn t385_cr_nl() {
    init!("foo__bar__\r\n");

    assert_eq!(
        // from spec: <p>foo__bar__</p>
        [
            paragraph!(plain!("foo__bar__"))
        ].as_slice(),
        body(&mut StringData::new("foo__bar__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6627
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6627>
/// <https://spec.commonmark.org/0.29/#example-385>
fn t385_no_nl() {
    init!("foo__bar__");

    assert_eq!(
        // from spec: <p>foo__bar__</p>
        [
            paragraph!(plain!("foo__bar__"))
        ].as_slice(),
        body(&mut StringData::new("foo__bar__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6634
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6634>
/// <https://spec.commonmark.org/0.29/#example-386>
fn t386() {
    init!("5__6__78\n");

    assert_eq!(
        // from spec: <p>5__6__78</p>
        [
            paragraph!(plain!("5__6__78"))
        ].as_slice(),
        body(&mut StringData::new("5__6__78\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6634
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6634>
/// <https://spec.commonmark.org/0.29/#example-386>
fn t386_cr() {
    init!("5__6__78\r");

    assert_eq!(
        // from spec: <p>5__6__78</p>
        [
            paragraph!(plain!("5__6__78"))
        ].as_slice(),
        body(&mut StringData::new("5__6__78\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6634
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6634>
/// <https://spec.commonmark.org/0.29/#example-386>
fn t386_cr_nl() {
    init!("5__6__78\r\n");

    assert_eq!(
        // from spec: <p>5__6__78</p>
        [
            paragraph!(plain!("5__6__78"))
        ].as_slice(),
        body(&mut StringData::new("5__6__78\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6634
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6634>
/// <https://spec.commonmark.org/0.29/#example-386>
fn t386_no_nl() {
    init!("5__6__78");

    assert_eq!(
        // from spec: <p>5__6__78</p>
        [
            paragraph!(plain!("5__6__78"))
        ].as_slice(),
        body(&mut StringData::new("5__6__78", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6641>
/// <https://spec.commonmark.org/0.29/#example-387>
fn t387() {
    init!("пристаням__стремятся__\n");

    assert_eq!(
        // from spec: <p>пристаням__стремятся__</p>
        [
            paragraph!(plain!("пристаням__стремятся__"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6641>
/// <https://spec.commonmark.org/0.29/#example-387>
fn t387_cr() {
    init!("пристаням__стремятся__\r");

    assert_eq!(
        // from spec: <p>пристаням__стремятся__</p>
        [
            paragraph!(plain!("пристаням__стремятся__"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6641>
/// <https://spec.commonmark.org/0.29/#example-387>
fn t387_cr_nl() {
    init!("пристаням__стремятся__\r\n");

    assert_eq!(
        // from spec: <p>пристаням__стремятся__</p>
        [
            paragraph!(plain!("пристаням__стремятся__"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6641>
/// <https://spec.commonmark.org/0.29/#example-387>
fn t387_no_nl() {
    init!("пристаням__стремятся__");

    assert_eq!(
        // from spec: <p>пристаням__стремятся__</p>
        [
            paragraph!(plain!("пристаням__стремятся__"))
        ].as_slice(),
        body(&mut StringData::new("\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6648
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6648>
/// <https://spec.commonmark.org/0.29/#example-388>
fn t388() {
    init!("__foo, __bar__, baz__\n");

    assert_eq!(
        // from spec: <p><strong>foo, <strong>bar</strong>, baz</strong></p>
        [
            paragraph!(strong!(plain!("foo, "), strong!(plain!("bar")), plain!(", baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo, __bar__, baz__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6648
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6648>
/// <https://spec.commonmark.org/0.29/#example-388>
fn t388_cr() {
    init!("__foo, __bar__, baz__\r");

    assert_eq!(
        // from spec: <p><strong>foo, <strong>bar</strong>, baz</strong></p>
        [
            paragraph!(strong!(plain!("foo, "), strong!(plain!("bar")), plain!(", baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo, __bar__, baz__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6648
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6648>
/// <https://spec.commonmark.org/0.29/#example-388>
fn t388_cr_nl() {
    init!("__foo, __bar__, baz__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo, <strong>bar</strong>, baz</strong></p>
        [
            paragraph!(strong!(plain!("foo, "), strong!(plain!("bar")), plain!(", baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo, __bar__, baz__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6648
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6648>
/// <https://spec.commonmark.org/0.29/#example-388>
fn t388_no_nl() {
    init!("__foo, __bar__, baz__");

    assert_eq!(
        // from spec: <p><strong>foo, <strong>bar</strong>, baz</strong></p>
        [
            paragraph!(strong!(plain!("foo, "), strong!(plain!("bar")), plain!(", baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo, __bar__, baz__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6648
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6648>
/// <https://spec.commonmark.org/0.29/#example-388>
fn t388_tab() {
    init!("__foo,\t__bar__,\tbaz__\n");

    assert_eq!(
        // from spec: <p><strong>foo, <strong>bar</strong>, baz</strong></p>
        [
            paragraph!(strong!(plain!("foo,	"), strong!(plain!("bar")), plain!(",	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo,\t__bar__,\tbaz__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6659
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6659>
/// <https://spec.commonmark.org/0.29/#example-389>
fn t389() {
    init!("foo-__(bar)__\n");

    assert_eq!(
        // from spec: <p>foo-<strong>(bar)</strong></p>
        [
            paragraph!(plain!("foo-"), strong!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-__(bar)__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6659
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6659>
/// <https://spec.commonmark.org/0.29/#example-389>
fn t389_cr() {
    init!("foo-__(bar)__\r");

    assert_eq!(
        // from spec: <p>foo-<strong>(bar)</strong></p>
        [
            paragraph!(plain!("foo-"), strong!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-__(bar)__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6659
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6659>
/// <https://spec.commonmark.org/0.29/#example-389>
fn t389_cr_nl() {
    init!("foo-__(bar)__\r\n");

    assert_eq!(
        // from spec: <p>foo-<strong>(bar)</strong></p>
        [
            paragraph!(plain!("foo-"), strong!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-__(bar)__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6659
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6659>
/// <https://spec.commonmark.org/0.29/#example-389>
fn t389_no_nl() {
    init!("foo-__(bar)__");

    assert_eq!(
        // from spec: <p>foo-<strong>(bar)</strong></p>
        [
            paragraph!(plain!("foo-"), strong!(plain!("(bar)")))
        ].as_slice(),
        body(&mut StringData::new("foo-__(bar)__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6672>
/// <https://spec.commonmark.org/0.29/#example-390>
fn t390() {
    init!("**foo bar **\n");

    assert_eq!(
        // from spec: <p>**foo bar **</p>
        [
            paragraph!(plain!("**foo bar **"))
        ].as_slice(),
        body(&mut StringData::new("**foo bar **\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6672>
/// <https://spec.commonmark.org/0.29/#example-390>
fn t390_cr() {
    init!("**foo bar **\r");

    assert_eq!(
        // from spec: <p>**foo bar **</p>
        [
            paragraph!(plain!("**foo bar **"))
        ].as_slice(),
        body(&mut StringData::new("**foo bar **\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6672>
/// <https://spec.commonmark.org/0.29/#example-390>
fn t390_cr_nl() {
    init!("**foo bar **\r\n");

    assert_eq!(
        // from spec: <p>**foo bar **</p>
        [
            paragraph!(plain!("**foo bar **"))
        ].as_slice(),
        body(&mut StringData::new("**foo bar **\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6672>
/// <https://spec.commonmark.org/0.29/#example-390>
fn t390_no_nl() {
    init!("**foo bar **");

    assert_eq!(
        // from spec: <p>**foo bar **</p>
        [
            paragraph!(plain!("**foo bar **"))
        ].as_slice(),
        body(&mut StringData::new("**foo bar **", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6672
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6672>
/// <https://spec.commonmark.org/0.29/#example-390>
fn t390_tab() {
    init!("**foo\tbar\t**\n");

    assert_eq!(
        // from spec: <p>**foo bar **</p>
        [
            paragraph!(plain!("**foo	bar	**"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\tbar\t**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6685
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6685>
/// <https://spec.commonmark.org/0.29/#example-391>
fn t391() {
    init!("**(**foo)\n");

    assert_eq!(
        // from spec: <p>**(**foo)</p>
        [
            paragraph!(plain!("**(**foo)"))
        ].as_slice(),
        body(&mut StringData::new("**(**foo)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6685
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6685>
/// <https://spec.commonmark.org/0.29/#example-391>
fn t391_cr() {
    init!("**(**foo)\r");

    assert_eq!(
        // from spec: <p>**(**foo)</p>
        [
            paragraph!(plain!("**(**foo)"))
        ].as_slice(),
        body(&mut StringData::new("**(**foo)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6685
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6685>
/// <https://spec.commonmark.org/0.29/#example-391>
fn t391_cr_nl() {
    init!("**(**foo)\r\n");

    assert_eq!(
        // from spec: <p>**(**foo)</p>
        [
            paragraph!(plain!("**(**foo)"))
        ].as_slice(),
        body(&mut StringData::new("**(**foo)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6685
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6685>
/// <https://spec.commonmark.org/0.29/#example-391>
fn t391_no_nl() {
    init!("**(**foo)");

    assert_eq!(
        // from spec: <p>**(**foo)</p>
        [
            paragraph!(plain!("**(**foo)"))
        ].as_slice(),
        body(&mut StringData::new("**(**foo)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6695
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6695>
/// <https://spec.commonmark.org/0.29/#example-392>
fn t392() {
    init!("*(**foo**)*\n");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(**foo**)*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6695
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6695>
/// <https://spec.commonmark.org/0.29/#example-392>
fn t392_cr() {
    init!("*(**foo**)*\r");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(**foo**)*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6695
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6695>
/// <https://spec.commonmark.org/0.29/#example-392>
fn t392_cr_nl() {
    init!("*(**foo**)*\r\n");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(**foo**)*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6695
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6695>
/// <https://spec.commonmark.org/0.29/#example-392>
fn t392_no_nl() {
    init!("*(**foo**)*");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("*(**foo**)*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6702
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6702>
/// <https://spec.commonmark.org/0.29/#example-393>
fn t393() {
    init!("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n");

    assert_eq!(
        // from spec: <p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>
        [
            paragraph!(strong!(plain!("Gomphocarpus ("), emph!(plain!("Gomphocarpus physocarpus")), plain!(", syn."), SoftBreak, emph!(plain!("Asclepias physocarpa")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6702
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6702>
/// <https://spec.commonmark.org/0.29/#example-393>
fn t393_cr() {
    init!("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\r*Asclepias physocarpa*)**\r");

    assert_eq!(
        // from spec: <p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>
        [
            paragraph!(strong!(plain!("Gomphocarpus ("), emph!(plain!("Gomphocarpus physocarpus")), plain!(", syn."), SoftBreak, emph!(plain!("Asclepias physocarpa")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\r*Asclepias physocarpa*)**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6702
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6702>
/// <https://spec.commonmark.org/0.29/#example-393>
fn t393_cr_nl() {
    init!("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\r\n*Asclepias physocarpa*)**\r\n");

    assert_eq!(
        // from spec: <p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>
        [
            paragraph!(strong!(plain!("Gomphocarpus ("), emph!(plain!("Gomphocarpus physocarpus")), plain!(", syn."), SoftBreak, emph!(plain!("Asclepias physocarpa")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\r\n*Asclepias physocarpa*)**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6702
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6702>
/// <https://spec.commonmark.org/0.29/#example-393>
fn t393_no_nl() {
    init!("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**");

    assert_eq!(
        // from spec: <p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>
        [
            paragraph!(strong!(plain!("Gomphocarpus ("), emph!(plain!("Gomphocarpus physocarpus")), plain!(", syn."), SoftBreak, emph!(plain!("Asclepias physocarpa")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6702
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6702>
/// <https://spec.commonmark.org/0.29/#example-393>
fn t393_tab() {
    init!("**Gomphocarpus\t(*Gomphocarpus\tphysocarpus*,\tsyn.\n*Asclepias\tphysocarpa*)**\n");

    assert_eq!(
        // from spec: <p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>
        [
            paragraph!(strong!(plain!("Gomphocarpus	("), emph!(plain!("Gomphocarpus	physocarpus")), plain!(",	syn."), SoftBreak, emph!(plain!("Asclepias	physocarpa")), plain!(")")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**Gomphocarpus\t(*Gomphocarpus\tphysocarpus*,\tsyn.\n*Asclepias\tphysocarpa*)**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6711
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6711>
/// <https://spec.commonmark.org/0.29/#example-394>
fn t394() {
    init!("**foo \"*bar*\" foo**\n");

    assert_eq!(
        // from spec: <p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
        [
            paragraph!(strong!(plain!("foo \""), emph!(plain!("bar")), plain!("\" foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo \"*bar*\" foo**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6711
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6711>
/// <https://spec.commonmark.org/0.29/#example-394>
fn t394_cr() {
    init!("**foo \"*bar*\" foo**\r");

    assert_eq!(
        // from spec: <p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
        [
            paragraph!(strong!(plain!("foo \""), emph!(plain!("bar")), plain!("\" foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo \"*bar*\" foo**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6711
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6711>
/// <https://spec.commonmark.org/0.29/#example-394>
fn t394_cr_nl() {
    init!("**foo \"*bar*\" foo**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
        [
            paragraph!(strong!(plain!("foo \""), emph!(plain!("bar")), plain!("\" foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo \"*bar*\" foo**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6711
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6711>
/// <https://spec.commonmark.org/0.29/#example-394>
fn t394_no_nl() {
    init!("**foo \"*bar*\" foo**");

    assert_eq!(
        // from spec: <p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
        [
            paragraph!(strong!(plain!("foo \""), emph!(plain!("bar")), plain!("\" foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo \"*bar*\" foo**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6711
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6711>
/// <https://spec.commonmark.org/0.29/#example-394>
fn t394_tab() {
    init!("**foo\t\"*bar*\"\tfoo**\n");

    assert_eq!(
        // from spec: <p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
        [
            paragraph!(strong!(plain!("foo	\""), emph!(plain!("bar")), plain!("\"	foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t\"*bar*\"\tfoo**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6720>
/// <https://spec.commonmark.org/0.29/#example-395>
fn t395() {
    init!("**foo**bar\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>bar</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("**foo**bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6720>
/// <https://spec.commonmark.org/0.29/#example-395>
fn t395_cr() {
    init!("**foo**bar\r");

    assert_eq!(
        // from spec: <p><strong>foo</strong>bar</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("**foo**bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6720>
/// <https://spec.commonmark.org/0.29/#example-395>
fn t395_cr_nl() {
    init!("**foo**bar\r\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>bar</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("**foo**bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6720>
/// <https://spec.commonmark.org/0.29/#example-395>
fn t395_no_nl() {
    init!("**foo**bar");

    assert_eq!(
        // from spec: <p><strong>foo</strong>bar</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("**foo**bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6732>
/// <https://spec.commonmark.org/0.29/#example-396>
fn t396() {
    init!("__foo bar __\n");

    assert_eq!(
        // from spec: <p>__foo bar __</p>
        [
            paragraph!(plain!("__foo bar __"))
        ].as_slice(),
        body(&mut StringData::new("__foo bar __\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6732>
/// <https://spec.commonmark.org/0.29/#example-396>
fn t396_cr() {
    init!("__foo bar __\r");

    assert_eq!(
        // from spec: <p>__foo bar __</p>
        [
            paragraph!(plain!("__foo bar __"))
        ].as_slice(),
        body(&mut StringData::new("__foo bar __\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6732>
/// <https://spec.commonmark.org/0.29/#example-396>
fn t396_cr_nl() {
    init!("__foo bar __\r\n");

    assert_eq!(
        // from spec: <p>__foo bar __</p>
        [
            paragraph!(plain!("__foo bar __"))
        ].as_slice(),
        body(&mut StringData::new("__foo bar __\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6732>
/// <https://spec.commonmark.org/0.29/#example-396>
fn t396_no_nl() {
    init!("__foo bar __");

    assert_eq!(
        // from spec: <p>__foo bar __</p>
        [
            paragraph!(plain!("__foo bar __"))
        ].as_slice(),
        body(&mut StringData::new("__foo bar __", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6732
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6732>
/// <https://spec.commonmark.org/0.29/#example-396>
fn t396_tab() {
    init!("__foo\tbar\t__\n");

    assert_eq!(
        // from spec: <p>__foo bar __</p>
        [
            paragraph!(plain!("__foo	bar	__"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo\tbar\t__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6742>
/// <https://spec.commonmark.org/0.29/#example-397>
fn t397() {
    init!("__(__foo)\n");

    assert_eq!(
        // from spec: <p>__(__foo)</p>
        [
            paragraph!(plain!("__(__foo)"))
        ].as_slice(),
        body(&mut StringData::new("__(__foo)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6742>
/// <https://spec.commonmark.org/0.29/#example-397>
fn t397_cr() {
    init!("__(__foo)\r");

    assert_eq!(
        // from spec: <p>__(__foo)</p>
        [
            paragraph!(plain!("__(__foo)"))
        ].as_slice(),
        body(&mut StringData::new("__(__foo)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6742>
/// <https://spec.commonmark.org/0.29/#example-397>
fn t397_cr_nl() {
    init!("__(__foo)\r\n");

    assert_eq!(
        // from spec: <p>__(__foo)</p>
        [
            paragraph!(plain!("__(__foo)"))
        ].as_slice(),
        body(&mut StringData::new("__(__foo)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6742
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6742>
/// <https://spec.commonmark.org/0.29/#example-397>
fn t397_no_nl() {
    init!("__(__foo)");

    assert_eq!(
        // from spec: <p>__(__foo)</p>
        [
            paragraph!(plain!("__(__foo)"))
        ].as_slice(),
        body(&mut StringData::new("__(__foo)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6752
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6752>
/// <https://spec.commonmark.org/0.29/#example-398>
fn t398() {
    init!("_(__foo__)_\n");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(__foo__)_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6752
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6752>
/// <https://spec.commonmark.org/0.29/#example-398>
fn t398_cr() {
    init!("_(__foo__)_\r");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(__foo__)_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6752
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6752>
/// <https://spec.commonmark.org/0.29/#example-398>
fn t398_cr_nl() {
    init!("_(__foo__)_\r\n");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(__foo__)_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6752
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6752>
/// <https://spec.commonmark.org/0.29/#example-398>
fn t398_no_nl() {
    init!("_(__foo__)_");

    assert_eq!(
        // from spec: <p><em>(<strong>foo</strong>)</em></p>
        [
            paragraph!(emph!(plain!("("), strong!(plain!("foo")), plain!(")")))
        ].as_slice(),
        body(&mut StringData::new("_(__foo__)_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6761
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6761>
/// <https://spec.commonmark.org/0.29/#example-399>
fn t399() {
    init!("__foo__bar\n");

    assert_eq!(
        // from spec: <p>__foo__bar</p>
        [
            paragraph!(plain!("__foo__bar"))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6761
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6761>
/// <https://spec.commonmark.org/0.29/#example-399>
fn t399_cr() {
    init!("__foo__bar\r");

    assert_eq!(
        // from spec: <p>__foo__bar</p>
        [
            paragraph!(plain!("__foo__bar"))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6761
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6761>
/// <https://spec.commonmark.org/0.29/#example-399>
fn t399_cr_nl() {
    init!("__foo__bar\r\n");

    assert_eq!(
        // from spec: <p>__foo__bar</p>
        [
            paragraph!(plain!("__foo__bar"))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6761
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6761>
/// <https://spec.commonmark.org/0.29/#example-399>
fn t399_no_nl() {
    init!("__foo__bar");

    assert_eq!(
        // from spec: <p>__foo__bar</p>
        [
            paragraph!(plain!("__foo__bar"))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6768>
/// <https://spec.commonmark.org/0.29/#example-400>
fn t400() {
    init!("__пристаням__стремятся\n");

    assert_eq!(
        // from spec: <p>__пристаням__стремятся</p>
        [
            paragraph!(plain!("__пристаням__стремятся"))
        ].as_slice(),
        body(&mut StringData::new("__\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6768>
/// <https://spec.commonmark.org/0.29/#example-400>
fn t400_cr() {
    init!("__пристаням__стремятся\r");

    assert_eq!(
        // from spec: <p>__пристаням__стремятся</p>
        [
            paragraph!(plain!("__пристаням__стремятся"))
        ].as_slice(),
        body(&mut StringData::new("__\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6768>
/// <https://spec.commonmark.org/0.29/#example-400>
fn t400_cr_nl() {
    init!("__пристаням__стремятся\r\n");

    assert_eq!(
        // from spec: <p>__пристаням__стремятся</p>
        [
            paragraph!(plain!("__пристаням__стремятся"))
        ].as_slice(),
        body(&mut StringData::new("__\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6768
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6768>
/// <https://spec.commonmark.org/0.29/#example-400>
fn t400_no_nl() {
    init!("__пристаням__стремятся");

    assert_eq!(
        // from spec: <p>__пристаням__стремятся</p>
        [
            paragraph!(plain!("__пристаням__стремятся"))
        ].as_slice(),
        body(&mut StringData::new("__\u{43f}\u{440}\u{438}\u{441}\u{442}\u{430}\u{43d}\u{44f}\u{43c}__\u{441}\u{442}\u{440}\u{435}\u{43c}\u{44f}\u{442}\u{441}\u{44f}", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6775
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6775>
/// <https://spec.commonmark.org/0.29/#example-401>
fn t401() {
    init!("__foo__bar__baz__\n");

    assert_eq!(
        // from spec: <p><strong>foo__bar__baz</strong></p>
        [
            paragraph!(strong!(plain!("foo__bar__baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar__baz__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6775
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6775>
/// <https://spec.commonmark.org/0.29/#example-401>
fn t401_cr() {
    init!("__foo__bar__baz__\r");

    assert_eq!(
        // from spec: <p><strong>foo__bar__baz</strong></p>
        [
            paragraph!(strong!(plain!("foo__bar__baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar__baz__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6775
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6775>
/// <https://spec.commonmark.org/0.29/#example-401>
fn t401_cr_nl() {
    init!("__foo__bar__baz__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo__bar__baz</strong></p>
        [
            paragraph!(strong!(plain!("foo__bar__baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar__baz__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6775
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6775>
/// <https://spec.commonmark.org/0.29/#example-401>
fn t401_no_nl() {
    init!("__foo__bar__baz__");

    assert_eq!(
        // from spec: <p><strong>foo__bar__baz</strong></p>
        [
            paragraph!(strong!(plain!("foo__bar__baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo__bar__baz__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6786>
/// <https://spec.commonmark.org/0.29/#example-402>
fn t402() {
    init!("__(bar)__.\n");

    assert_eq!(
        // from spec: <p><strong>(bar)</strong>.</p>
        [
            paragraph!(strong!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("__(bar)__.\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6786>
/// <https://spec.commonmark.org/0.29/#example-402>
fn t402_cr() {
    init!("__(bar)__.\r");

    assert_eq!(
        // from spec: <p><strong>(bar)</strong>.</p>
        [
            paragraph!(strong!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("__(bar)__.\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6786>
/// <https://spec.commonmark.org/0.29/#example-402>
fn t402_cr_nl() {
    init!("__(bar)__.\r\n");

    assert_eq!(
        // from spec: <p><strong>(bar)</strong>.</p>
        [
            paragraph!(strong!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("__(bar)__.\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6786>
/// <https://spec.commonmark.org/0.29/#example-402>
fn t402_no_nl() {
    init!("__(bar)__.");

    assert_eq!(
        // from spec: <p><strong>(bar)</strong>.</p>
        [
            paragraph!(strong!(plain!("(bar)")), plain!("."))
        ].as_slice(),
        body(&mut StringData::new("__(bar)__.", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6798
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6798>
/// <https://spec.commonmark.org/0.29/#example-403>
fn t403() {
    init!("*foo [bar](/url)*\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\">bar</a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar](/url)*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6798
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6798>
/// <https://spec.commonmark.org/0.29/#example-403>
fn t403_cr() {
    init!("*foo [bar](/url)*\r");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\">bar</a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar](/url)*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6798
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6798>
/// <https://spec.commonmark.org/0.29/#example-403>
fn t403_cr_nl() {
    init!("*foo [bar](/url)*\r\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\">bar</a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar](/url)*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6798
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6798>
/// <https://spec.commonmark.org/0.29/#example-403>
fn t403_no_nl() {
    init!("*foo [bar](/url)*");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\">bar</a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar](/url)*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6798
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6798>
/// <https://spec.commonmark.org/0.29/#example-403>
fn t403_tab() {
    init!("*foo\t[bar](/url)*\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\">bar</a></em></p>
        [
            paragraph!(emph!(plain!("foo	"), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t[bar](/url)*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6805
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6805>
/// <https://spec.commonmark.org/0.29/#example-404>
fn t404() {
    init!("*foo\nbar*\n");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\nbar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6805
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6805>
/// <https://spec.commonmark.org/0.29/#example-404>
fn t404_cr() {
    init!("*foo\rbar*\r");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\rbar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6805
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6805>
/// <https://spec.commonmark.org/0.29/#example-404>
fn t404_cr_nl() {
    init!("*foo\r\nbar*\r\n");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\r\nbar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6805
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6805>
/// <https://spec.commonmark.org/0.29/#example-404>
fn t404_no_nl() {
    init!("*foo\nbar*");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\nbar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6817>
/// <https://spec.commonmark.org/0.29/#example-405>
fn t405() {
    init!("_foo __bar__ baz_\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo __bar__ baz_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6817>
/// <https://spec.commonmark.org/0.29/#example-405>
fn t405_cr() {
    init!("_foo __bar__ baz_\r");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo __bar__ baz_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6817>
/// <https://spec.commonmark.org/0.29/#example-405>
fn t405_cr_nl() {
    init!("_foo __bar__ baz_\r\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo __bar__ baz_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6817>
/// <https://spec.commonmark.org/0.29/#example-405>
fn t405_no_nl() {
    init!("_foo __bar__ baz_");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo __bar__ baz_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6817>
/// <https://spec.commonmark.org/0.29/#example-405>
fn t405_tab() {
    init!("_foo\t__bar__\tbaz_\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo	"), strong!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_foo\t__bar__\tbaz_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6824>
/// <https://spec.commonmark.org/0.29/#example-406>
fn t406() {
    init!("_foo _bar_ baz_\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo _bar_ baz_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6824>
/// <https://spec.commonmark.org/0.29/#example-406>
fn t406_cr() {
    init!("_foo _bar_ baz_\r");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo _bar_ baz_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6824>
/// <https://spec.commonmark.org/0.29/#example-406>
fn t406_cr_nl() {
    init!("_foo _bar_ baz_\r\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo _bar_ baz_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6824>
/// <https://spec.commonmark.org/0.29/#example-406>
fn t406_no_nl() {
    init!("_foo _bar_ baz_");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("_foo _bar_ baz_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6824>
/// <https://spec.commonmark.org/0.29/#example-406>
fn t406_tab() {
    init!("_foo\t_bar_\tbaz_\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em> baz</em></p>
        [
            paragraph!(emph!(plain!("foo	"), emph!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_foo\t_bar_\tbaz_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6831
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6831>
/// <https://spec.commonmark.org/0.29/#example-407>
fn t407() {
    init!("__foo_ bar_\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em> bar</em></p>
        [
            paragraph!(emph!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo_ bar_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6831
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6831>
/// <https://spec.commonmark.org/0.29/#example-407>
fn t407_cr() {
    init!("__foo_ bar_\r");

    assert_eq!(
        // from spec: <p><em><em>foo</em> bar</em></p>
        [
            paragraph!(emph!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo_ bar_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6831
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6831>
/// <https://spec.commonmark.org/0.29/#example-407>
fn t407_cr_nl() {
    init!("__foo_ bar_\r\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em> bar</em></p>
        [
            paragraph!(emph!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo_ bar_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6831
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6831>
/// <https://spec.commonmark.org/0.29/#example-407>
fn t407_no_nl() {
    init!("__foo_ bar_");

    assert_eq!(
        // from spec: <p><em><em>foo</em> bar</em></p>
        [
            paragraph!(emph!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("__foo_ bar_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6831
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6831>
/// <https://spec.commonmark.org/0.29/#example-407>
fn t407_tab() {
    init!("__foo_\tbar_\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em> bar</em></p>
        [
            paragraph!(emph!(emph!(plain!("foo")), plain!("	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo_\tbar_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6838
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6838>
/// <https://spec.commonmark.org/0.29/#example-408>
fn t408() {
    init!("*foo *bar**\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em></em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6838
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6838>
/// <https://spec.commonmark.org/0.29/#example-408>
fn t408_cr() {
    init!("*foo *bar**\r");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em></em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6838
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6838>
/// <https://spec.commonmark.org/0.29/#example-408>
fn t408_cr_nl() {
    init!("*foo *bar**\r\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em></em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6838
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6838>
/// <https://spec.commonmark.org/0.29/#example-408>
fn t408_no_nl() {
    init!("*foo *bar**");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em></em></p>
        [
            paragraph!(emph!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6838
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6838>
/// <https://spec.commonmark.org/0.29/#example-408>
fn t408_tab() {
    init!("*foo\t*bar**\n");

    assert_eq!(
        // from spec: <p><em>foo <em>bar</em></em></p>
        [
            paragraph!(emph!(plain!("foo	"), emph!(plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t*bar**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6845>
/// <https://spec.commonmark.org/0.29/#example-409>
fn t409() {
    init!("*foo **bar** baz*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar** baz*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6845>
/// <https://spec.commonmark.org/0.29/#example-409>
fn t409_cr() {
    init!("*foo **bar** baz*\r");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar** baz*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6845>
/// <https://spec.commonmark.org/0.29/#example-409>
fn t409_cr_nl() {
    init!("*foo **bar** baz*\r\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar** baz*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6845>
/// <https://spec.commonmark.org/0.29/#example-409>
fn t409_no_nl() {
    init!("*foo **bar** baz*");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar** baz*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6845
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6845>
/// <https://spec.commonmark.org/0.29/#example-409>
fn t409_tab() {
    init!("*foo\t**bar**\tbaz*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong> baz</em></p>
        [
            paragraph!(emph!(plain!("foo	"), strong!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t**bar**\tbaz*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6851
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6851>
/// <https://spec.commonmark.org/0.29/#example-410>
fn t410() {
    init!("*foo**bar**baz*\n");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong>baz</em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar**baz*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6851
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6851>
/// <https://spec.commonmark.org/0.29/#example-410>
fn t410_cr() {
    init!("*foo**bar**baz*\r");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong>baz</em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar**baz*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6851
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6851>
/// <https://spec.commonmark.org/0.29/#example-410>
fn t410_cr_nl() {
    init!("*foo**bar**baz*\r\n");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong>baz</em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar**baz*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6851
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6851>
/// <https://spec.commonmark.org/0.29/#example-410>
fn t410_no_nl() {
    init!("*foo**bar**baz*");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong>baz</em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar**baz*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6875
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6875>
/// <https://spec.commonmark.org/0.29/#example-411>
fn t411() {
    init!("*foo**bar*\n");

    assert_eq!(
        // from spec: <p><em>foo**bar</em></p>
        [
            paragraph!(emph!(plain!("foo**bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6875
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6875>
/// <https://spec.commonmark.org/0.29/#example-411>
fn t411_cr() {
    init!("*foo**bar*\r");

    assert_eq!(
        // from spec: <p><em>foo**bar</em></p>
        [
            paragraph!(emph!(plain!("foo**bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6875
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6875>
/// <https://spec.commonmark.org/0.29/#example-411>
fn t411_cr_nl() {
    init!("*foo**bar*\r\n");

    assert_eq!(
        // from spec: <p><em>foo**bar</em></p>
        [
            paragraph!(emph!(plain!("foo**bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6875
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6875>
/// <https://spec.commonmark.org/0.29/#example-411>
fn t411_no_nl() {
    init!("*foo**bar*");

    assert_eq!(
        // from spec: <p><em>foo**bar</em></p>
        [
            paragraph!(emph!(plain!("foo**bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6888
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6888>
/// <https://spec.commonmark.org/0.29/#example-412>
fn t412() {
    init!("***foo** bar*\n");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong> bar</em></p>
        [
            paragraph!(emph!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo** bar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6888
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6888>
/// <https://spec.commonmark.org/0.29/#example-412>
fn t412_cr() {
    init!("***foo** bar*\r");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong> bar</em></p>
        [
            paragraph!(emph!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo** bar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6888
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6888>
/// <https://spec.commonmark.org/0.29/#example-412>
fn t412_cr_nl() {
    init!("***foo** bar*\r\n");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong> bar</em></p>
        [
            paragraph!(emph!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo** bar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6888
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6888>
/// <https://spec.commonmark.org/0.29/#example-412>
fn t412_no_nl() {
    init!("***foo** bar*");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong> bar</em></p>
        [
            paragraph!(emph!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo** bar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6888
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6888>
/// <https://spec.commonmark.org/0.29/#example-412>
fn t412_tab() {
    init!("***foo**\tbar*\n");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong> bar</em></p>
        [
            paragraph!(emph!(strong!(plain!("foo")), plain!("	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("***foo**\tbar*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6895>
/// <https://spec.commonmark.org/0.29/#example-413>
fn t413() {
    init!("*foo **bar***\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6895>
/// <https://spec.commonmark.org/0.29/#example-413>
fn t413_cr() {
    init!("*foo **bar***\r");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6895>
/// <https://spec.commonmark.org/0.29/#example-413>
fn t413_cr_nl() {
    init!("*foo **bar***\r\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6895>
/// <https://spec.commonmark.org/0.29/#example-413>
fn t413_no_nl() {
    init!("*foo **bar***");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6895
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6895>
/// <https://spec.commonmark.org/0.29/#example-413>
fn t413_tab() {
    init!("*foo\t**bar***\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo	"), strong!(plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t**bar***\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6902
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6902>
/// <https://spec.commonmark.org/0.29/#example-414>
fn t414() {
    init!("*foo**bar***\n");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6902
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6902>
/// <https://spec.commonmark.org/0.29/#example-414>
fn t414_cr() {
    init!("*foo**bar***\r");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6902
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6902>
/// <https://spec.commonmark.org/0.29/#example-414>
fn t414_cr_nl() {
    init!("*foo**bar***\r\n");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6902
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6902>
/// <https://spec.commonmark.org/0.29/#example-414>
fn t414_no_nl() {
    init!("*foo**bar***");

    assert_eq!(
        // from spec: <p><em>foo<strong>bar</strong></em></p>
        [
            paragraph!(emph!(plain!("foo"), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("*foo**bar***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6913
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6913>
/// <https://spec.commonmark.org/0.29/#example-415>
fn t415() {
    init!("foo***bar***baz\n");

    assert_eq!(
        // from spec: <p>foo<em><strong>bar</strong></em>baz</p>
        [
            paragraph!(plain!("foo"), emph!(strong!(plain!("bar"))), plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo***bar***baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6913
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6913>
/// <https://spec.commonmark.org/0.29/#example-415>
fn t415_cr() {
    init!("foo***bar***baz\r");

    assert_eq!(
        // from spec: <p>foo<em><strong>bar</strong></em>baz</p>
        [
            paragraph!(plain!("foo"), emph!(strong!(plain!("bar"))), plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo***bar***baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6913
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6913>
/// <https://spec.commonmark.org/0.29/#example-415>
fn t415_cr_nl() {
    init!("foo***bar***baz\r\n");

    assert_eq!(
        // from spec: <p>foo<em><strong>bar</strong></em>baz</p>
        [
            paragraph!(plain!("foo"), emph!(strong!(plain!("bar"))), plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo***bar***baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6913
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6913>
/// <https://spec.commonmark.org/0.29/#example-415>
fn t415_no_nl() {
    init!("foo***bar***baz");

    assert_eq!(
        // from spec: <p>foo<em><strong>bar</strong></em>baz</p>
        [
            paragraph!(plain!("foo"), emph!(strong!(plain!("bar"))), plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo***bar***baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6919
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6919>
/// <https://spec.commonmark.org/0.29/#example-416>
fn t416() {
    init!("foo******bar*********baz\n");

    assert_eq!(
        // from spec: <p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
        [
            paragraph!(plain!("foo"), strong!(strong!(strong!(plain!("bar")))), plain!("***baz"))
        ].as_slice(),
        body(&mut StringData::new("foo******bar*********baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6919
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6919>
/// <https://spec.commonmark.org/0.29/#example-416>
fn t416_cr() {
    init!("foo******bar*********baz\r");

    assert_eq!(
        // from spec: <p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
        [
            paragraph!(plain!("foo"), strong!(strong!(strong!(plain!("bar")))), plain!("***baz"))
        ].as_slice(),
        body(&mut StringData::new("foo******bar*********baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6919
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6919>
/// <https://spec.commonmark.org/0.29/#example-416>
fn t416_cr_nl() {
    init!("foo******bar*********baz\r\n");

    assert_eq!(
        // from spec: <p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
        [
            paragraph!(plain!("foo"), strong!(strong!(strong!(plain!("bar")))), plain!("***baz"))
        ].as_slice(),
        body(&mut StringData::new("foo******bar*********baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6919
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6919>
/// <https://spec.commonmark.org/0.29/#example-416>
fn t416_no_nl() {
    init!("foo******bar*********baz");

    assert_eq!(
        // from spec: <p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
        [
            paragraph!(plain!("foo"), strong!(strong!(strong!(plain!("bar")))), plain!("***baz"))
        ].as_slice(),
        body(&mut StringData::new("foo******bar*********baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6928>
/// <https://spec.commonmark.org/0.29/#example-417>
fn t417() {
    init!("*foo **bar *baz* bim** bop*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar "), emph!(plain!("baz")), plain!(" bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar *baz* bim** bop*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6928>
/// <https://spec.commonmark.org/0.29/#example-417>
fn t417_cr() {
    init!("*foo **bar *baz* bim** bop*\r");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar "), emph!(plain!("baz")), plain!(" bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar *baz* bim** bop*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6928>
/// <https://spec.commonmark.org/0.29/#example-417>
fn t417_cr_nl() {
    init!("*foo **bar *baz* bim** bop*\r\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar "), emph!(plain!("baz")), plain!(" bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar *baz* bim** bop*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6928>
/// <https://spec.commonmark.org/0.29/#example-417>
fn t417_no_nl() {
    init!("*foo **bar *baz* bim** bop*");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar "), emph!(plain!("baz")), plain!(" bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("*foo **bar *baz* bim** bop*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6928
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6928>
/// <https://spec.commonmark.org/0.29/#example-417>
fn t417_tab() {
    init!("*foo\t**bar\t*baz*\tbim**\tbop*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
        [
            paragraph!(emph!(plain!("foo	"), strong!(plain!("bar	"), emph!(plain!("baz")), plain!("	bim")), plain!("	bop")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t**bar\t*baz*\tbim**\tbop*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6935
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6935>
/// <https://spec.commonmark.org/0.29/#example-418>
fn t418() {
    init!("*foo [*bar*](/url)*\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("*foo [*bar*](/url)*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6935
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6935>
/// <https://spec.commonmark.org/0.29/#example-418>
fn t418_cr() {
    init!("*foo [*bar*](/url)*\r");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("*foo [*bar*](/url)*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6935
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6935>
/// <https://spec.commonmark.org/0.29/#example-418>
fn t418_cr_nl() {
    init!("*foo [*bar*](/url)*\r\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("*foo [*bar*](/url)*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6935
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6935>
/// <https://spec.commonmark.org/0.29/#example-418>
fn t418_no_nl() {
    init!("*foo [*bar*](/url)*");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>
        [
            paragraph!(emph!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("*foo [*bar*](/url)*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6935
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6935>
/// <https://spec.commonmark.org/0.29/#example-418>
fn t418_tab() {
    init!("*foo\t[*bar*](/url)*\n");

    assert_eq!(
        // from spec: <p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>
        [
            paragraph!(emph!(plain!("foo	"), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t[*bar*](/url)*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6944
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6944>
/// <https://spec.commonmark.org/0.29/#example-419>
fn t419() {
    init!("** is not an empty emphasis\n");

    assert_eq!(
        // from spec: <p>** is not an empty emphasis</p>
        [
            paragraph!(plain!("** is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("** is not an empty emphasis\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6944
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6944>
/// <https://spec.commonmark.org/0.29/#example-419>
fn t419_cr() {
    init!("** is not an empty emphasis\r");

    assert_eq!(
        // from spec: <p>** is not an empty emphasis</p>
        [
            paragraph!(plain!("** is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("** is not an empty emphasis\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6944
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6944>
/// <https://spec.commonmark.org/0.29/#example-419>
fn t419_cr_nl() {
    init!("** is not an empty emphasis\r\n");

    assert_eq!(
        // from spec: <p>** is not an empty emphasis</p>
        [
            paragraph!(plain!("** is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("** is not an empty emphasis\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6944
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6944>
/// <https://spec.commonmark.org/0.29/#example-419>
fn t419_no_nl() {
    init!("** is not an empty emphasis");

    assert_eq!(
        // from spec: <p>** is not an empty emphasis</p>
        [
            paragraph!(plain!("** is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("** is not an empty emphasis", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6944
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6944>
/// <https://spec.commonmark.org/0.29/#example-419>
fn t419_tab() {
    init!("**\tis\tnot\tan\tempty\temphasis\n");

    assert_eq!(
        // from spec: <p>** is not an empty emphasis</p>
        [
            paragraph!(plain!("**	is	not	an	empty	emphasis"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**\tis\tnot\tan\tempty\temphasis\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6951>
/// <https://spec.commonmark.org/0.29/#example-420>
fn t420() {
    init!("**** is not an empty strong emphasis\n");

    assert_eq!(
        // from spec: <p>**** is not an empty strong emphasis</p>
        [
            paragraph!(plain!("**** is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("**** is not an empty strong emphasis\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6951>
/// <https://spec.commonmark.org/0.29/#example-420>
fn t420_cr() {
    init!("**** is not an empty strong emphasis\r");

    assert_eq!(
        // from spec: <p>**** is not an empty strong emphasis</p>
        [
            paragraph!(plain!("**** is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("**** is not an empty strong emphasis\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6951>
/// <https://spec.commonmark.org/0.29/#example-420>
fn t420_cr_nl() {
    init!("**** is not an empty strong emphasis\r\n");

    assert_eq!(
        // from spec: <p>**** is not an empty strong emphasis</p>
        [
            paragraph!(plain!("**** is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("**** is not an empty strong emphasis\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6951>
/// <https://spec.commonmark.org/0.29/#example-420>
fn t420_no_nl() {
    init!("**** is not an empty strong emphasis");

    assert_eq!(
        // from spec: <p>**** is not an empty strong emphasis</p>
        [
            paragraph!(plain!("**** is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("**** is not an empty strong emphasis", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6951
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6951>
/// <https://spec.commonmark.org/0.29/#example-420>
fn t420_tab() {
    init!("****\tis\tnot\tan\tempty\tstrong\temphasis\n");

    assert_eq!(
        // from spec: <p>**** is not an empty strong emphasis</p>
        [
            paragraph!(plain!("****	is	not	an	empty	strong	emphasis"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("****\tis\tnot\tan\tempty\tstrong\temphasis\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6964
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6964>
/// <https://spec.commonmark.org/0.29/#example-421>
fn t421() {
    init!("**foo [bar](/url)**\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\">bar</a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo [bar](/url)**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6964
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6964>
/// <https://spec.commonmark.org/0.29/#example-421>
fn t421_cr() {
    init!("**foo [bar](/url)**\r");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\">bar</a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo [bar](/url)**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6964
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6964>
/// <https://spec.commonmark.org/0.29/#example-421>
fn t421_cr_nl() {
    init!("**foo [bar](/url)**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\">bar</a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo [bar](/url)**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6964
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6964>
/// <https://spec.commonmark.org/0.29/#example-421>
fn t421_no_nl() {
    init!("**foo [bar](/url)**");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\">bar</a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo [bar](/url)**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6964
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6964>
/// <https://spec.commonmark.org/0.29/#example-421>
fn t421_tab() {
    init!("**foo\t[bar](/url)**\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\">bar</a></strong></p>
        [
            paragraph!(strong!(plain!("foo	"), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t[bar](/url)**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6971>
/// <https://spec.commonmark.org/0.29/#example-422>
fn t422() {
    init!("**foo\nbar**\n");

    assert_eq!(
        // from spec: <p><strong>foo\nbar</strong></p>
        [
            paragraph!(strong!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo\nbar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6971>
/// <https://spec.commonmark.org/0.29/#example-422>
fn t422_cr() {
    init!("**foo\rbar**\r");

    assert_eq!(
        // from spec: <p><strong>foo\nbar</strong></p>
        [
            paragraph!(strong!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo\rbar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6971>
/// <https://spec.commonmark.org/0.29/#example-422>
fn t422_cr_nl() {
    init!("**foo\r\nbar**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo\nbar</strong></p>
        [
            paragraph!(strong!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo\r\nbar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6971
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6971>
/// <https://spec.commonmark.org/0.29/#example-422>
fn t422_no_nl() {
    init!("**foo\nbar**");

    assert_eq!(
        // from spec: <p><strong>foo\nbar</strong></p>
        [
            paragraph!(strong!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("**foo\nbar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6983
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6983>
/// <https://spec.commonmark.org/0.29/#example-423>
fn t423() {
    init!("__foo _bar_ baz__\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo _bar_ baz__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6983
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6983>
/// <https://spec.commonmark.org/0.29/#example-423>
fn t423_cr() {
    init!("__foo _bar_ baz__\r");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo _bar_ baz__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6983
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6983>
/// <https://spec.commonmark.org/0.29/#example-423>
fn t423_cr_nl() {
    init!("__foo _bar_ baz__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo _bar_ baz__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6983
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6983>
/// <https://spec.commonmark.org/0.29/#example-423>
fn t423_no_nl() {
    init!("__foo _bar_ baz__");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo _bar_ baz__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6983
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6983>
/// <https://spec.commonmark.org/0.29/#example-423>
fn t423_tab() {
    init!("__foo\t_bar_\tbaz__\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo	"), emph!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo\t_bar_\tbaz__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6990
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6990>
/// <https://spec.commonmark.org/0.29/#example-424>
fn t424() {
    init!("__foo __bar__ baz__\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo __bar__ baz__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6990
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6990>
/// <https://spec.commonmark.org/0.29/#example-424>
fn t424_cr() {
    init!("__foo __bar__ baz__\r");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo __bar__ baz__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6990
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6990>
/// <https://spec.commonmark.org/0.29/#example-424>
fn t424_cr_nl() {
    init!("__foo __bar__ baz__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo __bar__ baz__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6990
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6990>
/// <https://spec.commonmark.org/0.29/#example-424>
fn t424_no_nl() {
    init!("__foo __bar__ baz__");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("__foo __bar__ baz__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6990
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6990>
/// <https://spec.commonmark.org/0.29/#example-424>
fn t424_tab() {
    init!("__foo\t__bar__\tbaz__\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo	"), strong!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__foo\t__bar__\tbaz__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6997>
/// <https://spec.commonmark.org/0.29/#example-425>
fn t425() {
    init!("____foo__ bar__\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong> bar</strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("____foo__ bar__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6997>
/// <https://spec.commonmark.org/0.29/#example-425>
fn t425_cr() {
    init!("____foo__ bar__\r");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong> bar</strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("____foo__ bar__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6997>
/// <https://spec.commonmark.org/0.29/#example-425>
fn t425_cr_nl() {
    init!("____foo__ bar__\r\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong> bar</strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("____foo__ bar__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6997>
/// <https://spec.commonmark.org/0.29/#example-425>
fn t425_no_nl() {
    init!("____foo__ bar__");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong> bar</strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("____foo__ bar__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 6997
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L6997>
/// <https://spec.commonmark.org/0.29/#example-425>
fn t425_tab() {
    init!("____foo__\tbar__\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong> bar</strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo")), plain!("	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("____foo__\tbar__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7004
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7004>
/// <https://spec.commonmark.org/0.29/#example-426>
fn t426() {
    init!("**foo **bar****\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong></strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar****\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7004
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7004>
/// <https://spec.commonmark.org/0.29/#example-426>
fn t426_cr() {
    init!("**foo **bar****\r");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong></strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar****\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7004
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7004>
/// <https://spec.commonmark.org/0.29/#example-426>
fn t426_cr_nl() {
    init!("**foo **bar****\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong></strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar****\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7004
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7004>
/// <https://spec.commonmark.org/0.29/#example-426>
fn t426_no_nl() {
    init!("**foo **bar****");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong></strong></p>
        [
            paragraph!(strong!(plain!("foo "), strong!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar****", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7004
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7004>
/// <https://spec.commonmark.org/0.29/#example-426>
fn t426_tab() {
    init!("**foo\t**bar****\n");

    assert_eq!(
        // from spec: <p><strong>foo <strong>bar</strong></strong></p>
        [
            paragraph!(strong!(plain!("foo	"), strong!(plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t**bar****\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7011
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7011>
/// <https://spec.commonmark.org/0.29/#example-427>
fn t427() {
    init!("**foo *bar* baz**\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar* baz**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7011
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7011>
/// <https://spec.commonmark.org/0.29/#example-427>
fn t427_cr() {
    init!("**foo *bar* baz**\r");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar* baz**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7011
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7011>
/// <https://spec.commonmark.org/0.29/#example-427>
fn t427_cr_nl() {
    init!("**foo *bar* baz**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar* baz**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7011
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7011>
/// <https://spec.commonmark.org/0.29/#example-427>
fn t427_no_nl() {
    init!("**foo *bar* baz**");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar")), plain!(" baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar* baz**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7011
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7011>
/// <https://spec.commonmark.org/0.29/#example-427>
fn t427_tab() {
    init!("**foo\t*bar*\tbaz**\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em> baz</strong></p>
        [
            paragraph!(strong!(plain!("foo	"), emph!(plain!("bar")), plain!("	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t*bar*\tbaz**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7018>
/// <https://spec.commonmark.org/0.29/#example-428>
fn t428() {
    init!("**foo*bar*baz**\n");

    assert_eq!(
        // from spec: <p><strong>foo<em>bar</em>baz</strong></p>
        [
            paragraph!(strong!(plain!("foo"), emph!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo*bar*baz**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7018>
/// <https://spec.commonmark.org/0.29/#example-428>
fn t428_cr() {
    init!("**foo*bar*baz**\r");

    assert_eq!(
        // from spec: <p><strong>foo<em>bar</em>baz</strong></p>
        [
            paragraph!(strong!(plain!("foo"), emph!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo*bar*baz**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7018>
/// <https://spec.commonmark.org/0.29/#example-428>
fn t428_cr_nl() {
    init!("**foo*bar*baz**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo<em>bar</em>baz</strong></p>
        [
            paragraph!(strong!(plain!("foo"), emph!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo*bar*baz**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7018
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7018>
/// <https://spec.commonmark.org/0.29/#example-428>
fn t428_no_nl() {
    init!("**foo*bar*baz**");

    assert_eq!(
        // from spec: <p><strong>foo<em>bar</em>baz</strong></p>
        [
            paragraph!(strong!(plain!("foo"), emph!(plain!("bar")), plain!("baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo*bar*baz**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7025
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7025>
/// <https://spec.commonmark.org/0.29/#example-429>
fn t429() {
    init!("***foo* bar**\n");

    assert_eq!(
        // from spec: <p><strong><em>foo</em> bar</strong></p>
        [
            paragraph!(strong!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo* bar**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7025
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7025>
/// <https://spec.commonmark.org/0.29/#example-429>
fn t429_cr() {
    init!("***foo* bar**\r");

    assert_eq!(
        // from spec: <p><strong><em>foo</em> bar</strong></p>
        [
            paragraph!(strong!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo* bar**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7025
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7025>
/// <https://spec.commonmark.org/0.29/#example-429>
fn t429_cr_nl() {
    init!("***foo* bar**\r\n");

    assert_eq!(
        // from spec: <p><strong><em>foo</em> bar</strong></p>
        [
            paragraph!(strong!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo* bar**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7025
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7025>
/// <https://spec.commonmark.org/0.29/#example-429>
fn t429_no_nl() {
    init!("***foo* bar**");

    assert_eq!(
        // from spec: <p><strong><em>foo</em> bar</strong></p>
        [
            paragraph!(strong!(emph!(plain!("foo")), plain!(" bar")))
        ].as_slice(),
        body(&mut StringData::new("***foo* bar**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7025
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7025>
/// <https://spec.commonmark.org/0.29/#example-429>
fn t429_tab() {
    init!("***foo*\tbar**\n");

    assert_eq!(
        // from spec: <p><strong><em>foo</em> bar</strong></p>
        [
            paragraph!(strong!(emph!(plain!("foo")), plain!("	bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("***foo*\tbar**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7032
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7032>
/// <https://spec.commonmark.org/0.29/#example-430>
fn t430() {
    init!("**foo *bar***\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em></strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7032
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7032>
/// <https://spec.commonmark.org/0.29/#example-430>
fn t430_cr() {
    init!("**foo *bar***\r");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em></strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7032
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7032>
/// <https://spec.commonmark.org/0.29/#example-430>
fn t430_cr_nl() {
    init!("**foo *bar***\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em></strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7032
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7032>
/// <https://spec.commonmark.org/0.29/#example-430>
fn t430_no_nl() {
    init!("**foo *bar***");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em></strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7032
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7032>
/// <https://spec.commonmark.org/0.29/#example-430>
fn t430_tab() {
    init!("**foo\t*bar***\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar</em></strong></p>
        [
            paragraph!(strong!(plain!("foo	"), emph!(plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t*bar***\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7041
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7041>
/// <https://spec.commonmark.org/0.29/#example-431>
fn t431() {
    init!("**foo *bar **baz**\nbim* bop**\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar "), strong!(plain!("baz")), SoftBreak, plain!("bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar **baz**\nbim* bop**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7041
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7041>
/// <https://spec.commonmark.org/0.29/#example-431>
fn t431_cr() {
    init!("**foo *bar **baz**\rbim* bop**\r");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar "), strong!(plain!("baz")), SoftBreak, plain!("bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar **baz**\rbim* bop**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7041
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7041>
/// <https://spec.commonmark.org/0.29/#example-431>
fn t431_cr_nl() {
    init!("**foo *bar **baz**\r\nbim* bop**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar "), strong!(plain!("baz")), SoftBreak, plain!("bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar **baz**\r\nbim* bop**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7041
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7041>
/// <https://spec.commonmark.org/0.29/#example-431>
fn t431_no_nl() {
    init!("**foo *bar **baz**\nbim* bop**");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>
        [
            paragraph!(strong!(plain!("foo "), emph!(plain!("bar "), strong!(plain!("baz")), SoftBreak, plain!("bim")), plain!(" bop")))
        ].as_slice(),
        body(&mut StringData::new("**foo *bar **baz**\nbim* bop**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7041
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7041>
/// <https://spec.commonmark.org/0.29/#example-431>
fn t431_tab() {
    init!("**foo\t*bar\t**baz**\nbim*\tbop**\n");

    assert_eq!(
        // from spec: <p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>
        [
            paragraph!(strong!(plain!("foo	"), emph!(plain!("bar	"), strong!(plain!("baz")), SoftBreak, plain!("bim")), plain!("	bop")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t*bar\t**baz**\nbim*\tbop**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7050>
/// <https://spec.commonmark.org/0.29/#example-432>
fn t432() {
    init!("**foo [*bar*](/url)**\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("**foo [*bar*](/url)**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7050>
/// <https://spec.commonmark.org/0.29/#example-432>
fn t432_cr() {
    init!("**foo [*bar*](/url)**\r");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("**foo [*bar*](/url)**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7050>
/// <https://spec.commonmark.org/0.29/#example-432>
fn t432_cr_nl() {
    init!("**foo [*bar*](/url)**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("**foo [*bar*](/url)**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7050>
/// <https://spec.commonmark.org/0.29/#example-432>
fn t432_no_nl() {
    init!("**foo [*bar*](/url)**");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>
        [
            paragraph!(strong!(plain!("foo "), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        body(&mut StringData::new("**foo [*bar*](/url)**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7050>
/// <https://spec.commonmark.org/0.29/#example-432>
fn t432_tab() {
    init!("**foo\t[*bar*](/url)**\n");

    assert_eq!(
        // from spec: <p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>
        [
            paragraph!(strong!(plain!("foo	"), link!("/url", "", emph!(plain!("bar")))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t[*bar*](/url)**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7059>
/// <https://spec.commonmark.org/0.29/#example-433>
fn t433() {
    init!("__ is not an empty emphasis\n");

    assert_eq!(
        // from spec: <p>__ is not an empty emphasis</p>
        [
            paragraph!(plain!("__ is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("__ is not an empty emphasis\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7059>
/// <https://spec.commonmark.org/0.29/#example-433>
fn t433_cr() {
    init!("__ is not an empty emphasis\r");

    assert_eq!(
        // from spec: <p>__ is not an empty emphasis</p>
        [
            paragraph!(plain!("__ is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("__ is not an empty emphasis\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7059>
/// <https://spec.commonmark.org/0.29/#example-433>
fn t433_cr_nl() {
    init!("__ is not an empty emphasis\r\n");

    assert_eq!(
        // from spec: <p>__ is not an empty emphasis</p>
        [
            paragraph!(plain!("__ is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("__ is not an empty emphasis\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7059>
/// <https://spec.commonmark.org/0.29/#example-433>
fn t433_no_nl() {
    init!("__ is not an empty emphasis");

    assert_eq!(
        // from spec: <p>__ is not an empty emphasis</p>
        [
            paragraph!(plain!("__ is not an empty emphasis"))
        ].as_slice(),
        body(&mut StringData::new("__ is not an empty emphasis", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7059>
/// <https://spec.commonmark.org/0.29/#example-433>
fn t433_tab() {
    init!("__\tis\tnot\tan\tempty\temphasis\n");

    assert_eq!(
        // from spec: <p>__ is not an empty emphasis</p>
        [
            paragraph!(plain!("__	is	not	an	empty	emphasis"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__\tis\tnot\tan\tempty\temphasis\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7066>
/// <https://spec.commonmark.org/0.29/#example-434>
fn t434() {
    init!("____ is not an empty strong emphasis\n");

    assert_eq!(
        // from spec: <p>____ is not an empty strong emphasis</p>
        [
            paragraph!(plain!("____ is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("____ is not an empty strong emphasis\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7066>
/// <https://spec.commonmark.org/0.29/#example-434>
fn t434_cr() {
    init!("____ is not an empty strong emphasis\r");

    assert_eq!(
        // from spec: <p>____ is not an empty strong emphasis</p>
        [
            paragraph!(plain!("____ is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("____ is not an empty strong emphasis\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7066>
/// <https://spec.commonmark.org/0.29/#example-434>
fn t434_cr_nl() {
    init!("____ is not an empty strong emphasis\r\n");

    assert_eq!(
        // from spec: <p>____ is not an empty strong emphasis</p>
        [
            paragraph!(plain!("____ is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("____ is not an empty strong emphasis\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7066>
/// <https://spec.commonmark.org/0.29/#example-434>
fn t434_no_nl() {
    init!("____ is not an empty strong emphasis");

    assert_eq!(
        // from spec: <p>____ is not an empty strong emphasis</p>
        [
            paragraph!(plain!("____ is not an empty strong emphasis"))
        ].as_slice(),
        body(&mut StringData::new("____ is not an empty strong emphasis", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7066
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7066>
/// <https://spec.commonmark.org/0.29/#example-434>
fn t434_tab() {
    init!("____\tis\tnot\tan\tempty\tstrong\temphasis\n");

    assert_eq!(
        // from spec: <p>____ is not an empty strong emphasis</p>
        [
            paragraph!(plain!("____	is	not	an	empty	strong	emphasis"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("____\tis\tnot\tan\tempty\tstrong\temphasis\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7076
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7076>
/// <https://spec.commonmark.org/0.29/#example-435>
fn t435() {
    init!("foo ***\n");

    assert_eq!(
        // from spec: <p>foo ***</p>
        [
            paragraph!(plain!("foo ***"))
        ].as_slice(),
        body(&mut StringData::new("foo ***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7076
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7076>
/// <https://spec.commonmark.org/0.29/#example-435>
fn t435_cr() {
    init!("foo ***\r");

    assert_eq!(
        // from spec: <p>foo ***</p>
        [
            paragraph!(plain!("foo ***"))
        ].as_slice(),
        body(&mut StringData::new("foo ***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7076
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7076>
/// <https://spec.commonmark.org/0.29/#example-435>
fn t435_cr_nl() {
    init!("foo ***\r\n");

    assert_eq!(
        // from spec: <p>foo ***</p>
        [
            paragraph!(plain!("foo ***"))
        ].as_slice(),
        body(&mut StringData::new("foo ***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7076
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7076>
/// <https://spec.commonmark.org/0.29/#example-435>
fn t435_no_nl() {
    init!("foo ***");

    assert_eq!(
        // from spec: <p>foo ***</p>
        [
            paragraph!(plain!("foo ***"))
        ].as_slice(),
        body(&mut StringData::new("foo ***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7076
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7076>
/// <https://spec.commonmark.org/0.29/#example-435>
fn t435_tab() {
    init!("foo\t***\n");

    assert_eq!(
        // from spec: <p>foo ***</p>
        [
            paragraph!(plain!("foo	***"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t***\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7083>
/// <https://spec.commonmark.org/0.29/#example-436>
fn t436() {
    init!("foo *\\**\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo *\\**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7083>
/// <https://spec.commonmark.org/0.29/#example-436>
fn t436_cr() {
    init!("foo *\\**\r");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo *\\**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7083>
/// <https://spec.commonmark.org/0.29/#example-436>
fn t436_cr_nl() {
    init!("foo *\\**\r\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo *\\**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7083>
/// <https://spec.commonmark.org/0.29/#example-436>
fn t436_no_nl() {
    init!("foo *\\**");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo *\\**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7083>
/// <https://spec.commonmark.org/0.29/#example-436>
fn t436_tab() {
    init!("foo\t*\\**\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo	"), emph!(plain!("*")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t*\\**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7090
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7090>
/// <https://spec.commonmark.org/0.29/#example-437>
fn t437() {
    init!("foo *_*\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo *_*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7090
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7090>
/// <https://spec.commonmark.org/0.29/#example-437>
fn t437_cr() {
    init!("foo *_*\r");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo *_*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7090
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7090>
/// <https://spec.commonmark.org/0.29/#example-437>
fn t437_cr_nl() {
    init!("foo *_*\r\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo *_*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7090
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7090>
/// <https://spec.commonmark.org/0.29/#example-437>
fn t437_no_nl() {
    init!("foo *_*");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo *_*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7090
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7090>
/// <https://spec.commonmark.org/0.29/#example-437>
fn t437_tab() {
    init!("foo\t*_*\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo	"), emph!(plain!("_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t*_*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7097
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7097>
/// <https://spec.commonmark.org/0.29/#example-438>
fn t438() {
    init!("foo *****\n");

    assert_eq!(
        // from spec: <p>foo *****</p>
        [
            paragraph!(plain!("foo *****"))
        ].as_slice(),
        body(&mut StringData::new("foo *****\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7097
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7097>
/// <https://spec.commonmark.org/0.29/#example-438>
fn t438_cr() {
    init!("foo *****\r");

    assert_eq!(
        // from spec: <p>foo *****</p>
        [
            paragraph!(plain!("foo *****"))
        ].as_slice(),
        body(&mut StringData::new("foo *****\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7097
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7097>
/// <https://spec.commonmark.org/0.29/#example-438>
fn t438_cr_nl() {
    init!("foo *****\r\n");

    assert_eq!(
        // from spec: <p>foo *****</p>
        [
            paragraph!(plain!("foo *****"))
        ].as_slice(),
        body(&mut StringData::new("foo *****\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7097
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7097>
/// <https://spec.commonmark.org/0.29/#example-438>
fn t438_no_nl() {
    init!("foo *****");

    assert_eq!(
        // from spec: <p>foo *****</p>
        [
            paragraph!(plain!("foo *****"))
        ].as_slice(),
        body(&mut StringData::new("foo *****", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7097
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7097>
/// <https://spec.commonmark.org/0.29/#example-438>
fn t438_tab() {
    init!("foo\t*****\n");

    assert_eq!(
        // from spec: <p>foo *****</p>
        [
            paragraph!(plain!("foo	*****"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t*****\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7104
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7104>
/// <https://spec.commonmark.org/0.29/#example-439>
fn t439() {
    init!("foo **\\***\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo **\\***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7104
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7104>
/// <https://spec.commonmark.org/0.29/#example-439>
fn t439_cr() {
    init!("foo **\\***\r");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo **\\***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7104
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7104>
/// <https://spec.commonmark.org/0.29/#example-439>
fn t439_cr_nl() {
    init!("foo **\\***\r\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo **\\***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7104
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7104>
/// <https://spec.commonmark.org/0.29/#example-439>
fn t439_no_nl() {
    init!("foo **\\***");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo **\\***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7104
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7104>
/// <https://spec.commonmark.org/0.29/#example-439>
fn t439_tab() {
    init!("foo\t**\\***\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo	"), strong!(plain!("*")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t**\\***\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7111
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7111>
/// <https://spec.commonmark.org/0.29/#example-440>
fn t440() {
    init!("foo **_**\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo **_**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7111
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7111>
/// <https://spec.commonmark.org/0.29/#example-440>
fn t440_cr() {
    init!("foo **_**\r");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo **_**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7111
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7111>
/// <https://spec.commonmark.org/0.29/#example-440>
fn t440_cr_nl() {
    init!("foo **_**\r\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo **_**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7111
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7111>
/// <https://spec.commonmark.org/0.29/#example-440>
fn t440_no_nl() {
    init!("foo **_**");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo **_**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7111
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7111>
/// <https://spec.commonmark.org/0.29/#example-440>
fn t440_tab() {
    init!("foo\t**_**\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo	"), strong!(plain!("_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t**_**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7122
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7122>
/// <https://spec.commonmark.org/0.29/#example-441>
fn t441() {
    init!("**foo*\n");

    assert_eq!(
        // from spec: <p>*<em>foo</em></p>
        [
            paragraph!(plain!("*"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7122
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7122>
/// <https://spec.commonmark.org/0.29/#example-441>
fn t441_cr() {
    init!("**foo*\r");

    assert_eq!(
        // from spec: <p>*<em>foo</em></p>
        [
            paragraph!(plain!("*"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7122
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7122>
/// <https://spec.commonmark.org/0.29/#example-441>
fn t441_cr_nl() {
    init!("**foo*\r\n");

    assert_eq!(
        // from spec: <p>*<em>foo</em></p>
        [
            paragraph!(plain!("*"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7122
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7122>
/// <https://spec.commonmark.org/0.29/#example-441>
fn t441_no_nl() {
    init!("**foo*");

    assert_eq!(
        // from spec: <p>*<em>foo</em></p>
        [
            paragraph!(plain!("*"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7129
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7129>
/// <https://spec.commonmark.org/0.29/#example-442>
fn t442() {
    init!("*foo**\n");

    assert_eq!(
        // from spec: <p><em>foo</em>*</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7129
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7129>
/// <https://spec.commonmark.org/0.29/#example-442>
fn t442_cr() {
    init!("*foo**\r");

    assert_eq!(
        // from spec: <p><em>foo</em>*</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7129
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7129>
/// <https://spec.commonmark.org/0.29/#example-442>
fn t442_cr_nl() {
    init!("*foo**\r\n");

    assert_eq!(
        // from spec: <p><em>foo</em>*</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7129
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7129>
/// <https://spec.commonmark.org/0.29/#example-442>
fn t442_no_nl() {
    init!("*foo**");

    assert_eq!(
        // from spec: <p><em>foo</em>*</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("*foo**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7136
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7136>
/// <https://spec.commonmark.org/0.29/#example-443>
fn t443() {
    init!("***foo**\n");

    assert_eq!(
        // from spec: <p>*<strong>foo</strong></p>
        [
            paragraph!(plain!("*"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("***foo**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7136
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7136>
/// <https://spec.commonmark.org/0.29/#example-443>
fn t443_cr() {
    init!("***foo**\r");

    assert_eq!(
        // from spec: <p>*<strong>foo</strong></p>
        [
            paragraph!(plain!("*"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("***foo**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7136
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7136>
/// <https://spec.commonmark.org/0.29/#example-443>
fn t443_cr_nl() {
    init!("***foo**\r\n");

    assert_eq!(
        // from spec: <p>*<strong>foo</strong></p>
        [
            paragraph!(plain!("*"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("***foo**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7136
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7136>
/// <https://spec.commonmark.org/0.29/#example-443>
fn t443_no_nl() {
    init!("***foo**");

    assert_eq!(
        // from spec: <p>*<strong>foo</strong></p>
        [
            paragraph!(plain!("*"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("***foo**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7143
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7143>
/// <https://spec.commonmark.org/0.29/#example-444>
fn t444() {
    init!("****foo*\n");

    assert_eq!(
        // from spec: <p>***<em>foo</em></p>
        [
            paragraph!(plain!("***"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("****foo*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7143
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7143>
/// <https://spec.commonmark.org/0.29/#example-444>
fn t444_cr() {
    init!("****foo*\r");

    assert_eq!(
        // from spec: <p>***<em>foo</em></p>
        [
            paragraph!(plain!("***"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("****foo*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7143
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7143>
/// <https://spec.commonmark.org/0.29/#example-444>
fn t444_cr_nl() {
    init!("****foo*\r\n");

    assert_eq!(
        // from spec: <p>***<em>foo</em></p>
        [
            paragraph!(plain!("***"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("****foo*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7143
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7143>
/// <https://spec.commonmark.org/0.29/#example-444>
fn t444_no_nl() {
    init!("****foo*");

    assert_eq!(
        // from spec: <p>***<em>foo</em></p>
        [
            paragraph!(plain!("***"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("****foo*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7150
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7150>
/// <https://spec.commonmark.org/0.29/#example-445>
fn t445() {
    init!("**foo***\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>*</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("**foo***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7150
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7150>
/// <https://spec.commonmark.org/0.29/#example-445>
fn t445_cr() {
    init!("**foo***\r");

    assert_eq!(
        // from spec: <p><strong>foo</strong>*</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("**foo***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7150
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7150>
/// <https://spec.commonmark.org/0.29/#example-445>
fn t445_cr_nl() {
    init!("**foo***\r\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>*</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("**foo***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7150
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7150>
/// <https://spec.commonmark.org/0.29/#example-445>
fn t445_no_nl() {
    init!("**foo***");

    assert_eq!(
        // from spec: <p><strong>foo</strong>*</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("*"))
        ].as_slice(),
        body(&mut StringData::new("**foo***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7157
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7157>
/// <https://spec.commonmark.org/0.29/#example-446>
fn t446() {
    init!("*foo****\n");

    assert_eq!(
        // from spec: <p><em>foo</em>***</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("***"))
        ].as_slice(),
        body(&mut StringData::new("*foo****\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7157
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7157>
/// <https://spec.commonmark.org/0.29/#example-446>
fn t446_cr() {
    init!("*foo****\r");

    assert_eq!(
        // from spec: <p><em>foo</em>***</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("***"))
        ].as_slice(),
        body(&mut StringData::new("*foo****\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7157
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7157>
/// <https://spec.commonmark.org/0.29/#example-446>
fn t446_cr_nl() {
    init!("*foo****\r\n");

    assert_eq!(
        // from spec: <p><em>foo</em>***</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("***"))
        ].as_slice(),
        body(&mut StringData::new("*foo****\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7157
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7157>
/// <https://spec.commonmark.org/0.29/#example-446>
fn t446_no_nl() {
    init!("*foo****");

    assert_eq!(
        // from spec: <p><em>foo</em>***</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("***"))
        ].as_slice(),
        body(&mut StringData::new("*foo****", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7167
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7167>
/// <https://spec.commonmark.org/0.29/#example-447>
fn t447() {
    init!("foo ___\n");

    assert_eq!(
        // from spec: <p>foo ___</p>
        [
            paragraph!(plain!("foo ___"))
        ].as_slice(),
        body(&mut StringData::new("foo ___\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7167
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7167>
/// <https://spec.commonmark.org/0.29/#example-447>
fn t447_cr() {
    init!("foo ___\r");

    assert_eq!(
        // from spec: <p>foo ___</p>
        [
            paragraph!(plain!("foo ___"))
        ].as_slice(),
        body(&mut StringData::new("foo ___\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7167
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7167>
/// <https://spec.commonmark.org/0.29/#example-447>
fn t447_cr_nl() {
    init!("foo ___\r\n");

    assert_eq!(
        // from spec: <p>foo ___</p>
        [
            paragraph!(plain!("foo ___"))
        ].as_slice(),
        body(&mut StringData::new("foo ___\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7167
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7167>
/// <https://spec.commonmark.org/0.29/#example-447>
fn t447_no_nl() {
    init!("foo ___");

    assert_eq!(
        // from spec: <p>foo ___</p>
        [
            paragraph!(plain!("foo ___"))
        ].as_slice(),
        body(&mut StringData::new("foo ___", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7167
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7167>
/// <https://spec.commonmark.org/0.29/#example-447>
fn t447_tab() {
    init!("foo\t___\n");

    assert_eq!(
        // from spec: <p>foo ___</p>
        [
            paragraph!(plain!("foo	___"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t___\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7174
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7174>
/// <https://spec.commonmark.org/0.29/#example-448>
fn t448() {
    init!("foo _\\__\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo _\\__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7174
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7174>
/// <https://spec.commonmark.org/0.29/#example-448>
fn t448_cr() {
    init!("foo _\\__\r");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo _\\__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7174
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7174>
/// <https://spec.commonmark.org/0.29/#example-448>
fn t448_cr_nl() {
    init!("foo _\\__\r\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo _\\__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7174
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7174>
/// <https://spec.commonmark.org/0.29/#example-448>
fn t448_no_nl() {
    init!("foo _\\__");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo _\\__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7174
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7174>
/// <https://spec.commonmark.org/0.29/#example-448>
fn t448_tab() {
    init!("foo\t_\\__\n");

    assert_eq!(
        // from spec: <p>foo <em>_</em></p>
        [
            paragraph!(plain!("foo	"), emph!(plain!("_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t_\\__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7181
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7181>
/// <https://spec.commonmark.org/0.29/#example-449>
fn t449() {
    init!("foo _*_\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo _*_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7181
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7181>
/// <https://spec.commonmark.org/0.29/#example-449>
fn t449_cr() {
    init!("foo _*_\r");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo _*_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7181
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7181>
/// <https://spec.commonmark.org/0.29/#example-449>
fn t449_cr_nl() {
    init!("foo _*_\r\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo _*_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7181
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7181>
/// <https://spec.commonmark.org/0.29/#example-449>
fn t449_no_nl() {
    init!("foo _*_");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo "), emph!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo _*_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7181
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7181>
/// <https://spec.commonmark.org/0.29/#example-449>
fn t449_tab() {
    init!("foo\t_*_\n");

    assert_eq!(
        // from spec: <p>foo <em>*</em></p>
        [
            paragraph!(plain!("foo	"), emph!(plain!("*")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t_*_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7188>
/// <https://spec.commonmark.org/0.29/#example-450>
fn t450() {
    init!("foo _____\n");

    assert_eq!(
        // from spec: <p>foo _____</p>
        [
            paragraph!(plain!("foo _____"))
        ].as_slice(),
        body(&mut StringData::new("foo _____\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7188>
/// <https://spec.commonmark.org/0.29/#example-450>
fn t450_cr() {
    init!("foo _____\r");

    assert_eq!(
        // from spec: <p>foo _____</p>
        [
            paragraph!(plain!("foo _____"))
        ].as_slice(),
        body(&mut StringData::new("foo _____\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7188>
/// <https://spec.commonmark.org/0.29/#example-450>
fn t450_cr_nl() {
    init!("foo _____\r\n");

    assert_eq!(
        // from spec: <p>foo _____</p>
        [
            paragraph!(plain!("foo _____"))
        ].as_slice(),
        body(&mut StringData::new("foo _____\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7188>
/// <https://spec.commonmark.org/0.29/#example-450>
fn t450_no_nl() {
    init!("foo _____");

    assert_eq!(
        // from spec: <p>foo _____</p>
        [
            paragraph!(plain!("foo _____"))
        ].as_slice(),
        body(&mut StringData::new("foo _____", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7188>
/// <https://spec.commonmark.org/0.29/#example-450>
fn t450_tab() {
    init!("foo\t_____\n");

    assert_eq!(
        // from spec: <p>foo _____</p>
        [
            paragraph!(plain!("foo	_____"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t_____\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7195
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7195>
/// <https://spec.commonmark.org/0.29/#example-451>
fn t451() {
    init!("foo __\\___\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo __\\___\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7195
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7195>
/// <https://spec.commonmark.org/0.29/#example-451>
fn t451_cr() {
    init!("foo __\\___\r");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo __\\___\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7195
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7195>
/// <https://spec.commonmark.org/0.29/#example-451>
fn t451_cr_nl() {
    init!("foo __\\___\r\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo __\\___\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7195
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7195>
/// <https://spec.commonmark.org/0.29/#example-451>
fn t451_no_nl() {
    init!("foo __\\___");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("_")))
        ].as_slice(),
        body(&mut StringData::new("foo __\\___", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7195
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7195>
/// <https://spec.commonmark.org/0.29/#example-451>
fn t451_tab() {
    init!("foo\t__\\___\n");

    assert_eq!(
        // from spec: <p>foo <strong>_</strong></p>
        [
            paragraph!(plain!("foo	"), strong!(plain!("_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t__\\___\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7202
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7202>
/// <https://spec.commonmark.org/0.29/#example-452>
fn t452() {
    init!("foo __*__\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo __*__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7202
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7202>
/// <https://spec.commonmark.org/0.29/#example-452>
fn t452_cr() {
    init!("foo __*__\r");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo __*__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7202
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7202>
/// <https://spec.commonmark.org/0.29/#example-452>
fn t452_cr_nl() {
    init!("foo __*__\r\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo __*__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7202
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7202>
/// <https://spec.commonmark.org/0.29/#example-452>
fn t452_no_nl() {
    init!("foo __*__");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo "), strong!(plain!("*")))
        ].as_slice(),
        body(&mut StringData::new("foo __*__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7202
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7202>
/// <https://spec.commonmark.org/0.29/#example-452>
fn t452_tab() {
    init!("foo\t__*__\n");

    assert_eq!(
        // from spec: <p>foo <strong>*</strong></p>
        [
            paragraph!(plain!("foo	"), strong!(plain!("*")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t__*__\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7209>
/// <https://spec.commonmark.org/0.29/#example-453>
fn t453() {
    init!("__foo_\n");

    assert_eq!(
        // from spec: <p>_<em>foo</em></p>
        [
            paragraph!(plain!("_"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7209>
/// <https://spec.commonmark.org/0.29/#example-453>
fn t453_cr() {
    init!("__foo_\r");

    assert_eq!(
        // from spec: <p>_<em>foo</em></p>
        [
            paragraph!(plain!("_"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7209>
/// <https://spec.commonmark.org/0.29/#example-453>
fn t453_cr_nl() {
    init!("__foo_\r\n");

    assert_eq!(
        // from spec: <p>_<em>foo</em></p>
        [
            paragraph!(plain!("_"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7209
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7209>
/// <https://spec.commonmark.org/0.29/#example-453>
fn t453_no_nl() {
    init!("__foo_");

    assert_eq!(
        // from spec: <p>_<em>foo</em></p>
        [
            paragraph!(plain!("_"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7220>
/// <https://spec.commonmark.org/0.29/#example-454>
fn t454() {
    init!("_foo__\n");

    assert_eq!(
        // from spec: <p><em>foo</em>_</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("_foo__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7220>
/// <https://spec.commonmark.org/0.29/#example-454>
fn t454_cr() {
    init!("_foo__\r");

    assert_eq!(
        // from spec: <p><em>foo</em>_</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("_foo__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7220>
/// <https://spec.commonmark.org/0.29/#example-454>
fn t454_cr_nl() {
    init!("_foo__\r\n");

    assert_eq!(
        // from spec: <p><em>foo</em>_</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("_foo__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7220>
/// <https://spec.commonmark.org/0.29/#example-454>
fn t454_no_nl() {
    init!("_foo__");

    assert_eq!(
        // from spec: <p><em>foo</em>_</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("_foo__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7227>
/// <https://spec.commonmark.org/0.29/#example-455>
fn t455() {
    init!("___foo__\n");

    assert_eq!(
        // from spec: <p>_<strong>foo</strong></p>
        [
            paragraph!(plain!("_"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("___foo__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7227>
/// <https://spec.commonmark.org/0.29/#example-455>
fn t455_cr() {
    init!("___foo__\r");

    assert_eq!(
        // from spec: <p>_<strong>foo</strong></p>
        [
            paragraph!(plain!("_"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("___foo__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7227>
/// <https://spec.commonmark.org/0.29/#example-455>
fn t455_cr_nl() {
    init!("___foo__\r\n");

    assert_eq!(
        // from spec: <p>_<strong>foo</strong></p>
        [
            paragraph!(plain!("_"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("___foo__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7227
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7227>
/// <https://spec.commonmark.org/0.29/#example-455>
fn t455_no_nl() {
    init!("___foo__");

    assert_eq!(
        // from spec: <p>_<strong>foo</strong></p>
        [
            paragraph!(plain!("_"), strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("___foo__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7234
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7234>
/// <https://spec.commonmark.org/0.29/#example-456>
fn t456() {
    init!("____foo_\n");

    assert_eq!(
        // from spec: <p>___<em>foo</em></p>
        [
            paragraph!(plain!("___"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("____foo_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7234
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7234>
/// <https://spec.commonmark.org/0.29/#example-456>
fn t456_cr() {
    init!("____foo_\r");

    assert_eq!(
        // from spec: <p>___<em>foo</em></p>
        [
            paragraph!(plain!("___"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("____foo_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7234
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7234>
/// <https://spec.commonmark.org/0.29/#example-456>
fn t456_cr_nl() {
    init!("____foo_\r\n");

    assert_eq!(
        // from spec: <p>___<em>foo</em></p>
        [
            paragraph!(plain!("___"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("____foo_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7234
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7234>
/// <https://spec.commonmark.org/0.29/#example-456>
fn t456_no_nl() {
    init!("____foo_");

    assert_eq!(
        // from spec: <p>___<em>foo</em></p>
        [
            paragraph!(plain!("___"), emph!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("____foo_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7241
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7241>
/// <https://spec.commonmark.org/0.29/#example-457>
fn t457() {
    init!("__foo___\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>_</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("__foo___\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7241
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7241>
/// <https://spec.commonmark.org/0.29/#example-457>
fn t457_cr() {
    init!("__foo___\r");

    assert_eq!(
        // from spec: <p><strong>foo</strong>_</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("__foo___\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7241
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7241>
/// <https://spec.commonmark.org/0.29/#example-457>
fn t457_cr_nl() {
    init!("__foo___\r\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong>_</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("__foo___\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7241
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7241>
/// <https://spec.commonmark.org/0.29/#example-457>
fn t457_no_nl() {
    init!("__foo___");

    assert_eq!(
        // from spec: <p><strong>foo</strong>_</p>
        [
            paragraph!(strong!(plain!("foo")), plain!("_"))
        ].as_slice(),
        body(&mut StringData::new("__foo___", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7248>
/// <https://spec.commonmark.org/0.29/#example-458>
fn t458() {
    init!("_foo____\n");

    assert_eq!(
        // from spec: <p><em>foo</em>___</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("___"))
        ].as_slice(),
        body(&mut StringData::new("_foo____\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7248>
/// <https://spec.commonmark.org/0.29/#example-458>
fn t458_cr() {
    init!("_foo____\r");

    assert_eq!(
        // from spec: <p><em>foo</em>___</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("___"))
        ].as_slice(),
        body(&mut StringData::new("_foo____\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7248>
/// <https://spec.commonmark.org/0.29/#example-458>
fn t458_cr_nl() {
    init!("_foo____\r\n");

    assert_eq!(
        // from spec: <p><em>foo</em>___</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("___"))
        ].as_slice(),
        body(&mut StringData::new("_foo____\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7248>
/// <https://spec.commonmark.org/0.29/#example-458>
fn t458_no_nl() {
    init!("_foo____");

    assert_eq!(
        // from spec: <p><em>foo</em>___</p>
        [
            paragraph!(emph!(plain!("foo")), plain!("___"))
        ].as_slice(),
        body(&mut StringData::new("_foo____", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7258>
/// <https://spec.commonmark.org/0.29/#example-459>
fn t459() {
    init!("**foo**\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7258>
/// <https://spec.commonmark.org/0.29/#example-459>
fn t459_cr() {
    init!("**foo**\r");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7258>
/// <https://spec.commonmark.org/0.29/#example-459>
fn t459_cr_nl() {
    init!("**foo**\r\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7258>
/// <https://spec.commonmark.org/0.29/#example-459>
fn t459_no_nl() {
    init!("**foo**");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("**foo**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7265>
/// <https://spec.commonmark.org/0.29/#example-460>
fn t460() {
    init!("*_foo_*\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("*_foo_*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7265>
/// <https://spec.commonmark.org/0.29/#example-460>
fn t460_cr() {
    init!("*_foo_*\r");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("*_foo_*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7265>
/// <https://spec.commonmark.org/0.29/#example-460>
fn t460_cr_nl() {
    init!("*_foo_*\r\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("*_foo_*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7265
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7265>
/// <https://spec.commonmark.org/0.29/#example-460>
fn t460_no_nl() {
    init!("*_foo_*");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("*_foo_*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7272
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7272>
/// <https://spec.commonmark.org/0.29/#example-461>
fn t461() {
    init!("__foo__\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo__\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7272
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7272>
/// <https://spec.commonmark.org/0.29/#example-461>
fn t461_cr() {
    init!("__foo__\r");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo__\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7272
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7272>
/// <https://spec.commonmark.org/0.29/#example-461>
fn t461_cr_nl() {
    init!("__foo__\r\n");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo__\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7272
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7272>
/// <https://spec.commonmark.org/0.29/#example-461>
fn t461_no_nl() {
    init!("__foo__");

    assert_eq!(
        // from spec: <p><strong>foo</strong></p>
        [
            paragraph!(strong!(plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("__foo__", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7279
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7279>
/// <https://spec.commonmark.org/0.29/#example-462>
fn t462() {
    init!("_*foo*_\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("_*foo*_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7279
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7279>
/// <https://spec.commonmark.org/0.29/#example-462>
fn t462_cr() {
    init!("_*foo*_\r");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("_*foo*_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7279
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7279>
/// <https://spec.commonmark.org/0.29/#example-462>
fn t462_cr_nl() {
    init!("_*foo*_\r\n");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("_*foo*_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7279
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7279>
/// <https://spec.commonmark.org/0.29/#example-462>
fn t462_no_nl() {
    init!("_*foo*_");

    assert_eq!(
        // from spec: <p><em><em>foo</em></em></p>
        [
            paragraph!(emph!(emph!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("_*foo*_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7289
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7289>
/// <https://spec.commonmark.org/0.29/#example-463>
fn t463() {
    init!("****foo****\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("****foo****\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7289
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7289>
/// <https://spec.commonmark.org/0.29/#example-463>
fn t463_cr() {
    init!("****foo****\r");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("****foo****\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7289
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7289>
/// <https://spec.commonmark.org/0.29/#example-463>
fn t463_cr_nl() {
    init!("****foo****\r\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("****foo****\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7289
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7289>
/// <https://spec.commonmark.org/0.29/#example-463>
fn t463_no_nl() {
    init!("****foo****");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("****foo****", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7296
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7296>
/// <https://spec.commonmark.org/0.29/#example-464>
fn t464() {
    init!("____foo____\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("____foo____\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7296
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7296>
/// <https://spec.commonmark.org/0.29/#example-464>
fn t464_cr() {
    init!("____foo____\r");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("____foo____\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7296
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7296>
/// <https://spec.commonmark.org/0.29/#example-464>
fn t464_cr_nl() {
    init!("____foo____\r\n");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("____foo____\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7296
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7296>
/// <https://spec.commonmark.org/0.29/#example-464>
fn t464_no_nl() {
    init!("____foo____");

    assert_eq!(
        // from spec: <p><strong><strong>foo</strong></strong></p>
        [
            paragraph!(strong!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("____foo____", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7307
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7307>
/// <https://spec.commonmark.org/0.29/#example-465>
fn t465() {
    init!("******foo******\n");

    assert_eq!(
        // from spec: <p><strong><strong><strong>foo</strong></strong></strong></p>
        [
            paragraph!(strong!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("******foo******\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7307
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7307>
/// <https://spec.commonmark.org/0.29/#example-465>
fn t465_cr() {
    init!("******foo******\r");

    assert_eq!(
        // from spec: <p><strong><strong><strong>foo</strong></strong></strong></p>
        [
            paragraph!(strong!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("******foo******\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7307
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7307>
/// <https://spec.commonmark.org/0.29/#example-465>
fn t465_cr_nl() {
    init!("******foo******\r\n");

    assert_eq!(
        // from spec: <p><strong><strong><strong>foo</strong></strong></strong></p>
        [
            paragraph!(strong!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("******foo******\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7307
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7307>
/// <https://spec.commonmark.org/0.29/#example-465>
fn t465_no_nl() {
    init!("******foo******");

    assert_eq!(
        // from spec: <p><strong><strong><strong>foo</strong></strong></strong></p>
        [
            paragraph!(strong!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("******foo******", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7316>
/// <https://spec.commonmark.org/0.29/#example-466>
fn t466() {
    init!("***foo***\n");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong></em></p>
        [
            paragraph!(emph!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("***foo***\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7316>
/// <https://spec.commonmark.org/0.29/#example-466>
fn t466_cr() {
    init!("***foo***\r");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong></em></p>
        [
            paragraph!(emph!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("***foo***\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7316>
/// <https://spec.commonmark.org/0.29/#example-466>
fn t466_cr_nl() {
    init!("***foo***\r\n");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong></em></p>
        [
            paragraph!(emph!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("***foo***\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7316>
/// <https://spec.commonmark.org/0.29/#example-466>
fn t466_no_nl() {
    init!("***foo***");

    assert_eq!(
        // from spec: <p><em><strong>foo</strong></em></p>
        [
            paragraph!(emph!(strong!(plain!("foo"))))
        ].as_slice(),
        body(&mut StringData::new("***foo***", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7323
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7323>
/// <https://spec.commonmark.org/0.29/#example-467>
fn t467() {
    init!("_____foo_____\n");

    assert_eq!(
        // from spec: <p><em><strong><strong>foo</strong></strong></em></p>
        [
            paragraph!(emph!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("_____foo_____\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7323
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7323>
/// <https://spec.commonmark.org/0.29/#example-467>
fn t467_cr() {
    init!("_____foo_____\r");

    assert_eq!(
        // from spec: <p><em><strong><strong>foo</strong></strong></em></p>
        [
            paragraph!(emph!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("_____foo_____\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7323
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7323>
/// <https://spec.commonmark.org/0.29/#example-467>
fn t467_cr_nl() {
    init!("_____foo_____\r\n");

    assert_eq!(
        // from spec: <p><em><strong><strong>foo</strong></strong></em></p>
        [
            paragraph!(emph!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("_____foo_____\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7323
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7323>
/// <https://spec.commonmark.org/0.29/#example-467>
fn t467_no_nl() {
    init!("_____foo_____");

    assert_eq!(
        // from spec: <p><em><strong><strong>foo</strong></strong></em></p>
        [
            paragraph!(emph!(strong!(strong!(plain!("foo")))))
        ].as_slice(),
        body(&mut StringData::new("_____foo_____", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7332
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7332>
/// <https://spec.commonmark.org/0.29/#example-468>
fn t468() {
    init!("*foo _bar* baz_\n");

    assert_eq!(
        // from spec: <p><em>foo _bar</em> baz_</p>
        [
            paragraph!(emph!(plain!("foo _bar")), plain!(" baz_"))
        ].as_slice(),
        body(&mut StringData::new("*foo _bar* baz_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7332
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7332>
/// <https://spec.commonmark.org/0.29/#example-468>
fn t468_cr() {
    init!("*foo _bar* baz_\r");

    assert_eq!(
        // from spec: <p><em>foo _bar</em> baz_</p>
        [
            paragraph!(emph!(plain!("foo _bar")), plain!(" baz_"))
        ].as_slice(),
        body(&mut StringData::new("*foo _bar* baz_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7332
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7332>
/// <https://spec.commonmark.org/0.29/#example-468>
fn t468_cr_nl() {
    init!("*foo _bar* baz_\r\n");

    assert_eq!(
        // from spec: <p><em>foo _bar</em> baz_</p>
        [
            paragraph!(emph!(plain!("foo _bar")), plain!(" baz_"))
        ].as_slice(),
        body(&mut StringData::new("*foo _bar* baz_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7332
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7332>
/// <https://spec.commonmark.org/0.29/#example-468>
fn t468_no_nl() {
    init!("*foo _bar* baz_");

    assert_eq!(
        // from spec: <p><em>foo _bar</em> baz_</p>
        [
            paragraph!(emph!(plain!("foo _bar")), plain!(" baz_"))
        ].as_slice(),
        body(&mut StringData::new("*foo _bar* baz_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7332
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7332>
/// <https://spec.commonmark.org/0.29/#example-468>
fn t468_tab() {
    init!("*foo\t_bar*\tbaz_\n");

    assert_eq!(
        // from spec: <p><em>foo _bar</em> baz_</p>
        [
            paragraph!(emph!(plain!("foo	_bar")), plain!("	baz_"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t_bar*\tbaz_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7339
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7339>
/// <https://spec.commonmark.org/0.29/#example-469>
fn t469() {
    init!("*foo __bar *baz bim__ bam*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar *baz bim</strong> bam</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar *baz bim")), plain!(" bam")))
        ].as_slice(),
        body(&mut StringData::new("*foo __bar *baz bim__ bam*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7339
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7339>
/// <https://spec.commonmark.org/0.29/#example-469>
fn t469_cr() {
    init!("*foo __bar *baz bim__ bam*\r");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar *baz bim</strong> bam</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar *baz bim")), plain!(" bam")))
        ].as_slice(),
        body(&mut StringData::new("*foo __bar *baz bim__ bam*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7339
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7339>
/// <https://spec.commonmark.org/0.29/#example-469>
fn t469_cr_nl() {
    init!("*foo __bar *baz bim__ bam*\r\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar *baz bim</strong> bam</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar *baz bim")), plain!(" bam")))
        ].as_slice(),
        body(&mut StringData::new("*foo __bar *baz bim__ bam*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7339
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7339>
/// <https://spec.commonmark.org/0.29/#example-469>
fn t469_no_nl() {
    init!("*foo __bar *baz bim__ bam*");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar *baz bim</strong> bam</em></p>
        [
            paragraph!(emph!(plain!("foo "), strong!(plain!("bar *baz bim")), plain!(" bam")))
        ].as_slice(),
        body(&mut StringData::new("*foo __bar *baz bim__ bam*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7339
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7339>
/// <https://spec.commonmark.org/0.29/#example-469>
fn t469_tab() {
    init!("*foo\t__bar\t*baz\tbim__\tbam*\n");

    assert_eq!(
        // from spec: <p><em>foo <strong>bar *baz bim</strong> bam</em></p>
        [
            paragraph!(emph!(plain!("foo	"), strong!(plain!("bar	*baz	bim")), plain!("	bam")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t__bar\t*baz\tbim__\tbam*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7348>
/// <https://spec.commonmark.org/0.29/#example-470>
fn t470() {
    init!("**foo **bar baz**\n");

    assert_eq!(
        // from spec: <p>**foo <strong>bar baz</strong></p>
        [
            paragraph!(plain!("**foo "), strong!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar baz**\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7348>
/// <https://spec.commonmark.org/0.29/#example-470>
fn t470_cr() {
    init!("**foo **bar baz**\r");

    assert_eq!(
        // from spec: <p>**foo <strong>bar baz</strong></p>
        [
            paragraph!(plain!("**foo "), strong!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar baz**\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7348>
/// <https://spec.commonmark.org/0.29/#example-470>
fn t470_cr_nl() {
    init!("**foo **bar baz**\r\n");

    assert_eq!(
        // from spec: <p>**foo <strong>bar baz</strong></p>
        [
            paragraph!(plain!("**foo "), strong!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar baz**\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7348>
/// <https://spec.commonmark.org/0.29/#example-470>
fn t470_no_nl() {
    init!("**foo **bar baz**");

    assert_eq!(
        // from spec: <p>**foo <strong>bar baz</strong></p>
        [
            paragraph!(plain!("**foo "), strong!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("**foo **bar baz**", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7348>
/// <https://spec.commonmark.org/0.29/#example-470>
fn t470_tab() {
    init!("**foo\t**bar\tbaz**\n");

    assert_eq!(
        // from spec: <p>**foo <strong>bar baz</strong></p>
        [
            paragraph!(plain!("**foo	"), strong!(plain!("bar	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**foo\t**bar\tbaz**\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7355>
/// <https://spec.commonmark.org/0.29/#example-471>
fn t471() {
    init!("*foo *bar baz*\n");

    assert_eq!(
        // from spec: <p>*foo <em>bar baz</em></p>
        [
            paragraph!(plain!("*foo "), emph!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar baz*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7355>
/// <https://spec.commonmark.org/0.29/#example-471>
fn t471_cr() {
    init!("*foo *bar baz*\r");

    assert_eq!(
        // from spec: <p>*foo <em>bar baz</em></p>
        [
            paragraph!(plain!("*foo "), emph!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar baz*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7355>
/// <https://spec.commonmark.org/0.29/#example-471>
fn t471_cr_nl() {
    init!("*foo *bar baz*\r\n");

    assert_eq!(
        // from spec: <p>*foo <em>bar baz</em></p>
        [
            paragraph!(plain!("*foo "), emph!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar baz*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7355>
/// <https://spec.commonmark.org/0.29/#example-471>
fn t471_no_nl() {
    init!("*foo *bar baz*");

    assert_eq!(
        // from spec: <p>*foo <em>bar baz</em></p>
        [
            paragraph!(plain!("*foo "), emph!(plain!("bar baz")))
        ].as_slice(),
        body(&mut StringData::new("*foo *bar baz*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7355>
/// <https://spec.commonmark.org/0.29/#example-471>
fn t471_tab() {
    init!("*foo\t*bar\tbaz*\n");

    assert_eq!(
        // from spec: <p>*foo <em>bar baz</em></p>
        [
            paragraph!(plain!("*foo	"), emph!(plain!("bar	baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t*bar\tbaz*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7364>
/// <https://spec.commonmark.org/0.29/#example-472>
fn t472() {
    init!("*[bar*](/url)\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">bar*</a></p>
        [
            paragraph!(plain!("*"), link!("/url", "", plain!("bar*")))
        ].as_slice(),
        body(&mut StringData::new("*[bar*](/url)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7364>
/// <https://spec.commonmark.org/0.29/#example-472>
fn t472_cr() {
    init!("*[bar*](/url)\r");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">bar*</a></p>
        [
            paragraph!(plain!("*"), link!("/url", "", plain!("bar*")))
        ].as_slice(),
        body(&mut StringData::new("*[bar*](/url)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7364>
/// <https://spec.commonmark.org/0.29/#example-472>
fn t472_cr_nl() {
    init!("*[bar*](/url)\r\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">bar*</a></p>
        [
            paragraph!(plain!("*"), link!("/url", "", plain!("bar*")))
        ].as_slice(),
        body(&mut StringData::new("*[bar*](/url)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7364>
/// <https://spec.commonmark.org/0.29/#example-472>
fn t472_no_nl() {
    init!("*[bar*](/url)");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">bar*</a></p>
        [
            paragraph!(plain!("*"), link!("/url", "", plain!("bar*")))
        ].as_slice(),
        body(&mut StringData::new("*[bar*](/url)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7371
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7371>
/// <https://spec.commonmark.org/0.29/#example-473>
fn t473() {
    init!("_foo [bar_](/url)\n");

    assert_eq!(
        // from spec: <p>_foo <a href=\"/url\">bar_</a></p>
        [
            paragraph!(plain!("_foo "), link!("/url", "", plain!("bar_")))
        ].as_slice(),
        body(&mut StringData::new("_foo [bar_](/url)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7371
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7371>
/// <https://spec.commonmark.org/0.29/#example-473>
fn t473_cr() {
    init!("_foo [bar_](/url)\r");

    assert_eq!(
        // from spec: <p>_foo <a href=\"/url\">bar_</a></p>
        [
            paragraph!(plain!("_foo "), link!("/url", "", plain!("bar_")))
        ].as_slice(),
        body(&mut StringData::new("_foo [bar_](/url)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7371
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7371>
/// <https://spec.commonmark.org/0.29/#example-473>
fn t473_cr_nl() {
    init!("_foo [bar_](/url)\r\n");

    assert_eq!(
        // from spec: <p>_foo <a href=\"/url\">bar_</a></p>
        [
            paragraph!(plain!("_foo "), link!("/url", "", plain!("bar_")))
        ].as_slice(),
        body(&mut StringData::new("_foo [bar_](/url)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7371
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7371>
/// <https://spec.commonmark.org/0.29/#example-473>
fn t473_no_nl() {
    init!("_foo [bar_](/url)");

    assert_eq!(
        // from spec: <p>_foo <a href=\"/url\">bar_</a></p>
        [
            paragraph!(plain!("_foo "), link!("/url", "", plain!("bar_")))
        ].as_slice(),
        body(&mut StringData::new("_foo [bar_](/url)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7371
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7371>
/// <https://spec.commonmark.org/0.29/#example-473>
fn t473_tab() {
    init!("_foo\t[bar_](/url)\n");

    assert_eq!(
        // from spec: <p>_foo <a href=\"/url\">bar_</a></p>
        [
            paragraph!(plain!("_foo	"), link!("/url", "", plain!("bar_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_foo\t[bar_](/url)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7378
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7378>
/// <https://spec.commonmark.org/0.29/#example-474>
fn t474() {
    init!("*<img src=\"foo\" title=\"*\"/>\n");

    assert_eq!(
        // from spec: <p>*<img src=\"foo\" title=\"*\"/></p>
        [
            paragraph!(plain!("*"), html!("<img src=\"foo\" title=\"*\"/>"))
        ].as_slice(),
        body(&mut StringData::new("*<img src=\"foo\" title=\"*\"/>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7378
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7378>
/// <https://spec.commonmark.org/0.29/#example-474>
fn t474_cr() {
    init!("*<img src=\"foo\" title=\"*\"/>\r");

    assert_eq!(
        // from spec: <p>*<img src=\"foo\" title=\"*\"/></p>
        [
            paragraph!(plain!("*"), html!("<img src=\"foo\" title=\"*\"/>"))
        ].as_slice(),
        body(&mut StringData::new("*<img src=\"foo\" title=\"*\"/>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7378
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7378>
/// <https://spec.commonmark.org/0.29/#example-474>
fn t474_cr_nl() {
    init!("*<img src=\"foo\" title=\"*\"/>\r\n");

    assert_eq!(
        // from spec: <p>*<img src=\"foo\" title=\"*\"/></p>
        [
            paragraph!(plain!("*"), html!("<img src=\"foo\" title=\"*\"/>"))
        ].as_slice(),
        body(&mut StringData::new("*<img src=\"foo\" title=\"*\"/>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7378
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7378>
/// <https://spec.commonmark.org/0.29/#example-474>
fn t474_no_nl() {
    init!("*<img src=\"foo\" title=\"*\"/>");

    assert_eq!(
        // from spec: <p>*<img src=\"foo\" title=\"*\"/></p>
        [
            paragraph!(plain!("*"), html!("<img src=\"foo\" title=\"*\"/>"))
        ].as_slice(),
        body(&mut StringData::new("*<img src=\"foo\" title=\"*\"/>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7378
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7378>
/// <https://spec.commonmark.org/0.29/#example-474>
fn t474_tab() {
    init!("*<img\tsrc=\"foo\"\ttitle=\"*\"/>\n");

    assert_eq!(
        // from spec: <p>*<img src=\"foo\" title=\"*\"/></p>
        [
            paragraph!(plain!("*"),	html!("<img	src=\"foo\"	title=\"*\"/>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*<img\tsrc=\"foo\"\ttitle=\"*\"/>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7385
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7385>
/// <https://spec.commonmark.org/0.29/#example-475>
fn t475() {
    init!("**<a href=\"**\">\n");

    assert_eq!(
        // from spec: <p>**<a href=\"**\"></p>
        [
            paragraph!(plain!("**"), html!("<a href=\"**\">"))
        ].as_slice(),
        body(&mut StringData::new("**<a href=\"**\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7385
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7385>
/// <https://spec.commonmark.org/0.29/#example-475>
fn t475_cr() {
    init!("**<a href=\"**\">\r");

    assert_eq!(
        // from spec: <p>**<a href=\"**\"></p>
        [
            paragraph!(plain!("**"), html!("<a href=\"**\">"))
        ].as_slice(),
        body(&mut StringData::new("**<a href=\"**\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7385
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7385>
/// <https://spec.commonmark.org/0.29/#example-475>
fn t475_cr_nl() {
    init!("**<a href=\"**\">\r\n");

    assert_eq!(
        // from spec: <p>**<a href=\"**\"></p>
        [
            paragraph!(plain!("**"), html!("<a href=\"**\">"))
        ].as_slice(),
        body(&mut StringData::new("**<a href=\"**\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7385
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7385>
/// <https://spec.commonmark.org/0.29/#example-475>
fn t475_no_nl() {
    init!("**<a href=\"**\">");

    assert_eq!(
        // from spec: <p>**<a href=\"**\"></p>
        [
            paragraph!(plain!("**"), html!("<a href=\"**\">"))
        ].as_slice(),
        body(&mut StringData::new("**<a href=\"**\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7385
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7385>
/// <https://spec.commonmark.org/0.29/#example-475>
fn t475_tab() {
    init!("**<a\thref=\"**\">\n");

    assert_eq!(
        // from spec: <p>**<a href=\"**\"></p>
        [
            paragraph!(plain!("**"),	html!("<a	href=\"**\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("**<a\thref=\"**\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7392>
/// <https://spec.commonmark.org/0.29/#example-476>
fn t476() {
    init!("__<a href=\"__\">\n");

    assert_eq!(
        // from spec: <p>__<a href=\"__\"></p>
        [
            paragraph!(plain!("__"), html!("<a href=\"__\">"))
        ].as_slice(),
        body(&mut StringData::new("__<a href=\"__\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7392>
/// <https://spec.commonmark.org/0.29/#example-476>
fn t476_cr() {
    init!("__<a href=\"__\">\r");

    assert_eq!(
        // from spec: <p>__<a href=\"__\"></p>
        [
            paragraph!(plain!("__"), html!("<a href=\"__\">"))
        ].as_slice(),
        body(&mut StringData::new("__<a href=\"__\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7392>
/// <https://spec.commonmark.org/0.29/#example-476>
fn t476_cr_nl() {
    init!("__<a href=\"__\">\r\n");

    assert_eq!(
        // from spec: <p>__<a href=\"__\"></p>
        [
            paragraph!(plain!("__"), html!("<a href=\"__\">"))
        ].as_slice(),
        body(&mut StringData::new("__<a href=\"__\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7392>
/// <https://spec.commonmark.org/0.29/#example-476>
fn t476_no_nl() {
    init!("__<a href=\"__\">");

    assert_eq!(
        // from spec: <p>__<a href=\"__\"></p>
        [
            paragraph!(plain!("__"), html!("<a href=\"__\">"))
        ].as_slice(),
        body(&mut StringData::new("__<a href=\"__\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7392
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7392>
/// <https://spec.commonmark.org/0.29/#example-476>
fn t476_tab() {
    init!("__<a\thref=\"__\">\n");

    assert_eq!(
        // from spec: <p>__<a href=\"__\"></p>
        [
            paragraph!(plain!("__"),	html!("<a	href=\"__\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("__<a\thref=\"__\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7399
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7399>
/// <https://spec.commonmark.org/0.29/#example-477>
fn t477() {
    init!("*a `*`*\n");

    assert_eq!(
        // from spec: <p><em>a <code>*</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("*")))
        ].as_slice(),
        body(&mut StringData::new("*a `*`*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7399
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7399>
/// <https://spec.commonmark.org/0.29/#example-477>
fn t477_cr() {
    init!("*a `*`*\r");

    assert_eq!(
        // from spec: <p><em>a <code>*</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("*")))
        ].as_slice(),
        body(&mut StringData::new("*a `*`*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7399
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7399>
/// <https://spec.commonmark.org/0.29/#example-477>
fn t477_cr_nl() {
    init!("*a `*`*\r\n");

    assert_eq!(
        // from spec: <p><em>a <code>*</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("*")))
        ].as_slice(),
        body(&mut StringData::new("*a `*`*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7399
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7399>
/// <https://spec.commonmark.org/0.29/#example-477>
fn t477_no_nl() {
    init!("*a `*`*");

    assert_eq!(
        // from spec: <p><em>a <code>*</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("*")))
        ].as_slice(),
        body(&mut StringData::new("*a `*`*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7399
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7399>
/// <https://spec.commonmark.org/0.29/#example-477>
fn t477_tab() {
    init!("*a\t`*`*\n");

    assert_eq!(
        // from spec: <p><em>a <code>*</code></em></p>
        [
            paragraph!(emph!(plain!("a	"), code!("*")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*a\t`*`*\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7406
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7406>
/// <https://spec.commonmark.org/0.29/#example-478>
fn t478() {
    init!("_a `_`_\n");

    assert_eq!(
        // from spec: <p><em>a <code>_</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("_")))
        ].as_slice(),
        body(&mut StringData::new("_a `_`_\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7406
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7406>
/// <https://spec.commonmark.org/0.29/#example-478>
fn t478_cr() {
    init!("_a `_`_\r");

    assert_eq!(
        // from spec: <p><em>a <code>_</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("_")))
        ].as_slice(),
        body(&mut StringData::new("_a `_`_\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7406
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7406>
/// <https://spec.commonmark.org/0.29/#example-478>
fn t478_cr_nl() {
    init!("_a `_`_\r\n");

    assert_eq!(
        // from spec: <p><em>a <code>_</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("_")))
        ].as_slice(),
        body(&mut StringData::new("_a `_`_\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7406
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7406>
/// <https://spec.commonmark.org/0.29/#example-478>
fn t478_no_nl() {
    init!("_a `_`_");

    assert_eq!(
        // from spec: <p><em>a <code>_</code></em></p>
        [
            paragraph!(emph!(plain!("a "), code!("_")))
        ].as_slice(),
        body(&mut StringData::new("_a `_`_", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7406
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7406>
/// <https://spec.commonmark.org/0.29/#example-478>
fn t478_tab() {
    init!("_a\t`_`_\n");

    assert_eq!(
        // from spec: <p><em>a <code>_</code></em></p>
        [
            paragraph!(emph!(plain!("a	"), code!("_")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("_a\t`_`_\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7413
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7413>
/// <https://spec.commonmark.org/0.29/#example-479>
fn t479() {
    init!("**a<http://foo.bar/?q=**>\n");

    assert_eq!(
        // from spec: <p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>
        [
            paragraph!(plain!("**a"), link!("http://foo.bar/?q=**", "", plain!("http://foo.bar/?q=**")))
        ].as_slice(),
        body(&mut StringData::new("**a<http://foo.bar/?q=**>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7413
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7413>
/// <https://spec.commonmark.org/0.29/#example-479>
fn t479_cr() {
    init!("**a<http://foo.bar/?q=**>\r");

    assert_eq!(
        // from spec: <p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>
        [
            paragraph!(plain!("**a"), link!("http://foo.bar/?q=**", "", plain!("http://foo.bar/?q=**")))
        ].as_slice(),
        body(&mut StringData::new("**a<http://foo.bar/?q=**>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7413
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7413>
/// <https://spec.commonmark.org/0.29/#example-479>
fn t479_cr_nl() {
    init!("**a<http://foo.bar/?q=**>\r\n");

    assert_eq!(
        // from spec: <p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>
        [
            paragraph!(plain!("**a"), link!("http://foo.bar/?q=**", "", plain!("http://foo.bar/?q=**")))
        ].as_slice(),
        body(&mut StringData::new("**a<http://foo.bar/?q=**>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7413
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7413>
/// <https://spec.commonmark.org/0.29/#example-479>
fn t479_no_nl() {
    init!("**a<http://foo.bar/?q=**>");

    assert_eq!(
        // from spec: <p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>
        [
            paragraph!(plain!("**a"), link!("http://foo.bar/?q=**", "", plain!("http://foo.bar/?q=**")))
        ].as_slice(),
        body(&mut StringData::new("**a<http://foo.bar/?q=**>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7420>
/// <https://spec.commonmark.org/0.29/#example-480>
fn t480() {
    init!("__a<http://foo.bar/?q=__>\n");

    assert_eq!(
        // from spec: <p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>
        [
            paragraph!(plain!("__a"), link!("http://foo.bar/?q=__", "", plain!("http://foo.bar/?q=__")))
        ].as_slice(),
        body(&mut StringData::new("__a<http://foo.bar/?q=__>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7420>
/// <https://spec.commonmark.org/0.29/#example-480>
fn t480_cr() {
    init!("__a<http://foo.bar/?q=__>\r");

    assert_eq!(
        // from spec: <p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>
        [
            paragraph!(plain!("__a"), link!("http://foo.bar/?q=__", "", plain!("http://foo.bar/?q=__")))
        ].as_slice(),
        body(&mut StringData::new("__a<http://foo.bar/?q=__>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7420>
/// <https://spec.commonmark.org/0.29/#example-480>
fn t480_cr_nl() {
    init!("__a<http://foo.bar/?q=__>\r\n");

    assert_eq!(
        // from spec: <p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>
        [
            paragraph!(plain!("__a"), link!("http://foo.bar/?q=__", "", plain!("http://foo.bar/?q=__")))
        ].as_slice(),
        body(&mut StringData::new("__a<http://foo.bar/?q=__>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7420
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7420>
/// <https://spec.commonmark.org/0.29/#example-480>
fn t480_no_nl() {
    init!("__a<http://foo.bar/?q=__>");

    assert_eq!(
        // from spec: <p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>
        [
            paragraph!(plain!("__a"), link!("http://foo.bar/?q=__", "", plain!("http://foo.bar/?q=__")))
        ].as_slice(),
        body(&mut StringData::new("__a<http://foo.bar/?q=__>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7503
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7503>
/// <https://spec.commonmark.org/0.29/#example-481>
fn t481() {
    init!("[link](/uri \"title\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri \"title\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7503
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7503>
/// <https://spec.commonmark.org/0.29/#example-481>
fn t481_cr() {
    init!("[link](/uri \"title\")\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri \"title\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7503
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7503>
/// <https://spec.commonmark.org/0.29/#example-481>
fn t481_cr_nl() {
    init!("[link](/uri \"title\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri \"title\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7503
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7503>
/// <https://spec.commonmark.org/0.29/#example-481>
fn t481_no_nl() {
    init!("[link](/uri \"title\")");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri \"title\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7503
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7503>
/// <https://spec.commonmark.org/0.29/#example-481>
fn t481_tab() {
    init!("[link](/uri\t\"title\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/uri\t\"title\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7512
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7512>
/// <https://spec.commonmark.org/0.29/#example-482>
fn t482() {
    init!("[link](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7512
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7512>
/// <https://spec.commonmark.org/0.29/#example-482>
fn t482_cr() {
    init!("[link](/uri)\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7512
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7512>
/// <https://spec.commonmark.org/0.29/#example-482>
fn t482_cr_nl() {
    init!("[link](/uri)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7512
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7512>
/// <https://spec.commonmark.org/0.29/#example-482>
fn t482_no_nl() {
    init!("[link](/uri)");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7521
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7521>
/// <https://spec.commonmark.org/0.29/#example-483>
fn t483() {
    init!("[link]()\n");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link]()\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7521
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7521>
/// <https://spec.commonmark.org/0.29/#example-483>
fn t483_cr() {
    init!("[link]()\r");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link]()\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7521
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7521>
/// <https://spec.commonmark.org/0.29/#example-483>
fn t483_cr_nl() {
    init!("[link]()\r\n");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link]()\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7521
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7521>
/// <https://spec.commonmark.org/0.29/#example-483>
fn t483_no_nl() {
    init!("[link]()");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link]()", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7528>
/// <https://spec.commonmark.org/0.29/#example-484>
fn t484() {
    init!("[link](<>)\n");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7528>
/// <https://spec.commonmark.org/0.29/#example-484>
fn t484_cr() {
    init!("[link](<>)\r");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7528>
/// <https://spec.commonmark.org/0.29/#example-484>
fn t484_cr_nl() {
    init!("[link](<>)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7528>
/// <https://spec.commonmark.org/0.29/#example-484>
fn t484_no_nl() {
    init!("[link](<>)");

    assert_eq!(
        // from spec: <p><a href=\"\">link</a></p>
        [
            paragraph!(link!("", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7537>
/// <https://spec.commonmark.org/0.29/#example-485>
fn t485() {
    init!("[link](/my uri)\n");

    assert_eq!(
        // from spec: <p>[link](/my uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/my uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link](/my uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7537>
/// <https://spec.commonmark.org/0.29/#example-485>
fn t485_cr() {
    init!("[link](/my uri)\r");

    assert_eq!(
        // from spec: <p>[link](/my uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/my uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link](/my uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7537>
/// <https://spec.commonmark.org/0.29/#example-485>
fn t485_cr_nl() {
    init!("[link](/my uri)\r\n");

    assert_eq!(
        // from spec: <p>[link](/my uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/my uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link](/my uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7537>
/// <https://spec.commonmark.org/0.29/#example-485>
fn t485_no_nl() {
    init!("[link](/my uri)");

    assert_eq!(
        // from spec: <p>[link](/my uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/my uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link](/my uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7537>
/// <https://spec.commonmark.org/0.29/#example-485>
fn t485_tab() {
    init!("[link](/my\turi)\n");

    assert_eq!(
        // from spec: <p>[link](/my uri)</p>
        [
            paragraph!(linkref!(plain!("link")),	plain!("(/my	uri)"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/my\turi)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7543>
/// <https://spec.commonmark.org/0.29/#example-486>
fn t486() {
    init!("[link](</my uri>)\n");

    assert_eq!(
        // from spec: <p><a href=\"/my%20uri\">link</a></p>
        [
            paragraph!(link!("/my uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](</my uri>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7543>
/// <https://spec.commonmark.org/0.29/#example-486>
fn t486_cr() {
    init!("[link](</my uri>)\r");

    assert_eq!(
        // from spec: <p><a href=\"/my%20uri\">link</a></p>
        [
            paragraph!(link!("/my uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](</my uri>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7543>
/// <https://spec.commonmark.org/0.29/#example-486>
fn t486_cr_nl() {
    init!("[link](</my uri>)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/my%20uri\">link</a></p>
        [
            paragraph!(link!("/my uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](</my uri>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7543>
/// <https://spec.commonmark.org/0.29/#example-486>
fn t486_no_nl() {
    init!("[link](</my uri>)");

    assert_eq!(
        // from spec: <p><a href=\"/my%20uri\">link</a></p>
        [
            paragraph!(link!("/my uri", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](</my uri>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7543
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7543>
/// <https://spec.commonmark.org/0.29/#example-486>
fn t486_tab() {
    init!("[link](</my\turi>)\n");

    assert_eq!(
        // from spec: <p><a href=\"/my%20uri\">link</a></p>
        [
            paragraph!(link!("/my\turi", "", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](</my\turi>)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7552>
/// <https://spec.commonmark.org/0.29/#example-487>
fn t487() {
    init!("[link](foo\nbar)\n");

    assert_eq!(
        // from spec: <p>[link](foo\nbar)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(foo"), SoftBreak, plain!("bar)"))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\nbar)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7552>
/// <https://spec.commonmark.org/0.29/#example-487>
fn t487_cr() {
    init!("[link](foo\rbar)\r");

    assert_eq!(
        // from spec: <p>[link](foo\nbar)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(foo"), SoftBreak, plain!("bar)"))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\rbar)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7552>
/// <https://spec.commonmark.org/0.29/#example-487>
fn t487_cr_nl() {
    init!("[link](foo\r\nbar)\r\n");

    assert_eq!(
        // from spec: <p>[link](foo\nbar)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(foo"), SoftBreak, plain!("bar)"))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\r\nbar)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7552
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7552>
/// <https://spec.commonmark.org/0.29/#example-487>
fn t487_no_nl() {
    init!("[link](foo\nbar)");

    assert_eq!(
        // from spec: <p>[link](foo\nbar)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(foo"), SoftBreak, plain!("bar)"))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\nbar)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7560
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7560>
/// <https://spec.commonmark.org/0.29/#example-488>
fn t488() {
    init!("[link](<foo\nbar>)\n");

    assert_eq!(
        // from spec: <p>[link](<foo\nbar>)</p>
        [
            paragraph!(
              linkref!(plain!("link")), plain!("("), html!("<foo\nbar>"), plain!(")")
            )
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\nbar>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7560
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7560>
/// <https://spec.commonmark.org/0.29/#example-488>
fn t488_cr() {
    init!("[link](<foo\rbar>)\r");

    assert_eq!(
        // from spec: <p>[link](<foo\nbar>)</p>
        [
            paragraph!(
              linkref!(plain!("link")), plain!("("), html!("<foo\rbar>"), plain!(")")
            )
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\rbar>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7560
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7560>
/// <https://spec.commonmark.org/0.29/#example-488>
fn t488_cr_nl() {
    init!("[link](<foo\r\nbar>)\r\n");

    assert_eq!(
        // from spec: <p>[link](<foo\nbar>)</p>
        [
            paragraph!(
              linkref!(plain!("link")), plain!("("), html!("<foo\r\nbar>"), plain!(")")
            )
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\r\nbar>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7560
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7560>
/// <https://spec.commonmark.org/0.29/#example-488>
fn t488_no_nl() {
    init!("[link](<foo\nbar>)");

    assert_eq!(
        // from spec: <p>[link](<foo\nbar>)</p>
        [
            paragraph!(
              linkref!(plain!("link")), plain!("("), html!("<foo\nbar>"), plain!(")")
            )
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\nbar>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7571
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7571>
/// <https://spec.commonmark.org/0.29/#example-489>
fn t489() {
    init!("[a](<b)c>)\n");

    assert_eq!(
        // from spec: <p><a href=\"b)c\">a</a></p>
        [
            paragraph!(link!("b)c", "", plain!("a")))
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7571
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7571>
/// <https://spec.commonmark.org/0.29/#example-489>
fn t489_cr() {
    init!("[a](<b)c>)\r");

    assert_eq!(
        // from spec: <p><a href=\"b)c\">a</a></p>
        [
            paragraph!(link!("b)c", "", plain!("a")))
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7571
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7571>
/// <https://spec.commonmark.org/0.29/#example-489>
fn t489_cr_nl() {
    init!("[a](<b)c>)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"b)c\">a</a></p>
        [
            paragraph!(link!("b)c", "", plain!("a")))
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7571
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7571>
/// <https://spec.commonmark.org/0.29/#example-489>
fn t489_no_nl() {
    init!("[a](<b)c>)");

    assert_eq!(
        // from spec: <p><a href=\"b)c\">a</a></p>
        [
            paragraph!(link!("b)c", "", plain!("a")))
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7579>
/// <https://spec.commonmark.org/0.29/#example-490>
fn t490() {
    init!("[link](<foo\\>)\n");

    assert_eq!(
        // from spec: <p>[link](&lt;foo&gt;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(<foo>)"))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\\>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7579>
/// <https://spec.commonmark.org/0.29/#example-490>
fn t490_cr() {
    init!("[link](<foo\\>)\r");

    assert_eq!(
        // from spec: <p>[link](&lt;foo&gt;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(<foo>)"))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\\>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7579>
/// <https://spec.commonmark.org/0.29/#example-490>
fn t490_cr_nl() {
    init!("[link](<foo\\>)\r\n");

    assert_eq!(
        // from spec: <p>[link](&lt;foo&gt;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(<foo>)"))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\\>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7579
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7579>
/// <https://spec.commonmark.org/0.29/#example-490>
fn t490_no_nl() {
    init!("[link](<foo\\>)");

    assert_eq!(
        // from spec: <p>[link](&lt;foo&gt;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(<foo>)"))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo\\>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7588>
/// <https://spec.commonmark.org/0.29/#example-491>
fn t491() {
    init!("[a](<b)c\n[a](<b)c>\n[a](<b>c)\n");

    assert_eq!(
        // from spec: <p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>
        [
            paragraph!(
              linkref!(plain!("a")), plain!("(<b)c"), SoftBreak,
              linkref!(plain!("a")), plain!("(<b)c>"), SoftBreak,
              linkref!(plain!("a")), plain!("("), html!("<b>"), plain!("c)")
            )
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c\n[a](<b)c>\n[a](<b>c)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7588>
/// <https://spec.commonmark.org/0.29/#example-491>
fn t491_cr() {
    init!("[a](<b)c\r[a](<b)c>\r[a](<b>c)\r");

    assert_eq!(
        // from spec: <p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>
        [
            paragraph!(
              linkref!(plain!("a")), plain!("(<b)c"), SoftBreak,
              linkref!(plain!("a")), plain!("(<b)c>"), SoftBreak,
              linkref!(plain!("a")), plain!("("), html!("<b>"), plain!("c)")
            )
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c\r[a](<b)c>\r[a](<b>c)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7588>
/// <https://spec.commonmark.org/0.29/#example-491>
fn t491_cr_nl() {
    init!("[a](<b)c\r\n[a](<b)c>\r\n[a](<b>c)\r\n");

    assert_eq!(
        // from spec: <p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>
        [
            paragraph!(
              linkref!(plain!("a")), plain!("(<b)c"), SoftBreak,
              linkref!(plain!("a")), plain!("(<b)c>"), SoftBreak,
              linkref!(plain!("a")), plain!("("), html!("<b>"), plain!("c)")
            )
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c\r\n[a](<b)c>\r\n[a](<b>c)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7588
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7588>
/// <https://spec.commonmark.org/0.29/#example-491>
fn t491_no_nl() {
    init!("[a](<b)c\n[a](<b)c>\n[a](<b>c)");

    assert_eq!(
        // from spec: <p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>
        [
            paragraph!(
              linkref!(plain!("a")), plain!("(<b)c"), SoftBreak,
              linkref!(plain!("a")), plain!("(<b)c>"), SoftBreak,
              linkref!(plain!("a")), plain!("("), html!("<b>"), plain!("c)")
            )
        ].as_slice(),
        body(&mut StringData::new("[a](<b)c\n[a](<b)c>\n[a](<b>c)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7600
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7600>
/// <https://spec.commonmark.org/0.29/#example-492>
fn t492() {
    init!("[link](\\(foo\\))\n");

    assert_eq!(
        // from spec: <p><a href=\"(foo)\">link</a></p>
        [
            paragraph!(link!("(foo)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\\(foo\\))\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7600
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7600>
/// <https://spec.commonmark.org/0.29/#example-492>
fn t492_cr() {
    init!("[link](\\(foo\\))\r");

    assert_eq!(
        // from spec: <p><a href=\"(foo)\">link</a></p>
        [
            paragraph!(link!("(foo)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\\(foo\\))\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7600
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7600>
/// <https://spec.commonmark.org/0.29/#example-492>
fn t492_cr_nl() {
    init!("[link](\\(foo\\))\r\n");

    assert_eq!(
        // from spec: <p><a href=\"(foo)\">link</a></p>
        [
            paragraph!(link!("(foo)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\\(foo\\))\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7600
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7600>
/// <https://spec.commonmark.org/0.29/#example-492>
fn t492_no_nl() {
    init!("[link](\\(foo\\))");

    assert_eq!(
        // from spec: <p><a href=\"(foo)\">link</a></p>
        [
            paragraph!(link!("(foo)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\\(foo\\))", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7609>
/// <https://spec.commonmark.org/0.29/#example-493>
fn t493() {
    init!("[link](foo(and(bar)))\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar))\">link</a></p>
        [
            paragraph!(link!("foo(and(bar))", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo(and(bar)))\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7609>
/// <https://spec.commonmark.org/0.29/#example-493>
fn t493_cr() {
    init!("[link](foo(and(bar)))\r");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar))\">link</a></p>
        [
            paragraph!(link!("foo(and(bar))", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo(and(bar)))\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7609>
/// <https://spec.commonmark.org/0.29/#example-493>
fn t493_cr_nl() {
    init!("[link](foo(and(bar)))\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar))\">link</a></p>
        [
            paragraph!(link!("foo(and(bar))", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo(and(bar)))\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7609
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7609>
/// <https://spec.commonmark.org/0.29/#example-493>
fn t493_no_nl() {
    init!("[link](foo(and(bar)))");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar))\">link</a></p>
        [
            paragraph!(link!("foo(and(bar))", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo(and(bar)))", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7618>
/// <https://spec.commonmark.org/0.29/#example-494>
fn t494() {
    init!("[link](foo\\(and\\(bar\\))\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\(and\\(bar\\))\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7618>
/// <https://spec.commonmark.org/0.29/#example-494>
fn t494_cr() {
    init!("[link](foo\\(and\\(bar\\))\r");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\(and\\(bar\\))\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7618>
/// <https://spec.commonmark.org/0.29/#example-494>
fn t494_cr_nl() {
    init!("[link](foo\\(and\\(bar\\))\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\(and\\(bar\\))\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7618
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7618>
/// <https://spec.commonmark.org/0.29/#example-494>
fn t494_no_nl() {
    init!("[link](foo\\(and\\(bar\\))");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\(and\\(bar\\))", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7625>
/// <https://spec.commonmark.org/0.29/#example-495>
fn t495() {
    init!("[link](<foo(and(bar)>)\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo(and(bar)>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7625>
/// <https://spec.commonmark.org/0.29/#example-495>
fn t495_cr() {
    init!("[link](<foo(and(bar)>)\r");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo(and(bar)>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7625>
/// <https://spec.commonmark.org/0.29/#example-495>
fn t495_cr_nl() {
    init!("[link](<foo(and(bar)>)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo(and(bar)>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7625
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7625>
/// <https://spec.commonmark.org/0.29/#example-495>
fn t495_no_nl() {
    init!("[link](<foo(and(bar)>)");

    assert_eq!(
        // from spec: <p><a href=\"foo(and(bar)\">link</a></p>
        [
            paragraph!(link!("foo(and(bar)", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](<foo(and(bar)>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7635
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7635>
/// <https://spec.commonmark.org/0.29/#example-496>
fn t496() {
    init!("[link](foo\\)\\:)\n");

    assert_eq!(
        // from spec: <p><a href=\"foo):\">link</a></p>
        [
            paragraph!(link!("foo):", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\)\\:)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7635
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7635>
/// <https://spec.commonmark.org/0.29/#example-496>
fn t496_cr() {
    init!("[link](foo\\)\\:)\r");

    assert_eq!(
        // from spec: <p><a href=\"foo):\">link</a></p>
        [
            paragraph!(link!("foo):", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\)\\:)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7635
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7635>
/// <https://spec.commonmark.org/0.29/#example-496>
fn t496_cr_nl() {
    init!("[link](foo\\)\\:)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo):\">link</a></p>
        [
            paragraph!(link!("foo):", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\)\\:)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7635
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7635>
/// <https://spec.commonmark.org/0.29/#example-496>
fn t496_no_nl() {
    init!("[link](foo\\)\\:)");

    assert_eq!(
        // from spec: <p><a href=\"foo):\">link</a></p>
        [
            paragraph!(link!("foo):", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\)\\:)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7644
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7644>
/// <https://spec.commonmark.org/0.29/#example-497>
fn t497() {
    init!("[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n");

    assert_eq!(
        // from spec: <p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>
        [
            paragraph!(link!("#fragment", "", plain!("link"))), paragraph!(link!("http://example.com#fragment", "", plain!("link"))), paragraph!(link!("http://example.com?foo=3#frag", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7644
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7644>
/// <https://spec.commonmark.org/0.29/#example-497>
fn t497_cr() {
    init!("[link](#fragment)\r\r[link](http://example.com#fragment)\r\r[link](http://example.com?foo=3#frag)\r");

    assert_eq!(
        // from spec: <p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>
        [
            paragraph!(link!("#fragment", "", plain!("link"))), paragraph!(link!("http://example.com#fragment", "", plain!("link"))), paragraph!(link!("http://example.com?foo=3#frag", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](#fragment)\r\r[link](http://example.com#fragment)\r\r[link](http://example.com?foo=3#frag)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7644
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7644>
/// <https://spec.commonmark.org/0.29/#example-497>
fn t497_cr_nl() {
    init!("[link](#fragment)\r\n\r\n[link](http://example.com#fragment)\r\n\r\n[link](http://example.com?foo=3#frag)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>
        [
            paragraph!(link!("#fragment", "", plain!("link"))), paragraph!(link!("http://example.com#fragment", "", plain!("link"))), paragraph!(link!("http://example.com?foo=3#frag", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](#fragment)\r\n\r\n[link](http://example.com#fragment)\r\n\r\n[link](http://example.com?foo=3#frag)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7644
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7644>
/// <https://spec.commonmark.org/0.29/#example-497>
fn t497_no_nl() {
    init!("[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)");

    assert_eq!(
        // from spec: <p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>
        [
            paragraph!(link!("#fragment", "", plain!("link"))), paragraph!(link!("http://example.com#fragment", "", plain!("link"))), paragraph!(link!("http://example.com?foo=3#frag", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7660>
/// <https://spec.commonmark.org/0.29/#example-498>
fn t498() {
    init!("[link](foo\\bar)\n");

    assert_eq!(
        // from spec: <p><a href=\"foo%5Cbar\">link</a></p>
        [
            paragraph!(link!("foo\\bar", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\bar)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7660>
/// <https://spec.commonmark.org/0.29/#example-498>
fn t498_cr() {
    init!("[link](foo\\bar)\r");

    assert_eq!(
        // from spec: <p><a href=\"foo%5Cbar\">link</a></p>
        [
            paragraph!(link!("foo\\bar", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\bar)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7660>
/// <https://spec.commonmark.org/0.29/#example-498>
fn t498_cr_nl() {
    init!("[link](foo\\bar)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo%5Cbar\">link</a></p>
        [
            paragraph!(link!("foo\\bar", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\bar)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7660
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7660>
/// <https://spec.commonmark.org/0.29/#example-498>
fn t498_no_nl() {
    init!("[link](foo\\bar)");

    assert_eq!(
        // from spec: <p><a href=\"foo%5Cbar\">link</a></p>
        [
            paragraph!(link!("foo\\bar", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo\\bar)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7676>
/// <https://spec.commonmark.org/0.29/#example-499>
fn t499() {
    init!("[link](foo%20b&auml;)\n");

    assert_eq!(
        // from spec: <p><a href=\"foo%20b%C3%A4\">link</a></p>
        [
            paragraph!(link!("foo%20b\u{e4}", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo%20b&auml;)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7676>
/// <https://spec.commonmark.org/0.29/#example-499>
fn t499_cr() {
    init!("[link](foo%20b&auml;)\r");

    assert_eq!(
        // from spec: <p><a href=\"foo%20b%C3%A4\">link</a></p>
        [
            paragraph!(link!("foo%20b\u{e4}", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo%20b&auml;)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7676>
/// <https://spec.commonmark.org/0.29/#example-499>
fn t499_cr_nl() {
    init!("[link](foo%20b&auml;)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo%20b%C3%A4\">link</a></p>
        [
            paragraph!(link!("foo%20b\u{e4}", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo%20b&auml;)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7676>
/// <https://spec.commonmark.org/0.29/#example-499>
fn t499_no_nl() {
    init!("[link](foo%20b&auml;)");

    assert_eq!(
        // from spec: <p><a href=\"foo%20b%C3%A4\">link</a></p>
        [
            paragraph!(link!("foo%20b\u{e4}", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](foo%20b&auml;)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7687
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7687>
/// <https://spec.commonmark.org/0.29/#example-500>
fn t500() {
    init!("[link](\"title\")\n");

    assert_eq!(
        // from spec: <p><a href=\"%22title%22\">link</a></p>
        [
            paragraph!(link!("\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\"title\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7687
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7687>
/// <https://spec.commonmark.org/0.29/#example-500>
fn t500_cr() {
    init!("[link](\"title\")\r");

    assert_eq!(
        // from spec: <p><a href=\"%22title%22\">link</a></p>
        [
            paragraph!(link!("\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\"title\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7687
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7687>
/// <https://spec.commonmark.org/0.29/#example-500>
fn t500_cr_nl() {
    init!("[link](\"title\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"%22title%22\">link</a></p>
        [
            paragraph!(link!("\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\"title\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7687
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7687>
/// <https://spec.commonmark.org/0.29/#example-500>
fn t500_no_nl() {
    init!("[link](\"title\")");

    assert_eq!(
        // from spec: <p><a href=\"%22title%22\">link</a></p>
        [
            paragraph!(link!("\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](\"title\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7696
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7696>
/// <https://spec.commonmark.org/0.29/#example-501>
fn t501() {
    init!("[link](/url \"title\")\n[link](/url \'title\')\n[link](/url (title))\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title\")\n[link](/url \'title\')\n[link](/url (title))\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7696
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7696>
/// <https://spec.commonmark.org/0.29/#example-501>
fn t501_cr() {
    init!("[link](/url \"title\")\r[link](/url \'title\')\r[link](/url (title))\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title\")\r[link](/url \'title\')\r[link](/url (title))\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7696
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7696>
/// <https://spec.commonmark.org/0.29/#example-501>
fn t501_cr_nl() {
    init!("[link](/url \"title\")\r\n[link](/url \'title\')\r\n[link](/url (title))\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title\")\r\n[link](/url \'title\')\r\n[link](/url (title))\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7696
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7696>
/// <https://spec.commonmark.org/0.29/#example-501>
fn t501_no_nl() {
    init!("[link](/url \"title\")\n[link](/url \'title\')\n[link](/url (title))");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title\")\n[link](/url \'title\')\n[link](/url (title))", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7696
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7696>
/// <https://spec.commonmark.org/0.29/#example-501>
fn t501_tab() {
    init!("[link](/url\t\"title\")\n[link](/url\t\'title\')\n[link](/url\t(title))\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")), SoftBreak, link!("/url", "title", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/url\t\"title\")\n[link](/url\t\'title\')\n[link](/url\t(title))\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7710
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7710>
/// <https://spec.commonmark.org/0.29/#example-502>
fn t502() {
    init!("[link](/url \"title \\\"&quot;\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>
        [
            paragraph!(link!("/url", "title \"\"", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \\\"&quot;\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7710
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7710>
/// <https://spec.commonmark.org/0.29/#example-502>
fn t502_cr() {
    init!("[link](/url \"title \\\"&quot;\")\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>
        [
            paragraph!(link!("/url", "title \"\"", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \\\"&quot;\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7710
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7710>
/// <https://spec.commonmark.org/0.29/#example-502>
fn t502_cr_nl() {
    init!("[link](/url \"title \\\"&quot;\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>
        [
            paragraph!(link!("/url", "title \"\"", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \\\"&quot;\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7710
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7710>
/// <https://spec.commonmark.org/0.29/#example-502>
fn t502_no_nl() {
    init!("[link](/url \"title \\\"&quot;\")");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>
        [
            paragraph!(link!("/url", "title \"\"", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \\\"&quot;\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7710
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7710>
/// <https://spec.commonmark.org/0.29/#example-502>
fn t502_tab() {
    init!("[link](/url\t\"title\t\\\"&quot;\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>
        [
            paragraph!(link!("/url", "title\t\"\"", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/url\t\"title\t\\\"&quot;\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7720>
/// <https://spec.commonmark.org/0.29/#example-503>
fn t503() {
    init!("[link](/url\u{a0}\"title\")\n");

    assert_eq!(
        // from spec: <p><a href=\"/url%C2%A0%22title%22\">link</a></p>
        [
            paragraph!(link!("/url\u{a0}\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url\u{a0}\"title\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7720>
/// <https://spec.commonmark.org/0.29/#example-503>
fn t503_cr() {
    init!("[link](/url\u{a0}\"title\")\r");

    assert_eq!(
        // from spec: <p><a href=\"/url%C2%A0%22title%22\">link</a></p>
        [
            paragraph!(link!("/url\u{a0}\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url\u{a0}\"title\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7720>
/// <https://spec.commonmark.org/0.29/#example-503>
fn t503_cr_nl() {
    init!("[link](/url\u{a0}\"title\")\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url%C2%A0%22title%22\">link</a></p>
        [
            paragraph!(link!("/url\u{a0}\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url\u{a0}\"title\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7720
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7720>
/// <https://spec.commonmark.org/0.29/#example-503>
fn t503_no_nl() {
    init!("[link](/url\u{a0}\"title\")");

    assert_eq!(
        // from spec: <p><a href=\"/url%C2%A0%22title%22\">link</a></p>
        [
            paragraph!(link!("/url\u{a0}\"title\"", "", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url\u{a0}\"title\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7729
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7729>
/// <https://spec.commonmark.org/0.29/#example-504>
fn t504() {
    init!("[link](/url \"title \"and\" title\")\n");

    assert_eq!(
        // from spec: <p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/url \"title \"and\" title\")"))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \"and\" title\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7729
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7729>
/// <https://spec.commonmark.org/0.29/#example-504>
fn t504_cr() {
    init!("[link](/url \"title \"and\" title\")\r");

    assert_eq!(
        // from spec: <p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/url \"title \"and\" title\")"))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \"and\" title\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7729
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7729>
/// <https://spec.commonmark.org/0.29/#example-504>
fn t504_cr_nl() {
    init!("[link](/url \"title \"and\" title\")\r\n");

    assert_eq!(
        // from spec: <p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/url \"title \"and\" title\")"))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \"and\" title\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7729
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7729>
/// <https://spec.commonmark.org/0.29/#example-504>
fn t504_no_nl() {
    init!("[link](/url \"title \"and\" title\")");

    assert_eq!(
        // from spec: <p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!("(/url \"title \"and\" title\")"))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \"title \"and\" title\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7729
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7729>
/// <https://spec.commonmark.org/0.29/#example-504>
fn t504_tab() {
    init!("[link](/url\t\"title\t\"and\"\ttitle\")\n");

    assert_eq!(
        // from spec: <p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
        [
            paragraph!(linkref!(plain!("link")),	plain!("(/url	\"title	\"and\"	title\")"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/url\t\"title\t\"and\"\ttitle\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7738
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7738>
/// <https://spec.commonmark.org/0.29/#example-505>
fn t505() {
    init!("[link](/url \'title \"and\" title\')\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>
        [
            paragraph!(link!("/url", "title \"and\" title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \'title \"and\" title\')\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7738
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7738>
/// <https://spec.commonmark.org/0.29/#example-505>
fn t505_cr() {
    init!("[link](/url \'title \"and\" title\')\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>
        [
            paragraph!(link!("/url", "title \"and\" title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \'title \"and\" title\')\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7738
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7738>
/// <https://spec.commonmark.org/0.29/#example-505>
fn t505_cr_nl() {
    init!("[link](/url \'title \"and\" title\')\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>
        [
            paragraph!(link!("/url", "title \"and\" title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \'title \"and\" title\')\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7738
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7738>
/// <https://spec.commonmark.org/0.29/#example-505>
fn t505_no_nl() {
    init!("[link](/url \'title \"and\" title\')");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>
        [
            paragraph!(link!("/url", "title \"and\" title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](/url \'title \"and\" title\')", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7738
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7738>
/// <https://spec.commonmark.org/0.29/#example-505>
fn t505_tab() {
    init!("[link](/url\t\'title\t\"and\"\ttitle\')\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>
        [
            paragraph!(link!("/url", "title\t\"and\"\ttitle", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](/url\t\'title\t\"and\"\ttitle\')\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7762
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7762>
/// <https://spec.commonmark.org/0.29/#example-506>
fn t506() {
    init!("[link](   /uri\n  \"title\"  )\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](   /uri\n  \"title\"  )\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7762
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7762>
/// <https://spec.commonmark.org/0.29/#example-506>
fn t506_cr() {
    init!("[link](   /uri\r  \"title\"  )\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](   /uri\r  \"title\"  )\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7762
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7762>
/// <https://spec.commonmark.org/0.29/#example-506>
fn t506_cr_nl() {
    init!("[link](   /uri\r\n  \"title\"  )\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](   /uri\r\n  \"title\"  )\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7762
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7762>
/// <https://spec.commonmark.org/0.29/#example-506>
fn t506_no_nl() {
    init!("[link](   /uri\n  \"title\"  )");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        body(&mut StringData::new("[link](   /uri\n  \"title\"  )", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7762
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7762>
/// <https://spec.commonmark.org/0.29/#example-506>
fn t506_tab() {
    init!("[link](\t\t\t/uri\n  \"title\"\t\t)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\" title=\"title\">link</a></p>
        [
            paragraph!(link!("/uri", "title", plain!("link")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link](\t\t\t/uri\n  \"title\"\t\t)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7773
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7773>
/// <https://spec.commonmark.org/0.29/#example-507>
fn t507() {
    init!("[link] (/uri)\n");

    assert_eq!(
        // from spec: <p>[link] (/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" (/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] (/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7773
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7773>
/// <https://spec.commonmark.org/0.29/#example-507>
fn t507_cr() {
    init!("[link] (/uri)\r");

    assert_eq!(
        // from spec: <p>[link] (/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" (/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] (/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7773
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7773>
/// <https://spec.commonmark.org/0.29/#example-507>
fn t507_cr_nl() {
    init!("[link] (/uri)\r\n");

    assert_eq!(
        // from spec: <p>[link] (/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" (/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] (/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7773
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7773>
/// <https://spec.commonmark.org/0.29/#example-507>
fn t507_no_nl() {
    init!("[link] (/uri)");

    assert_eq!(
        // from spec: <p>[link] (/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" (/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] (/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7773
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7773>
/// <https://spec.commonmark.org/0.29/#example-507>
fn t507_tab() {
    init!("[link]\t(/uri)\n");

    assert_eq!(
        // from spec: <p>[link] (/uri)</p>
        [
            paragraph!(linkref!(plain!("link")),	plain!("	(/uri)"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link]\t(/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7783
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7783>
/// <https://spec.commonmark.org/0.29/#example-508>
fn t508() {
    init!("[link [foo [bar]]](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(link!(
              "/uri", "",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            ))
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7783
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7783>
/// <https://spec.commonmark.org/0.29/#example-508>
fn t508_cr() {
    init!("[link [foo [bar]]](/uri)\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(link!(
              "/uri", "",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            ))
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7783
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7783>
/// <https://spec.commonmark.org/0.29/#example-508>
fn t508_cr_nl() {
    init!("[link [foo [bar]]](/uri)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(link!(
              "/uri", "",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            ))
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7783
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7783>
/// <https://spec.commonmark.org/0.29/#example-508>
fn t508_no_nl() {
    init!("[link [foo [bar]]](/uri)");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(link!(
              "/uri", "",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            ))
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7783
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7783>
/// <https://spec.commonmark.org/0.29/#example-508>
fn t508_tab() {
    init!("[link\t[foo\t[bar]]](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(link!(
            		"/uri",	"",
            		plain!("link	"),
            		linkref!(plain!("foo	"),	linkref!(plain!("bar")))
            ))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t[foo\t[bar]]](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7790
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7790>
/// <https://spec.commonmark.org/0.29/#example-509>
fn t509() {
    init!("[link] bar](/uri)\n");

    assert_eq!(
        // from spec: <p>[link] bar](/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" bar](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] bar](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7790
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7790>
/// <https://spec.commonmark.org/0.29/#example-509>
fn t509_cr() {
    init!("[link] bar](/uri)\r");

    assert_eq!(
        // from spec: <p>[link] bar](/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" bar](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] bar](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7790
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7790>
/// <https://spec.commonmark.org/0.29/#example-509>
fn t509_cr_nl() {
    init!("[link] bar](/uri)\r\n");

    assert_eq!(
        // from spec: <p>[link] bar](/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" bar](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] bar](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7790
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7790>
/// <https://spec.commonmark.org/0.29/#example-509>
fn t509_no_nl() {
    init!("[link] bar](/uri)");

    assert_eq!(
        // from spec: <p>[link] bar](/uri)</p>
        [
            paragraph!(linkref!(plain!("link")), plain!(" bar](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[link] bar](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7790
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7790>
/// <https://spec.commonmark.org/0.29/#example-509>
fn t509_tab() {
    init!("[link]\tbar](/uri)\n");

    assert_eq!(
        // from spec: <p>[link] bar](/uri)</p>
        [
            paragraph!(linkref!(plain!("link")),	plain!("	bar](/uri)"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link]\tbar](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7797
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7797>
/// <https://spec.commonmark.org/0.29/#example-510>
fn t510() {
    init!("[link [bar](/uri)\n");

    assert_eq!(
        // from spec: <p>[link <a href=\"/uri\">bar</a></p>
        [
            paragraph!(plain!("[link "), link!("/uri", "", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[link [bar](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7797
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7797>
/// <https://spec.commonmark.org/0.29/#example-510>
fn t510_cr() {
    init!("[link [bar](/uri)\r");

    assert_eq!(
        // from spec: <p>[link <a href=\"/uri\">bar</a></p>
        [
            paragraph!(plain!("[link "), link!("/uri", "", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[link [bar](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7797
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7797>
/// <https://spec.commonmark.org/0.29/#example-510>
fn t510_cr_nl() {
    init!("[link [bar](/uri)\r\n");

    assert_eq!(
        // from spec: <p>[link <a href=\"/uri\">bar</a></p>
        [
            paragraph!(plain!("[link "), link!("/uri", "", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[link [bar](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7797
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7797>
/// <https://spec.commonmark.org/0.29/#example-510>
fn t510_no_nl() {
    init!("[link [bar](/uri)");

    assert_eq!(
        // from spec: <p>[link <a href=\"/uri\">bar</a></p>
        [
            paragraph!(plain!("[link "), link!("/uri", "", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[link [bar](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7797
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7797>
/// <https://spec.commonmark.org/0.29/#example-510>
fn t510_tab() {
    init!("[link\t[bar](/uri)\n");

    assert_eq!(
        // from spec: <p>[link <a href=\"/uri\">bar</a></p>
        [
            paragraph!(plain!("[link	"), link!("/uri", "", plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t[bar](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7804>
/// <https://spec.commonmark.org/0.29/#example-511>
fn t511() {
    init!("[link \\[bar](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link [bar")))
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7804>
/// <https://spec.commonmark.org/0.29/#example-511>
fn t511_cr() {
    init!("[link \\[bar](/uri)\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link [bar")))
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7804>
/// <https://spec.commonmark.org/0.29/#example-511>
fn t511_cr_nl() {
    init!("[link \\[bar](/uri)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link [bar")))
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7804>
/// <https://spec.commonmark.org/0.29/#example-511>
fn t511_no_nl() {
    init!("[link \\[bar](/uri)");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link [bar")))
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7804
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7804>
/// <https://spec.commonmark.org/0.29/#example-511>
fn t511_tab() {
    init!("[link\t\\[bar](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(link!("/uri", "", plain!("link	[bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t\\[bar](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7813
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7813>
/// <https://spec.commonmark.org/0.29/#example-512>
fn t512() {
    init!("[link *foo **bar** `#`*](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(link!("/uri", "", plain!("link "), emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))))
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7813
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7813>
/// <https://spec.commonmark.org/0.29/#example-512>
fn t512_cr() {
    init!("[link *foo **bar** `#`*](/uri)\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(link!("/uri", "", plain!("link "), emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))))
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7813
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7813>
/// <https://spec.commonmark.org/0.29/#example-512>
fn t512_cr_nl() {
    init!("[link *foo **bar** `#`*](/uri)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(link!("/uri", "", plain!("link "), emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))))
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7813
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7813>
/// <https://spec.commonmark.org/0.29/#example-512>
fn t512_no_nl() {
    init!("[link *foo **bar** `#`*](/uri)");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(link!("/uri", "", plain!("link "), emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))))
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7813
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7813>
/// <https://spec.commonmark.org/0.29/#example-512>
fn t512_tab() {
    init!("[link\t*foo\t**bar**\t`#`*](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(link!("/uri", "", plain!("link	"), emph!(plain!("foo	"), strong!(plain!("bar")), plain!("	"), code!("#"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t*foo\t**bar**\t`#`*](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7820
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7820>
/// <https://spec.commonmark.org/0.29/#example-513>
fn t513() {
    init!("[![moon](moon.jpg)](/uri)\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(link!("/uri", "", image!("moon.jpg", "", plain!("moon"))))
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7820
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7820>
/// <https://spec.commonmark.org/0.29/#example-513>
fn t513_cr() {
    init!("[![moon](moon.jpg)](/uri)\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(link!("/uri", "", image!("moon.jpg", "", plain!("moon"))))
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7820
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7820>
/// <https://spec.commonmark.org/0.29/#example-513>
fn t513_cr_nl() {
    init!("[![moon](moon.jpg)](/uri)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(link!("/uri", "", image!("moon.jpg", "", plain!("moon"))))
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7820
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7820>
/// <https://spec.commonmark.org/0.29/#example-513>
fn t513_no_nl() {
    init!("[![moon](moon.jpg)](/uri)");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(link!("/uri", "", image!("moon.jpg", "", plain!("moon"))))
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7829
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7829>
/// <https://spec.commonmark.org/0.29/#example-514>
fn t514() {
    init!("[foo [bar](/uri)](/uri)\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>](/uri)</p>
        [
            paragraph!(plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7829
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7829>
/// <https://spec.commonmark.org/0.29/#example-514>
fn t514_cr() {
    init!("[foo [bar](/uri)](/uri)\r");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>](/uri)</p>
        [
            paragraph!(plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7829
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7829>
/// <https://spec.commonmark.org/0.29/#example-514>
fn t514_cr_nl() {
    init!("[foo [bar](/uri)](/uri)\r\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>](/uri)</p>
        [
            paragraph!(plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7829
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7829>
/// <https://spec.commonmark.org/0.29/#example-514>
fn t514_no_nl() {
    init!("[foo [bar](/uri)](/uri)");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>](/uri)</p>
        [
            paragraph!(plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7829
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7829>
/// <https://spec.commonmark.org/0.29/#example-514>
fn t514_tab() {
    init!("[foo\t[bar](/uri)](/uri)\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>](/uri)</p>
        [
            paragraph!(plain!("[foo	"), link!("/uri", "", plain!("bar")), plain!("](/uri)"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t[bar](/uri)](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7836>
/// <https://spec.commonmark.org/0.29/#example-515>
fn t515() {
    init!("[foo *[bar [baz](/uri)](/uri)*](/uri)\n");

    assert_eq!(
        // from spec: <p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>
        [
            paragraph!(plain!("[foo "), emph!(plain!("[bar "), link!("/uri", "", plain!("baz")), plain!("](/uri)")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo *[bar [baz](/uri)](/uri)*](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7836>
/// <https://spec.commonmark.org/0.29/#example-515>
fn t515_cr() {
    init!("[foo *[bar [baz](/uri)](/uri)*](/uri)\r");

    assert_eq!(
        // from spec: <p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>
        [
            paragraph!(plain!("[foo "), emph!(plain!("[bar "), link!("/uri", "", plain!("baz")), plain!("](/uri)")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo *[bar [baz](/uri)](/uri)*](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7836>
/// <https://spec.commonmark.org/0.29/#example-515>
fn t515_cr_nl() {
    init!("[foo *[bar [baz](/uri)](/uri)*](/uri)\r\n");

    assert_eq!(
        // from spec: <p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>
        [
            paragraph!(plain!("[foo "), emph!(plain!("[bar "), link!("/uri", "", plain!("baz")), plain!("](/uri)")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo *[bar [baz](/uri)](/uri)*](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7836>
/// <https://spec.commonmark.org/0.29/#example-515>
fn t515_no_nl() {
    init!("[foo *[bar [baz](/uri)](/uri)*](/uri)");

    assert_eq!(
        // from spec: <p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>
        [
            paragraph!(plain!("[foo "), emph!(plain!("[bar "), link!("/uri", "", plain!("baz")), plain!("](/uri)")), plain!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo *[bar [baz](/uri)](/uri)*](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7836
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7836>
/// <https://spec.commonmark.org/0.29/#example-515>
fn t515_tab() {
    init!("[foo\t*[bar\t[baz](/uri)](/uri)*](/uri)\n");

    assert_eq!(
        // from spec: <p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>
        [
            paragraph!(plain!("[foo	"), emph!(plain!("[bar	"), link!("/uri", "", plain!("baz")), plain!("](/uri)")), plain!("](/uri)"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t*[bar\t[baz](/uri)](/uri)*](/uri)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7843
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7843>
/// <https://spec.commonmark.org/0.29/#example-516>
fn t516() {
    init!("![[[foo](uri1)](uri2)](uri3)\n");

    assert_eq!(
        // from spec: <p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>
        [
            paragraph!(image!("uri3", "", plain!("["), link!("uri1", "", plain!("foo")), plain!("](uri2)")))
        ].as_slice(),
        body(&mut StringData::new("![[[foo](uri1)](uri2)](uri3)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7843
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7843>
/// <https://spec.commonmark.org/0.29/#example-516>
fn t516_cr() {
    init!("![[[foo](uri1)](uri2)](uri3)\r");

    assert_eq!(
        // from spec: <p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>
        [
            paragraph!(image!("uri3", "", plain!("["), link!("uri1", "", plain!("foo")), plain!("](uri2)")))
        ].as_slice(),
        body(&mut StringData::new("![[[foo](uri1)](uri2)](uri3)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7843
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7843>
/// <https://spec.commonmark.org/0.29/#example-516>
fn t516_cr_nl() {
    init!("![[[foo](uri1)](uri2)](uri3)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>
        [
            paragraph!(image!("uri3", "", plain!("["), link!("uri1", "", plain!("foo")), plain!("](uri2)")))
        ].as_slice(),
        body(&mut StringData::new("![[[foo](uri1)](uri2)](uri3)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7843
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7843>
/// <https://spec.commonmark.org/0.29/#example-516>
fn t516_no_nl() {
    init!("![[[foo](uri1)](uri2)](uri3)");

    assert_eq!(
        // from spec: <p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>
        [
            paragraph!(image!("uri3", "", plain!("["), link!("uri1", "", plain!("foo")), plain!("](uri2)")))
        ].as_slice(),
        body(&mut StringData::new("![[[foo](uri1)](uri2)](uri3)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7853
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7853>
/// <https://spec.commonmark.org/0.29/#example-517>
fn t517() {
    init!("*[foo*](/uri)\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), link!("/uri", "", plain!("foo*")))
        ].as_slice(),
        body(&mut StringData::new("*[foo*](/uri)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7853
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7853>
/// <https://spec.commonmark.org/0.29/#example-517>
fn t517_cr() {
    init!("*[foo*](/uri)\r");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), link!("/uri", "", plain!("foo*")))
        ].as_slice(),
        body(&mut StringData::new("*[foo*](/uri)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7853
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7853>
/// <https://spec.commonmark.org/0.29/#example-517>
fn t517_cr_nl() {
    init!("*[foo*](/uri)\r\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), link!("/uri", "", plain!("foo*")))
        ].as_slice(),
        body(&mut StringData::new("*[foo*](/uri)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7853
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7853>
/// <https://spec.commonmark.org/0.29/#example-517>
fn t517_no_nl() {
    init!("*[foo*](/uri)");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), link!("/uri", "", plain!("foo*")))
        ].as_slice(),
        body(&mut StringData::new("*[foo*](/uri)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7860>
/// <https://spec.commonmark.org/0.29/#example-518>
fn t518() {
    init!("[foo *bar](baz*)\n");

    assert_eq!(
        // from spec: <p><a href=\"baz*\">foo *bar</a></p>
        [
            paragraph!(link!("baz*", "", plain!("foo *bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo *bar](baz*)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7860>
/// <https://spec.commonmark.org/0.29/#example-518>
fn t518_cr() {
    init!("[foo *bar](baz*)\r");

    assert_eq!(
        // from spec: <p><a href=\"baz*\">foo *bar</a></p>
        [
            paragraph!(link!("baz*", "", plain!("foo *bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo *bar](baz*)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7860>
/// <https://spec.commonmark.org/0.29/#example-518>
fn t518_cr_nl() {
    init!("[foo *bar](baz*)\r\n");

    assert_eq!(
        // from spec: <p><a href=\"baz*\">foo *bar</a></p>
        [
            paragraph!(link!("baz*", "", plain!("foo *bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo *bar](baz*)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7860>
/// <https://spec.commonmark.org/0.29/#example-518>
fn t518_no_nl() {
    init!("[foo *bar](baz*)");

    assert_eq!(
        // from spec: <p><a href=\"baz*\">foo *bar</a></p>
        [
            paragraph!(link!("baz*", "", plain!("foo *bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo *bar](baz*)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7860
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7860>
/// <https://spec.commonmark.org/0.29/#example-518>
fn t518_tab() {
    init!("[foo\t*bar](baz*)\n");

    assert_eq!(
        // from spec: <p><a href=\"baz*\">foo *bar</a></p>
        [
            paragraph!(link!("baz*", "", plain!("foo	*bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t*bar](baz*)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7870>
/// <https://spec.commonmark.org/0.29/#example-519>
fn t519() {
    init!("*foo [bar* baz]\n");

    assert_eq!(
        // from spec: <p><em>foo [bar</em> baz]</p>
        [
            paragraph!(emph!(plain!("foo [bar")), plain!(" baz]"))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar* baz]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7870>
/// <https://spec.commonmark.org/0.29/#example-519>
fn t519_cr() {
    init!("*foo [bar* baz]\r");

    assert_eq!(
        // from spec: <p><em>foo [bar</em> baz]</p>
        [
            paragraph!(emph!(plain!("foo [bar")), plain!(" baz]"))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar* baz]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7870>
/// <https://spec.commonmark.org/0.29/#example-519>
fn t519_cr_nl() {
    init!("*foo [bar* baz]\r\n");

    assert_eq!(
        // from spec: <p><em>foo [bar</em> baz]</p>
        [
            paragraph!(emph!(plain!("foo [bar")), plain!(" baz]"))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar* baz]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7870>
/// <https://spec.commonmark.org/0.29/#example-519>
fn t519_no_nl() {
    init!("*foo [bar* baz]");

    assert_eq!(
        // from spec: <p><em>foo [bar</em> baz]</p>
        [
            paragraph!(emph!(plain!("foo [bar")), plain!(" baz]"))
        ].as_slice(),
        body(&mut StringData::new("*foo [bar* baz]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7870>
/// <https://spec.commonmark.org/0.29/#example-519>
fn t519_tab() {
    init!("*foo\t[bar*\tbaz]\n");

    assert_eq!(
        // from spec: <p><em>foo [bar</em> baz]</p>
        [
            paragraph!(emph!(plain!("foo	[bar")), plain!("	baz]"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("*foo\t[bar*\tbaz]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7880
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7880>
/// <https://spec.commonmark.org/0.29/#example-520>
fn t520() {
    init!("[foo <bar attr=\"](baz)\">\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"](baz)\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"](baz)\">"))
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"](baz)\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7880
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7880>
/// <https://spec.commonmark.org/0.29/#example-520>
fn t520_cr() {
    init!("[foo <bar attr=\"](baz)\">\r");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"](baz)\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"](baz)\">"))
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"](baz)\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7880
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7880>
/// <https://spec.commonmark.org/0.29/#example-520>
fn t520_cr_nl() {
    init!("[foo <bar attr=\"](baz)\">\r\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"](baz)\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"](baz)\">"))
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"](baz)\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7880
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7880>
/// <https://spec.commonmark.org/0.29/#example-520>
fn t520_no_nl() {
    init!("[foo <bar attr=\"](baz)\">");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"](baz)\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"](baz)\">"))
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"](baz)\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7880
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7880>
/// <https://spec.commonmark.org/0.29/#example-520>
fn t520_tab() {
    init!("[foo\t<bar\tattr=\"](baz)\">\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"](baz)\"></p>
        [
            paragraph!(plain!("[foo	"),	html!("<bar	attr=\"](baz)\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t<bar\tattr=\"](baz)\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7887
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7887>
/// <https://spec.commonmark.org/0.29/#example-521>
fn t521() {
    init!("[foo`](/uri)`\n");

    assert_eq!(
        // from spec: <p>[foo<code>](/uri)</code></p>
        [
            paragraph!(plain!("[foo"), code!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo`](/uri)`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7887
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7887>
/// <https://spec.commonmark.org/0.29/#example-521>
fn t521_cr() {
    init!("[foo`](/uri)`\r");

    assert_eq!(
        // from spec: <p>[foo<code>](/uri)</code></p>
        [
            paragraph!(plain!("[foo"), code!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo`](/uri)`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7887
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7887>
/// <https://spec.commonmark.org/0.29/#example-521>
fn t521_cr_nl() {
    init!("[foo`](/uri)`\r\n");

    assert_eq!(
        // from spec: <p>[foo<code>](/uri)</code></p>
        [
            paragraph!(plain!("[foo"), code!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo`](/uri)`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7887
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7887>
/// <https://spec.commonmark.org/0.29/#example-521>
fn t521_no_nl() {
    init!("[foo`](/uri)`");

    assert_eq!(
        // from spec: <p>[foo<code>](/uri)</code></p>
        [
            paragraph!(plain!("[foo"), code!("](/uri)"))
        ].as_slice(),
        body(&mut StringData::new("[foo`](/uri)`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7894>
/// <https://spec.commonmark.org/0.29/#example-522>
fn t522() {
    init!("[foo<http://example.com/?search=](uri)>\n");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>
        [
            paragraph!(plain!("[foo"), link!("http://example.com/?search=](uri)", "", plain!("http://example.com/?search=](uri)")))
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=](uri)>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7894>
/// <https://spec.commonmark.org/0.29/#example-522>
fn t522_cr() {
    init!("[foo<http://example.com/?search=](uri)>\r");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>
        [
            paragraph!(plain!("[foo"), link!("http://example.com/?search=](uri)", "", plain!("http://example.com/?search=](uri)")))
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=](uri)>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7894>
/// <https://spec.commonmark.org/0.29/#example-522>
fn t522_cr_nl() {
    init!("[foo<http://example.com/?search=](uri)>\r\n");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>
        [
            paragraph!(plain!("[foo"), link!("http://example.com/?search=](uri)", "", plain!("http://example.com/?search=](uri)")))
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=](uri)>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7894
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7894>
/// <https://spec.commonmark.org/0.29/#example-522>
fn t522_no_nl() {
    init!("[foo<http://example.com/?search=](uri)>");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>
        [
            paragraph!(plain!("[foo"), link!("http://example.com/?search=](uri)", "", plain!("http://example.com/?search=](uri)")))
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=](uri)>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7931
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7931>
/// <https://spec.commonmark.org/0.29/#example-523>
fn t523() {
    init!("[foo][bar]\n\n[bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\n\n[bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7931
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7931>
/// <https://spec.commonmark.org/0.29/#example-523>
fn t523_cr() {
    init!("[foo][bar]\r\r[bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\r\r[bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7931
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7931>
/// <https://spec.commonmark.org/0.29/#example-523>
fn t523_cr_nl() {
    init!("[foo][bar]\r\n\r\n[bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\r\n\r\n[bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7931
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7931>
/// <https://spec.commonmark.org/0.29/#example-523>
fn t523_no_nl() {
    init!("[foo][bar]\n\n[bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\n\n[bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7931
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7931>
/// <https://spec.commonmark.org/0.29/#example-523>
fn t523_tab() {
    init!("[foo][bar]\n\n[bar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("bar",	plain!("foo"))),
            linkdef!("bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][bar]\n\n[bar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7946>
/// <https://spec.commonmark.org/0.29/#example-524>
fn t524() {
    init!("[link [foo [bar]]][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7946>
/// <https://spec.commonmark.org/0.29/#example-524>
fn t524_cr() {
    init!("[link [foo [bar]]][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7946>
/// <https://spec.commonmark.org/0.29/#example-524>
fn t524_cr_nl() {
    init!("[link [foo [bar]]][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7946>
/// <https://spec.commonmark.org/0.29/#example-524>
fn t524_no_nl() {
    init!("[link [foo [bar]]][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              linkref!(plain!("foo "), linkref!(plain!("bar")))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link [foo [bar]]][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7946
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7946>
/// <https://spec.commonmark.org/0.29/#example-524>
fn t524_tab() {
    init!("[link\t[foo\t[bar]]][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [foo [bar]]</a></p>
        [
            paragraph!(linkref!(
            		"ref",
            		plain!("link	"),
            		linkref!(plain!("foo	"),	linkref!(plain!("bar")))
            )),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t[foo\t[bar]]][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7955
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7955>
/// <https://spec.commonmark.org/0.29/#example-525>
fn t525() {
    init!("[link \\[bar][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(linkref!("ref", plain!("link [bar"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7955
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7955>
/// <https://spec.commonmark.org/0.29/#example-525>
fn t525_cr() {
    init!("[link \\[bar][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(linkref!("ref", plain!("link [bar"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7955
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7955>
/// <https://spec.commonmark.org/0.29/#example-525>
fn t525_cr_nl() {
    init!("[link \\[bar][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(linkref!("ref", plain!("link [bar"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7955
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7955>
/// <https://spec.commonmark.org/0.29/#example-525>
fn t525_no_nl() {
    init!("[link \\[bar][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(linkref!("ref", plain!("link [bar"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link \\[bar][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7955
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7955>
/// <https://spec.commonmark.org/0.29/#example-525>
fn t525_tab() {
    init!("[link\t\\[bar][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link [bar</a></p>
        [
            paragraph!(linkref!("ref",	plain!("link	[bar"))),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t\\[bar][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7966
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7966>
/// <https://spec.commonmark.org/0.29/#example-526>
fn t526() {
    init!("[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7966
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7966>
/// <https://spec.commonmark.org/0.29/#example-526>
fn t526_cr() {
    init!("[link *foo **bar** `#`*][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7966
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7966>
/// <https://spec.commonmark.org/0.29/#example-526>
fn t526_cr_nl() {
    init!("[link *foo **bar** `#`*][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7966
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7966>
/// <https://spec.commonmark.org/0.29/#example-526>
fn t526_no_nl() {
    init!("[link *foo **bar** `#`*][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(linkref!(
              "ref",
              plain!("link "),
              emph!(plain!("foo "), strong!(plain!("bar")), plain!(" "), code!("#"))
            )),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[link *foo **bar** `#`*][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7966
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7966>
/// <https://spec.commonmark.org/0.29/#example-526>
fn t526_tab() {
    init!("[link\t*foo\t**bar**\t`#`*][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
        [
            paragraph!(linkref!(
            		"ref",
            		plain!("link	"),
            		emph!(plain!("foo	"),	strong!(plain!("bar")),	plain!("	"),	code!("#"))
            )),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[link\t*foo\t**bar**\t`#`*][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7975>
/// <https://spec.commonmark.org/0.29/#example-527>
fn t527() {
    init!("[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(linkref!("ref", image!("moon.jpg", "", plain!("moon")))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7975>
/// <https://spec.commonmark.org/0.29/#example-527>
fn t527_cr() {
    init!("[![moon](moon.jpg)][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(linkref!("ref", image!("moon.jpg", "", plain!("moon")))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7975>
/// <https://spec.commonmark.org/0.29/#example-527>
fn t527_cr_nl() {
    init!("[![moon](moon.jpg)][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(linkref!("ref", image!("moon.jpg", "", plain!("moon")))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7975>
/// <https://spec.commonmark.org/0.29/#example-527>
fn t527_no_nl() {
    init!("[![moon](moon.jpg)][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(linkref!("ref", image!("moon.jpg", "", plain!("moon")))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[![moon](moon.jpg)][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7975
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7975>
/// <https://spec.commonmark.org/0.29/#example-527>
fn t527_tab() {
    init!("[![moon](moon.jpg)][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>
        [
            paragraph!(linkref!("ref",	image!("moon.jpg",	"",	plain!("moon")))),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[![moon](moon.jpg)][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7986
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7986>
/// <https://spec.commonmark.org/0.29/#example-528>
fn t528() {
    init!("[foo [bar](/uri)][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("]"),
              linkref!(plain!("ref"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7986
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7986>
/// <https://spec.commonmark.org/0.29/#example-528>
fn t528_cr() {
    init!("[foo [bar](/uri)][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("]"),
              linkref!(plain!("ref"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7986
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7986>
/// <https://spec.commonmark.org/0.29/#example-528>
fn t528_cr_nl() {
    init!("[foo [bar](/uri)][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("]"),
              linkref!(plain!("ref"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7986
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7986>
/// <https://spec.commonmark.org/0.29/#example-528>
fn t528_no_nl() {
    init!("[foo [bar](/uri)][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              plain!("[foo "), link!("/uri", "", plain!("bar")), plain!("]"),
              linkref!(plain!("ref"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo [bar](/uri)][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7986
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7986>
/// <https://spec.commonmark.org/0.29/#example-528>
fn t528_tab() {
    init!("[foo\t[bar](/uri)][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
            		plain!("[foo	"),	link!("/uri",	"",	plain!("bar")),	plain!("]"),
            		linkref!(plain!("ref"))
            ),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t[bar](/uri)][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7995
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7995>
/// <https://spec.commonmark.org/0.29/#example-529>
fn t529() {
    init!("[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              linkref!(
                "ref",
                plain!("foo "),
                emph!(plain!("bar "), linkref!("ref", plain!("baz")))
              )
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7995
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7995>
/// <https://spec.commonmark.org/0.29/#example-529>
fn t529_cr() {
    init!("[foo *bar [baz][ref]*][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              linkref!(
                "ref",
                plain!("foo "),
                emph!(plain!("bar "), linkref!("ref", plain!("baz")))
              )
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar [baz][ref]*][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7995
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7995>
/// <https://spec.commonmark.org/0.29/#example-529>
fn t529_cr_nl() {
    init!("[foo *bar [baz][ref]*][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              linkref!(
                "ref",
                plain!("foo "),
                emph!(plain!("bar "), linkref!("ref", plain!("baz")))
              )
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar [baz][ref]*][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7995
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7995>
/// <https://spec.commonmark.org/0.29/#example-529>
fn t529_no_nl() {
    init!("[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
              linkref!(
                "ref",
                plain!("foo "),
                emph!(plain!("bar "), linkref!("ref", plain!("baz")))
              )
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 7995
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L7995>
/// <https://spec.commonmark.org/0.29/#example-529>
fn t529_tab() {
    init!("[foo\t*bar\t[baz][ref]*][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>
        [
            paragraph!(
            		linkref!(
            				"ref",
            				plain!("foo	"),
            				emph!(plain!("bar	"),	linkref!("ref",	plain!("baz")))
            		)
            ),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t*bar\t[baz][ref]*][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8010
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8010>
/// <https://spec.commonmark.org/0.29/#example-530>
fn t530() {
    init!("*[foo*][ref]\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), linkref!("ref", plain!("foo*"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("*[foo*][ref]\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8010
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8010>
/// <https://spec.commonmark.org/0.29/#example-530>
fn t530_cr() {
    init!("*[foo*][ref]\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), linkref!("ref", plain!("foo*"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("*[foo*][ref]\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8010
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8010>
/// <https://spec.commonmark.org/0.29/#example-530>
fn t530_cr_nl() {
    init!("*[foo*][ref]\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), linkref!("ref", plain!("foo*"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("*[foo*][ref]\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8010
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8010>
/// <https://spec.commonmark.org/0.29/#example-530>
fn t530_no_nl() {
    init!("*[foo*][ref]\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"), linkref!("ref", plain!("foo*"))),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("*[foo*][ref]\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8010
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8010>
/// <https://spec.commonmark.org/0.29/#example-530>
fn t530_tab() {
    init!("*[foo*][ref]\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/uri\">foo*</a></p>
        [
            paragraph!(plain!("*"),	linkref!("ref",	plain!("foo*"))),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("*[foo*][ref]\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8019
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8019>
/// <https://spec.commonmark.org/0.29/#example-531>
fn t531() {
    init!("[foo *bar][ref]*\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo *bar</a>*</p>
        [
            paragraph!(
              linkref!("ref", plain!("foo *bar")),
              plain!("*")
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar][ref]*\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8019
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8019>
/// <https://spec.commonmark.org/0.29/#example-531>
fn t531_cr() {
    init!("[foo *bar][ref]*\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo *bar</a>*</p>
        [
            paragraph!(
              linkref!("ref", plain!("foo *bar")),
              plain!("*")
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar][ref]*\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8019
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8019>
/// <https://spec.commonmark.org/0.29/#example-531>
fn t531_cr_nl() {
    init!("[foo *bar][ref]*\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo *bar</a>*</p>
        [
            paragraph!(
              linkref!("ref", plain!("foo *bar")),
              plain!("*")
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar][ref]*\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8019
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8019>
/// <https://spec.commonmark.org/0.29/#example-531>
fn t531_no_nl() {
    init!("[foo *bar][ref]*\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo *bar</a>*</p>
        [
            paragraph!(
              linkref!("ref", plain!("foo *bar")),
              plain!("*")
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo *bar][ref]*\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8019
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8019>
/// <https://spec.commonmark.org/0.29/#example-531>
fn t531_tab() {
    init!("[foo\t*bar][ref]*\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo *bar</a>*</p>
        [
            paragraph!(
            		linkref!("ref",	plain!("foo	*bar")),
            		plain!("*")
            ),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t*bar][ref]*\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8031>
/// <https://spec.commonmark.org/0.29/#example-532>
fn t532() {
    init!("[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"][ref]\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"][ref]\">")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8031>
/// <https://spec.commonmark.org/0.29/#example-532>
fn t532_cr() {
    init!("[foo <bar attr=\"][ref]\">\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"][ref]\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"][ref]\">")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"][ref]\">\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8031>
/// <https://spec.commonmark.org/0.29/#example-532>
fn t532_cr_nl() {
    init!("[foo <bar attr=\"][ref]\">\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"][ref]\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"][ref]\">")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"][ref]\">\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8031>
/// <https://spec.commonmark.org/0.29/#example-532>
fn t532_no_nl() {
    init!("[foo <bar attr=\"][ref]\">\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"][ref]\"></p>
        [
            paragraph!(plain!("[foo "), html!("<bar attr=\"][ref]\">")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo <bar attr=\"][ref]\">\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8031
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8031>
/// <https://spec.commonmark.org/0.29/#example-532>
fn t532_tab() {
    init!("[foo\t<bar\tattr=\"][ref]\">\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo <bar attr=\"][ref]\"></p>
        [
            paragraph!(plain!("[foo	"),	html!("<bar	attr=\"][ref]\">")),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo\t<bar\tattr=\"][ref]\">\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8040>
/// <https://spec.commonmark.org/0.29/#example-533>
fn t533() {
    init!("[foo`][ref]`\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo<code>][ref]</code></p>
        [
            paragraph!(plain!("[foo"), code!("][ref]")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo`][ref]`\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8040>
/// <https://spec.commonmark.org/0.29/#example-533>
fn t533_cr() {
    init!("[foo`][ref]`\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo<code>][ref]</code></p>
        [
            paragraph!(plain!("[foo"), code!("][ref]")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo`][ref]`\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8040>
/// <https://spec.commonmark.org/0.29/#example-533>
fn t533_cr_nl() {
    init!("[foo`][ref]`\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo<code>][ref]</code></p>
        [
            paragraph!(plain!("[foo"), code!("][ref]")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo`][ref]`\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8040>
/// <https://spec.commonmark.org/0.29/#example-533>
fn t533_no_nl() {
    init!("[foo`][ref]`\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>[foo<code>][ref]</code></p>
        [
            paragraph!(plain!("[foo"), code!("][ref]")),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo`][ref]`\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8040
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8040>
/// <https://spec.commonmark.org/0.29/#example-533>
fn t533_tab() {
    init!("[foo`][ref]`\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo<code>][ref]</code></p>
        [
            paragraph!(plain!("[foo"),	code!("][ref]")),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo`][ref]`\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8049>
/// <https://spec.commonmark.org/0.29/#example-534>
fn t534() {
    init!("[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>
        [
            paragraph!(plain!("[foo"),
              link!("http://example.com/?search=][ref]", "",
                plain!("http://example.com/?search=][ref]"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8049>
/// <https://spec.commonmark.org/0.29/#example-534>
fn t534_cr() {
    init!("[foo<http://example.com/?search=][ref]>\r\r[ref]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>
        [
            paragraph!(plain!("[foo"),
              link!("http://example.com/?search=][ref]", "",
                plain!("http://example.com/?search=][ref]"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=][ref]>\r\r[ref]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8049>
/// <https://spec.commonmark.org/0.29/#example-534>
fn t534_cr_nl() {
    init!("[foo<http://example.com/?search=][ref]>\r\n\r\n[ref]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>
        [
            paragraph!(plain!("[foo"),
              link!("http://example.com/?search=][ref]", "",
                plain!("http://example.com/?search=][ref]"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=][ref]>\r\n\r\n[ref]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8049>
/// <https://spec.commonmark.org/0.29/#example-534>
fn t534_no_nl() {
    init!("[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>
        [
            paragraph!(plain!("[foo"),
              link!("http://example.com/?search=][ref]", "",
                plain!("http://example.com/?search=][ref]"))
            ),
            linkdef!("ref", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8049
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8049>
/// <https://spec.commonmark.org/0.29/#example-534>
fn t534_tab() {
    init!("[foo<http://example.com/?search=][ref]>\n\n[ref]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>
        [
            paragraph!(plain!("[foo"),
            		link!("http://example.com/?search=][ref]",	"",
            				plain!("http://example.com/?search=][ref]"))
            ),
            linkdef!("ref",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo<http://example.com/?search=][ref]>\n\n[ref]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8060
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8060>
/// <https://spec.commonmark.org/0.29/#example-535>
fn t535() {
    init!("[foo][BaR]\n\n[bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("BaR", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][BaR]\n\n[bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8060
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8060>
/// <https://spec.commonmark.org/0.29/#example-535>
fn t535_cr() {
    init!("[foo][BaR]\r\r[bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("BaR", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][BaR]\r\r[bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8060
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8060>
/// <https://spec.commonmark.org/0.29/#example-535>
fn t535_cr_nl() {
    init!("[foo][BaR]\r\n\r\n[bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("BaR", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][BaR]\r\n\r\n[bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8060
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8060>
/// <https://spec.commonmark.org/0.29/#example-535>
fn t535_no_nl() {
    init!("[foo][BaR]\n\n[bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("BaR", plain!("foo"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][BaR]\n\n[bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8060
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8060>
/// <https://spec.commonmark.org/0.29/#example-535>
fn t535_tab() {
    init!("[foo][BaR]\n\n[bar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!("BaR",	plain!("foo"))),
            linkdef!("bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][BaR]\n\n[bar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8071
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8071>
/// <https://spec.commonmark.org/0.29/#example-536>
fn t536() {
    init!("[ẞ]\n\n[SS]: /url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">ẞ</a></p>
        [
            paragraph!(linkref!(plain!("ẞ"))),
            linkdef!("SS", "/url")
        ].as_slice(),
        body(&mut StringData::new("[\u{1e9e}]\n\n[SS]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8071
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8071>
/// <https://spec.commonmark.org/0.29/#example-536>
fn t536_cr() {
    init!("[ẞ]\r\r[SS]: /url\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">ẞ</a></p>
        [
            paragraph!(linkref!(plain!("ẞ"))),
            linkdef!("SS", "/url")
        ].as_slice(),
        body(&mut StringData::new("[\u{1e9e}]\r\r[SS]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8071
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8071>
/// <https://spec.commonmark.org/0.29/#example-536>
fn t536_cr_nl() {
    init!("[ẞ]\r\n\r\n[SS]: /url\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">ẞ</a></p>
        [
            paragraph!(linkref!(plain!("ẞ"))),
            linkdef!("SS", "/url")
        ].as_slice(),
        body(&mut StringData::new("[\u{1e9e}]\r\n\r\n[SS]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8071
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8071>
/// <https://spec.commonmark.org/0.29/#example-536>
fn t536_no_nl() {
    init!("[ẞ]\n\n[SS]: /url");

    assert_eq!(
        // from spec: <p><a href=\"/url\">ẞ</a></p>
        [
            paragraph!(linkref!(plain!("ẞ"))),
            linkdef!("SS", "/url")
        ].as_slice(),
        body(&mut StringData::new("[\u{1e9e}]\n\n[SS]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8071
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8071>
/// <https://spec.commonmark.org/0.29/#example-536>
fn t536_tab() {
    init!("[ẞ]\n\n[SS]:\t/url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">ẞ</a></p>
        [
            paragraph!(linkref!(plain!("ẞ"))),
            linkdef!("SS",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[\u{1e9e}]\n\n[SS]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8083>
/// <https://spec.commonmark.org/0.29/#example-537>
fn t537() {
    init!("[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Baz</a></p>
        [
            linkdef!("Foo\n  bar", "/url", ""),
            paragraph!(linkref!("Foo bar", plain!("Baz")))
        ].as_slice(),
        body(&mut StringData::new("[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8083>
/// <https://spec.commonmark.org/0.29/#example-537>
fn t537_cr() {
    init!("[Foo\r  bar]: /url\r\r[Baz][Foo bar]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Baz</a></p>
        [
            linkdef!("Foo\r  bar", "/url", ""),
            paragraph!(linkref!("Foo bar", plain!("Baz")))
        ].as_slice(),
        body(&mut StringData::new("[Foo\r  bar]: /url\r\r[Baz][Foo bar]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8083>
/// <https://spec.commonmark.org/0.29/#example-537>
fn t537_cr_nl() {
    init!("[Foo\r\n  bar]: /url\r\n\r\n[Baz][Foo bar]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Baz</a></p>
        [
            linkdef!("Foo\r\n  bar", "/url", ""),
            paragraph!(linkref!("Foo bar", plain!("Baz")))
        ].as_slice(),
        body(&mut StringData::new("[Foo\r\n  bar]: /url\r\n\r\n[Baz][Foo bar]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8083>
/// <https://spec.commonmark.org/0.29/#example-537>
fn t537_no_nl() {
    init!("[Foo\n  bar]: /url\n\n[Baz][Foo bar]");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Baz</a></p>
        [
            linkdef!("Foo\n  bar", "/url", ""),
            paragraph!(linkref!("Foo bar", plain!("Baz")))
        ].as_slice(),
        body(&mut StringData::new("[Foo\n  bar]: /url\n\n[Baz][Foo bar]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8083
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8083>
/// <https://spec.commonmark.org/0.29/#example-537>
fn t537_tab() {
    init!("[Foo\n  bar]:\t/url\n\n[Baz][Foo\tbar]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">Baz</a></p>
        [
            linkdef!("Foo\n		bar",	"/url",	""),
            paragraph!(linkref!("Foo	bar",	plain!("Baz")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[Foo\n  bar]:\t/url\n\n[Baz][Foo\tbar]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8096
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8096>
/// <https://spec.commonmark.org/0.29/#example-538>
fn t538() {
    init!("[foo] [bar]\n\n[bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" "), linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] [bar]\n\n[bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8096
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8096>
/// <https://spec.commonmark.org/0.29/#example-538>
fn t538_cr() {
    init!("[foo] [bar]\r\r[bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" "), linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] [bar]\r\r[bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8096
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8096>
/// <https://spec.commonmark.org/0.29/#example-538>
fn t538_cr_nl() {
    init!("[foo] [bar]\r\n\r\n[bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" "), linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] [bar]\r\n\r\n[bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8096
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8096>
/// <https://spec.commonmark.org/0.29/#example-538>
fn t538_no_nl() {
    init!("[foo] [bar]\n\n[bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" "), linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] [bar]\n\n[bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8096
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8096>
/// <https://spec.commonmark.org/0.29/#example-538>
fn t538_tab() {
    init!("[foo]\t[bar]\n\n[bar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!("	"),	linkref!(plain!("bar"))),
            linkdef!("bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\t[bar]\n\n[bar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8105
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8105>
/// <https://spec.commonmark.org/0.29/#example-539>
fn t539() {
    init!("[foo]\n[bar]\n\n[bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n[bar]\n\n[bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8105
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8105>
/// <https://spec.commonmark.org/0.29/#example-539>
fn t539_cr() {
    init!("[foo]\r[bar]\r\r[bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r[bar]\r\r[bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8105
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8105>
/// <https://spec.commonmark.org/0.29/#example-539>
fn t539_cr_nl() {
    init!("[foo]\r\n[bar]\r\n\r\n[bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n[bar]\r\n\r\n[bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8105
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8105>
/// <https://spec.commonmark.org/0.29/#example-539>
fn t539_no_nl() {
    init!("[foo]\n[bar]\n\n[bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, linkref!(plain!("bar"))),
            linkdef!("bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n[bar]\n\n[bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8105
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8105>
/// <https://spec.commonmark.org/0.29/#example-539>
fn t539_tab() {
    init!("[foo]\n[bar]\n\n[bar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>
        [
            paragraph!(linkref!(plain!("foo")),	SoftBreak,	linkref!(plain!("bar"))),
            linkdef!("bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n[bar]\n\n[bar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8146
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8146>
/// <https://spec.commonmark.org/0.29/#example-540>
fn t540() {
    init!("[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">bar</a></p>
        [
            linkdef!("foo", "/url1"),
            linkdef!("foo", "/url2"),
            paragraph!(linkref!("foo", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8146
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8146>
/// <https://spec.commonmark.org/0.29/#example-540>
fn t540_cr() {
    init!("[foo]: /url1\r\r[foo]: /url2\r\r[bar][foo]\r");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">bar</a></p>
        [
            linkdef!("foo", "/url1"),
            linkdef!("foo", "/url2"),
            paragraph!(linkref!("foo", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url1\r\r[foo]: /url2\r\r[bar][foo]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8146
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8146>
/// <https://spec.commonmark.org/0.29/#example-540>
fn t540_cr_nl() {
    init!("[foo]: /url1\r\n\r\n[foo]: /url2\r\n\r\n[bar][foo]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">bar</a></p>
        [
            linkdef!("foo", "/url1"),
            linkdef!("foo", "/url2"),
            paragraph!(linkref!("foo", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url1\r\n\r\n[foo]: /url2\r\n\r\n[bar][foo]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8146
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8146>
/// <https://spec.commonmark.org/0.29/#example-540>
fn t540_no_nl() {
    init!("[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">bar</a></p>
        [
            linkdef!("foo", "/url1"),
            linkdef!("foo", "/url2"),
            paragraph!(linkref!("foo", plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8146
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8146>
/// <https://spec.commonmark.org/0.29/#example-540>
fn t540_tab() {
    init!("[foo]:\t/url1\n\n[foo]:\t/url2\n\n[bar][foo]\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">bar</a></p>
        [
            linkdef!("foo",	"/url1"),
            linkdef!("foo",	"/url2"),
            paragraph!(linkref!("foo",	plain!("bar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]:\t/url1\n\n[foo]:\t/url2\n\n[bar][foo]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8161
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8161>
/// <https://spec.commonmark.org/0.29/#example-541>
fn t541() {
    init!("[bar][foo\\!]\n\n[foo!]: /url\n");

    assert_eq!(
        // from spec: <p>[bar][foo!]</p>
        [
            paragraph!(linkref!("foo\\!", plain!("bar"))),
            linkdef!("foo!", "/url")
        ].as_slice(),
        body(&mut StringData::new("[bar][foo\\!]\n\n[foo!]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8161
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8161>
/// <https://spec.commonmark.org/0.29/#example-541>
fn t541_cr() {
    init!("[bar][foo\\!]\r\r[foo!]: /url\r");

    assert_eq!(
        // from spec: <p>[bar][foo!]</p>
        [
            paragraph!(linkref!("foo\\!", plain!("bar"))),
            linkdef!("foo!", "/url")
        ].as_slice(),
        body(&mut StringData::new("[bar][foo\\!]\r\r[foo!]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8161
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8161>
/// <https://spec.commonmark.org/0.29/#example-541>
fn t541_cr_nl() {
    init!("[bar][foo\\!]\r\n\r\n[foo!]: /url\r\n");

    assert_eq!(
        // from spec: <p>[bar][foo!]</p>
        [
            paragraph!(linkref!("foo\\!", plain!("bar"))),
            linkdef!("foo!", "/url")
        ].as_slice(),
        body(&mut StringData::new("[bar][foo\\!]\r\n\r\n[foo!]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8161
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8161>
/// <https://spec.commonmark.org/0.29/#example-541>
fn t541_no_nl() {
    init!("[bar][foo\\!]\n\n[foo!]: /url");

    assert_eq!(
        // from spec: <p>[bar][foo!]</p>
        [
            paragraph!(linkref!("foo\\!", plain!("bar"))),
            linkdef!("foo!", "/url")
        ].as_slice(),
        body(&mut StringData::new("[bar][foo\\!]\n\n[foo!]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8161
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8161>
/// <https://spec.commonmark.org/0.29/#example-541>
fn t541_tab() {
    init!("[bar][foo\\!]\n\n[foo!]:\t/url\n");

    assert_eq!(
        // from spec: <p>[bar][foo!]</p>
        [
            paragraph!(linkref!("foo\\!",	plain!("bar"))),
            linkdef!("foo!",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[bar][foo\\!]\n\n[foo!]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8173
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8173>
/// <https://spec.commonmark.org/0.29/#example-542>
fn t542() {
    init!("[foo][ref[]\n\n[ref[]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("[ref[]")),
            paragraph!(plain!("[ref[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[]\n\n[ref[]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8173
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8173>
/// <https://spec.commonmark.org/0.29/#example-542>
fn t542_cr() {
    init!("[foo][ref[]\r\r[ref[]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("[ref[]")),
            paragraph!(plain!("[ref[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[]\r\r[ref[]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8173
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8173>
/// <https://spec.commonmark.org/0.29/#example-542>
fn t542_cr_nl() {
    init!("[foo][ref[]\r\n\r\n[ref[]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("[ref[]")),
            paragraph!(plain!("[ref[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[]\r\n\r\n[ref[]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8173
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8173>
/// <https://spec.commonmark.org/0.29/#example-542>
fn t542_no_nl() {
    init!("[foo][ref[]\n\n[ref[]: /uri");

    assert_eq!(
        // from spec: <p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("[ref[]")),
            paragraph!(plain!("[ref[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[]\n\n[ref[]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8173
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8173>
/// <https://spec.commonmark.org/0.29/#example-542>
fn t542_tab() {
    init!("[foo][ref[]\n\n[ref[]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!("[ref[]")),
            paragraph!(plain!("[ref[]:	/uri"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][ref[]\n\n[ref[]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8183>
/// <https://spec.commonmark.org/0.29/#example-543>
fn t543() {
    init!("[foo][ref[bar]]\n\n[ref[bar]]: /uri\n");

    assert_eq!(
        // from spec: <p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>
        [
            paragraph!(
              linkref!(plain!("foo")),
              linkref!(
                plain!("ref"),
                linkref!(plain!("bar"))
              )
            ),
            paragraph!(
              linkref!(plain!("ref"), linkref!(plain!("bar"))),
              plain!(": /uri")
            )
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[bar]]\n\n[ref[bar]]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8183>
/// <https://spec.commonmark.org/0.29/#example-543>
fn t543_cr() {
    init!("[foo][ref[bar]]\r\r[ref[bar]]: /uri\r");

    assert_eq!(
        // from spec: <p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>
        [
            paragraph!(
              linkref!(plain!("foo")),
              linkref!(
                plain!("ref"),
                linkref!(plain!("bar"))
              )
            ),
            paragraph!(
              linkref!(plain!("ref"), linkref!(plain!("bar"))),
              plain!(": /uri")
            )
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[bar]]\r\r[ref[bar]]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8183>
/// <https://spec.commonmark.org/0.29/#example-543>
fn t543_cr_nl() {
    init!("[foo][ref[bar]]\r\n\r\n[ref[bar]]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>
        [
            paragraph!(
              linkref!(plain!("foo")),
              linkref!(
                plain!("ref"),
                linkref!(plain!("bar"))
              )
            ),
            paragraph!(
              linkref!(plain!("ref"), linkref!(plain!("bar"))),
              plain!(": /uri")
            )
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[bar]]\r\n\r\n[ref[bar]]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8183>
/// <https://spec.commonmark.org/0.29/#example-543>
fn t543_no_nl() {
    init!("[foo][ref[bar]]\n\n[ref[bar]]: /uri");

    assert_eq!(
        // from spec: <p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>
        [
            paragraph!(
              linkref!(plain!("foo")),
              linkref!(
                plain!("ref"),
                linkref!(plain!("bar"))
              )
            ),
            paragraph!(
              linkref!(plain!("ref"), linkref!(plain!("bar"))),
              plain!(": /uri")
            )
        ].as_slice(),
        body(&mut StringData::new("[foo][ref[bar]]\n\n[ref[bar]]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8183
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8183>
/// <https://spec.commonmark.org/0.29/#example-543>
fn t543_tab() {
    init!("[foo][ref[bar]]\n\n[ref[bar]]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>
        [
            paragraph!(
            		linkref!(plain!("foo")),
            		linkref!(
            				plain!("ref"),
            				linkref!(plain!("bar"))
            		)
            ),
            paragraph!(
            		linkref!(plain!("ref"),	linkref!(plain!("bar"))),
            		plain!(":	/uri")
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][ref[bar]]\n\n[ref[bar]]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8193
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8193>
/// <https://spec.commonmark.org/0.29/#example-544>
fn t544() {
    init!("[[[foo]]]\n\n[[[foo]]]: /url\n");

    assert_eq!(
        // from spec: <p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>
        [
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo"))))
            ),
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo")))),
              plain!(": /url")
            )
        ].as_slice(),
        body(&mut StringData::new("[[[foo]]]\n\n[[[foo]]]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8193
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8193>
/// <https://spec.commonmark.org/0.29/#example-544>
fn t544_cr() {
    init!("[[[foo]]]\r\r[[[foo]]]: /url\r");

    assert_eq!(
        // from spec: <p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>
        [
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo"))))
            ),
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo")))),
              plain!(": /url")
            )
        ].as_slice(),
        body(&mut StringData::new("[[[foo]]]\r\r[[[foo]]]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8193
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8193>
/// <https://spec.commonmark.org/0.29/#example-544>
fn t544_cr_nl() {
    init!("[[[foo]]]\r\n\r\n[[[foo]]]: /url\r\n");

    assert_eq!(
        // from spec: <p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>
        [
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo"))))
            ),
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo")))),
              plain!(": /url")
            )
        ].as_slice(),
        body(&mut StringData::new("[[[foo]]]\r\n\r\n[[[foo]]]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8193
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8193>
/// <https://spec.commonmark.org/0.29/#example-544>
fn t544_no_nl() {
    init!("[[[foo]]]\n\n[[[foo]]]: /url");

    assert_eq!(
        // from spec: <p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>
        [
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo"))))
            ),
            paragraph!(
              linkref!(linkref!(linkref!(plain!("foo")))),
              plain!(": /url")
            )
        ].as_slice(),
        body(&mut StringData::new("[[[foo]]]\n\n[[[foo]]]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8193
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8193>
/// <https://spec.commonmark.org/0.29/#example-544>
fn t544_tab() {
    init!("[[[foo]]]\n\n[[[foo]]]:\t/url\n");

    assert_eq!(
        // from spec: <p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>
        [
            paragraph!(
            		linkref!(linkref!(linkref!(plain!("foo"))))
            ),
            paragraph!(
            		linkref!(linkref!(linkref!(plain!("foo")))),
            		plain!(":	/url")
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("[[[foo]]]\n\n[[[foo]]]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8203
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8203>
/// <https://spec.commonmark.org/0.29/#example-545>
fn t545() {
    init!("[foo][ref\\[]\n\n[ref\\[]: /uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo</a></p>
        [
            paragraph!(linkref!("ref[", plain!("foo"))),
            linkdef!("ref[", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo][ref\\[]\n\n[ref\\[]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8203
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8203>
/// <https://spec.commonmark.org/0.29/#example-545>
fn t545_cr() {
    init!("[foo][ref\\[]\r\r[ref\\[]: /uri\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo</a></p>
        [
            paragraph!(linkref!("ref[", plain!("foo"))),
            linkdef!("ref[", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo][ref\\[]\r\r[ref\\[]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8203
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8203>
/// <https://spec.commonmark.org/0.29/#example-545>
fn t545_cr_nl() {
    init!("[foo][ref\\[]\r\n\r\n[ref\\[]: /uri\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo</a></p>
        [
            paragraph!(linkref!("ref[", plain!("foo"))),
            linkdef!("ref[", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo][ref\\[]\r\n\r\n[ref\\[]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8203
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8203>
/// <https://spec.commonmark.org/0.29/#example-545>
fn t545_no_nl() {
    init!("[foo][ref\\[]\n\n[ref\\[]: /uri");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo</a></p>
        [
            paragraph!(linkref!("ref[", plain!("foo"))),
            linkdef!("ref[", "/uri")
        ].as_slice(),
        body(&mut StringData::new("[foo][ref\\[]\n\n[ref\\[]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8203
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8203>
/// <https://spec.commonmark.org/0.29/#example-545>
fn t545_tab() {
    init!("[foo][ref\\[]\n\n[ref\\[]:\t/uri\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">foo</a></p>
        [
            paragraph!(linkref!("ref[",	plain!("foo"))),
            linkdef!("ref[",	"/uri")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][ref\\[]\n\n[ref\\[]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8214>
/// <https://spec.commonmark.org/0.29/#example-546>
fn t546() {
    init!("[bar\\\\]: /uri\n\n[bar\\\\]\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">bar\\</a></p>
        [
            linkdef!(r"bar\\", "/uri"),
            paragraph!(linkref!(plain!("bar\\")))
        ].as_slice(),
        body(&mut StringData::new("[bar\\\\]: /uri\n\n[bar\\\\]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8214>
/// <https://spec.commonmark.org/0.29/#example-546>
fn t546_cr() {
    init!("[bar\\\\]: /uri\r\r[bar\\\\]\r");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">bar\\</a></p>
        [
            linkdef!(r"bar\\", "/uri"),
            paragraph!(linkref!(plain!("bar\\")))
        ].as_slice(),
        body(&mut StringData::new("[bar\\\\]: /uri\r\r[bar\\\\]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8214>
/// <https://spec.commonmark.org/0.29/#example-546>
fn t546_cr_nl() {
    init!("[bar\\\\]: /uri\r\n\r\n[bar\\\\]\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">bar\\</a></p>
        [
            linkdef!(r"bar\\", "/uri"),
            paragraph!(linkref!(plain!("bar\\")))
        ].as_slice(),
        body(&mut StringData::new("[bar\\\\]: /uri\r\n\r\n[bar\\\\]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8214>
/// <https://spec.commonmark.org/0.29/#example-546>
fn t546_no_nl() {
    init!("[bar\\\\]: /uri\n\n[bar\\\\]");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">bar\\</a></p>
        [
            linkdef!(r"bar\\", "/uri"),
            paragraph!(linkref!(plain!("bar\\")))
        ].as_slice(),
        body(&mut StringData::new("[bar\\\\]: /uri\n\n[bar\\\\]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8214
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8214>
/// <https://spec.commonmark.org/0.29/#example-546>
fn t546_tab() {
    init!("[bar\\\\]:\t/uri\n\n[bar\\\\]\n");

    assert_eq!(
        // from spec: <p><a href=\"/uri\">bar\\</a></p>
        [
            linkdef!(r"bar\\",	"/uri"),
            paragraph!(linkref!(plain!("bar\\")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[bar\\\\]:\t/uri\n\n[bar\\\\]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8225
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8225>
/// <https://spec.commonmark.org/0.29/#example-547>
fn t547() {
    init!("[]\n\n[]: /uri\n");

    assert_eq!(
        // from spec: <p>[]</p>\n<p>[]: /uri</p>
        [
            paragraph!(plain!("[]")), paragraph!(plain!("[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[]\n\n[]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8225
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8225>
/// <https://spec.commonmark.org/0.29/#example-547>
fn t547_cr() {
    init!("[]\r\r[]: /uri\r");

    assert_eq!(
        // from spec: <p>[]</p>\n<p>[]: /uri</p>
        [
            paragraph!(plain!("[]")), paragraph!(plain!("[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[]\r\r[]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8225
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8225>
/// <https://spec.commonmark.org/0.29/#example-547>
fn t547_cr_nl() {
    init!("[]\r\n\r\n[]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[]</p>\n<p>[]: /uri</p>
        [
            paragraph!(plain!("[]")), paragraph!(plain!("[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[]\r\n\r\n[]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8225
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8225>
/// <https://spec.commonmark.org/0.29/#example-547>
fn t547_no_nl() {
    init!("[]\n\n[]: /uri");

    assert_eq!(
        // from spec: <p>[]</p>\n<p>[]: /uri</p>
        [
            paragraph!(plain!("[]")), paragraph!(plain!("[]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[]\n\n[]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8225
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8225>
/// <https://spec.commonmark.org/0.29/#example-547>
fn t547_tab() {
    init!("[]\n\n[]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[]</p>\n<p>[]: /uri</p>
        [
            paragraph!(plain!("[]")), paragraph!(plain!("[]:	/uri"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[]\n\n[]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8235
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8235>
/// <https://spec.commonmark.org/0.29/#example-548>
fn t548() {
    init!("[\n ]\n\n[\n ]: /uri\n");

    assert_eq!(
        // from spec: <p>[\n]</p>\n<p>[\n]: /uri</p>
        [
            paragraph!(plain!("["), SoftBreak, plain!("]")), paragraph!(plain!("["), SoftBreak, plain!("]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[\n ]\n\n[\n ]: /uri\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8235
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8235>
/// <https://spec.commonmark.org/0.29/#example-548>
fn t548_cr() {
    init!("[\r ]\r\r[\r ]: /uri\r");

    assert_eq!(
        // from spec: <p>[\n]</p>\n<p>[\n]: /uri</p>
        [
            paragraph!(plain!("["), SoftBreak, plain!("]")), paragraph!(plain!("["), SoftBreak, plain!("]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[\r ]\r\r[\r ]: /uri\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8235
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8235>
/// <https://spec.commonmark.org/0.29/#example-548>
fn t548_cr_nl() {
    init!("[\r\n ]\r\n\r\n[\r\n ]: /uri\r\n");

    assert_eq!(
        // from spec: <p>[\n]</p>\n<p>[\n]: /uri</p>
        [
            paragraph!(plain!("["), SoftBreak, plain!("]")), paragraph!(plain!("["), SoftBreak, plain!("]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[\r\n ]\r\n\r\n[\r\n ]: /uri\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8235
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8235>
/// <https://spec.commonmark.org/0.29/#example-548>
fn t548_no_nl() {
    init!("[\n ]\n\n[\n ]: /uri");

    assert_eq!(
        // from spec: <p>[\n]</p>\n<p>[\n]: /uri</p>
        [
            paragraph!(plain!("["), SoftBreak, plain!("]")), paragraph!(plain!("["), SoftBreak, plain!("]: /uri"))
        ].as_slice(),
        body(&mut StringData::new("[\n ]\n\n[\n ]: /uri", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8235
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8235>
/// <https://spec.commonmark.org/0.29/#example-548>
fn t548_tab() {
    init!("[\n ]\n\n[\n ]:\t/uri\n");

    assert_eq!(
        // from spec: <p>[\n]</p>\n<p>[\n]: /uri</p>
        [
            paragraph!(plain!("["), SoftBreak, plain!("]")), paragraph!(plain!("["), SoftBreak, plain!("]:	/uri"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[\n ]\n\n[\n ]:\t/uri\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8258>
/// <https://spec.commonmark.org/0.29/#example-549>
fn t549() {
    init!("[foo][]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8258>
/// <https://spec.commonmark.org/0.29/#example-549>
fn t549_cr() {
    init!("[foo][]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8258>
/// <https://spec.commonmark.org/0.29/#example-549>
fn t549_cr_nl() {
    init!("[foo][]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8258>
/// <https://spec.commonmark.org/0.29/#example-549>
fn t549_no_nl() {
    init!("[foo][]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8258>
/// <https://spec.commonmark.org/0.29/#example-549>
fn t549_tab() {
    init!("[foo][]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8267>
/// <https://spec.commonmark.org/0.29/#example-550>
fn t550() {
    init!("[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8267>
/// <https://spec.commonmark.org/0.29/#example-550>
fn t550_cr() {
    init!("[*foo* bar][]\r\r[*foo* bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar][]\r\r[*foo* bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8267>
/// <https://spec.commonmark.org/0.29/#example-550>
fn t550_cr_nl() {
    init!("[*foo* bar][]\r\n\r\n[*foo* bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar][]\r\n\r\n[*foo* bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8267>
/// <https://spec.commonmark.org/0.29/#example-550>
fn t550_no_nl() {
    init!("[*foo* bar][]\n\n[*foo* bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar][]\n\n[*foo* bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8267>
/// <https://spec.commonmark.org/0.29/#example-550>
fn t550_tab() {
    init!("[*foo*\tbar][]\n\n[*foo*\tbar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")),	plain!("	bar"))),
            linkdef!("*foo*	bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[*foo*\tbar][]\n\n[*foo*\tbar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8278>
/// <https://spec.commonmark.org/0.29/#example-551>
fn t551() {
    init!("[Foo][]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo][]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8278>
/// <https://spec.commonmark.org/0.29/#example-551>
fn t551_cr() {
    init!("[Foo][]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo][]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8278>
/// <https://spec.commonmark.org/0.29/#example-551>
fn t551_cr_nl() {
    init!("[Foo][]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo][]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8278>
/// <https://spec.commonmark.org/0.29/#example-551>
fn t551_no_nl() {
    init!("[Foo][]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo][]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8278
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8278>
/// <https://spec.commonmark.org/0.29/#example-551>
fn t551_tab() {
    init!("[Foo][]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[Foo][]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8291>
/// <https://spec.commonmark.org/0.29/#example-552>
fn t552() {
    init!("[foo] \n[]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] \n[]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8291>
/// <https://spec.commonmark.org/0.29/#example-552>
fn t552_cr() {
    init!("[foo] \r[]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] \r[]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8291>
/// <https://spec.commonmark.org/0.29/#example-552>
fn t552_cr_nl() {
    init!("[foo] \r\n[]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] \r\n[]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8291
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8291>
/// <https://spec.commonmark.org/0.29/#example-552>
fn t552_no_nl() {
    init!("[foo] \n[]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>
        [
            paragraph!(linkref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo] \n[]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8311
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8311>
/// <https://spec.commonmark.org/0.29/#example-553>
fn t553() {
    init!("[foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8311
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8311>
/// <https://spec.commonmark.org/0.29/#example-553>
fn t553_cr() {
    init!("[foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8311
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8311>
/// <https://spec.commonmark.org/0.29/#example-553>
fn t553_cr_nl() {
    init!("[foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8311
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8311>
/// <https://spec.commonmark.org/0.29/#example-553>
fn t553_no_nl() {
    init!("[foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8311
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8311>
/// <https://spec.commonmark.org/0.29/#example-553>
fn t553_tab() {
    init!("[foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8320
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8320>
/// <https://spec.commonmark.org/0.29/#example-554>
fn t554() {
    init!("[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8320
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8320>
/// <https://spec.commonmark.org/0.29/#example-554>
fn t554_cr() {
    init!("[*foo* bar]\r\r[*foo* bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar]\r\r[*foo* bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8320
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8320>
/// <https://spec.commonmark.org/0.29/#example-554>
fn t554_cr_nl() {
    init!("[*foo* bar]\r\n\r\n[*foo* bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar]\r\n\r\n[*foo* bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8320
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8320>
/// <https://spec.commonmark.org/0.29/#example-554>
fn t554_no_nl() {
    init!("[*foo* bar]\n\n[*foo* bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[*foo* bar]\n\n[*foo* bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8320
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8320>
/// <https://spec.commonmark.org/0.29/#example-554>
fn t554_tab() {
    init!("[*foo*\tbar]\n\n[*foo*\tbar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>
        [
            paragraph!(linkref!(emph!(plain!("foo")),	plain!("	bar"))),
            linkdef!("*foo*	bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[*foo*\tbar]\n\n[*foo*\tbar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8329
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8329>
/// <https://spec.commonmark.org/0.29/#example-555>
fn t555() {
    init!("[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>
        [
            paragraph!(
              linkref!(
                linkref!(emph!(plain!("foo")), plain!(" bar"))
              )
            ),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8329
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8329>
/// <https://spec.commonmark.org/0.29/#example-555>
fn t555_cr() {
    init!("[[*foo* bar]]\r\r[*foo* bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>
        [
            paragraph!(
              linkref!(
                linkref!(emph!(plain!("foo")), plain!(" bar"))
              )
            ),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[[*foo* bar]]\r\r[*foo* bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8329
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8329>
/// <https://spec.commonmark.org/0.29/#example-555>
fn t555_cr_nl() {
    init!("[[*foo* bar]]\r\n\r\n[*foo* bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>
        [
            paragraph!(
              linkref!(
                linkref!(emph!(plain!("foo")), plain!(" bar"))
              )
            ),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[[*foo* bar]]\r\n\r\n[*foo* bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8329
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8329>
/// <https://spec.commonmark.org/0.29/#example-555>
fn t555_no_nl() {
    init!("[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>
        [
            paragraph!(
              linkref!(
                linkref!(emph!(plain!("foo")), plain!(" bar"))
              )
            ),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8329
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8329>
/// <https://spec.commonmark.org/0.29/#example-555>
fn t555_tab() {
    init!("[[*foo*\tbar]]\n\n[*foo*\tbar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>
        [
            paragraph!(
            		linkref!(
            				linkref!(emph!(plain!("foo")),	plain!("	bar"))
            		)
            ),
            linkdef!("*foo*	bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[[*foo*\tbar]]\n\n[*foo*\tbar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8338>
/// <https://spec.commonmark.org/0.29/#example-556>
fn t556() {
    init!("[[bar [foo]\n\n[foo]: /url\n");

    assert_eq!(
        // from spec: <p>[[bar <a href=\"/url\">foo</a></p>
        [
            paragraph!(
              plain!("[[bar "), linkref!(plain!("foo"))
            ),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[[bar [foo]\n\n[foo]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8338>
/// <https://spec.commonmark.org/0.29/#example-556>
fn t556_cr() {
    init!("[[bar [foo]\r\r[foo]: /url\r");

    assert_eq!(
        // from spec: <p>[[bar <a href=\"/url\">foo</a></p>
        [
            paragraph!(
              plain!("[[bar "), linkref!(plain!("foo"))
            ),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[[bar [foo]\r\r[foo]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8338>
/// <https://spec.commonmark.org/0.29/#example-556>
fn t556_cr_nl() {
    init!("[[bar [foo]\r\n\r\n[foo]: /url\r\n");

    assert_eq!(
        // from spec: <p>[[bar <a href=\"/url\">foo</a></p>
        [
            paragraph!(
              plain!("[[bar "), linkref!(plain!("foo"))
            ),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[[bar [foo]\r\n\r\n[foo]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8338>
/// <https://spec.commonmark.org/0.29/#example-556>
fn t556_no_nl() {
    init!("[[bar [foo]\n\n[foo]: /url");

    assert_eq!(
        // from spec: <p>[[bar <a href=\"/url\">foo</a></p>
        [
            paragraph!(
              plain!("[[bar "), linkref!(plain!("foo"))
            ),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[[bar [foo]\n\n[foo]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8338
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8338>
/// <https://spec.commonmark.org/0.29/#example-556>
fn t556_tab() {
    init!("[[bar\t[foo]\n\n[foo]:\t/url\n");

    assert_eq!(
        // from spec: <p>[[bar <a href=\"/url\">foo</a></p>
        [
            paragraph!(
            		plain!("[[bar	"),	linkref!(plain!("foo"))
            ),
            linkdef!("foo",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[[bar\t[foo]\n\n[foo]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8349
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8349>
/// <https://spec.commonmark.org/0.29/#example-557>
fn t557() {
    init!("[Foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8349
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8349>
/// <https://spec.commonmark.org/0.29/#example-557>
fn t557_cr() {
    init!("[Foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8349
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8349>
/// <https://spec.commonmark.org/0.29/#example-557>
fn t557_cr_nl() {
    init!("[Foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8349
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8349>
/// <https://spec.commonmark.org/0.29/#example-557>
fn t557_no_nl() {
    init!("[Foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("[Foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8349
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8349>
/// <https://spec.commonmark.org/0.29/#example-557>
fn t557_tab() {
    init!("[Foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\" title=\"title\">Foo</a></p>
        [
            paragraph!(linkref!(plain!("Foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[Foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8360
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8360>
/// <https://spec.commonmark.org/0.29/#example-558>
fn t558() {
    init!("[foo] bar\n\n[foo]: /url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a> bar</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" bar")),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo] bar\n\n[foo]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8360
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8360>
/// <https://spec.commonmark.org/0.29/#example-558>
fn t558_cr() {
    init!("[foo] bar\r\r[foo]: /url\r");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a> bar</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" bar")),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo] bar\r\r[foo]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8360
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8360>
/// <https://spec.commonmark.org/0.29/#example-558>
fn t558_cr_nl() {
    init!("[foo] bar\r\n\r\n[foo]: /url\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a> bar</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" bar")),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo] bar\r\n\r\n[foo]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8360
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8360>
/// <https://spec.commonmark.org/0.29/#example-558>
fn t558_no_nl() {
    init!("[foo] bar\n\n[foo]: /url");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a> bar</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!(" bar")),
            linkdef!("foo", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo] bar\n\n[foo]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8360
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8360>
/// <https://spec.commonmark.org/0.29/#example-558>
fn t558_tab() {
    init!("[foo]\tbar\n\n[foo]:\t/url\n");

    assert_eq!(
        // from spec: <p><a href=\"/url\">foo</a> bar</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!("	bar")),
            linkdef!("foo",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]\tbar\n\n[foo]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8372
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8372>
/// <https://spec.commonmark.org/0.29/#example-559>
fn t559() {
    init!("\\[foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>[foo]</p>
        [
            paragraph!(plain!("[foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\[foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8372
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8372>
/// <https://spec.commonmark.org/0.29/#example-559>
fn t559_cr() {
    init!("\\[foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>[foo]</p>
        [
            paragraph!(plain!("[foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\[foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8372
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8372>
/// <https://spec.commonmark.org/0.29/#example-559>
fn t559_cr_nl() {
    init!("\\[foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>[foo]</p>
        [
            paragraph!(plain!("[foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\[foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8372
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8372>
/// <https://spec.commonmark.org/0.29/#example-559>
fn t559_no_nl() {
    init!("\\[foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p>[foo]</p>
        [
            paragraph!(plain!("[foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\[foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8372
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8372>
/// <https://spec.commonmark.org/0.29/#example-559>
fn t559_tab() {
    init!("\\[foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>[foo]</p>
        [
            paragraph!(plain!("[foo]")),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\[foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8384
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8384>
/// <https://spec.commonmark.org/0.29/#example-560>
fn t560() {
    init!("[foo*]: /url\n\n*[foo*]\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">foo*</a></p>
        [
            linkdef!("foo*", "/url"),
            paragraph!(emph!(plain!("[foo")), plain!("]"))
        ].as_slice(),
        body(&mut StringData::new("[foo*]: /url\n\n*[foo*]\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8384
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8384>
/// <https://spec.commonmark.org/0.29/#example-560>
fn t560_cr() {
    init!("[foo*]: /url\r\r*[foo*]\r");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">foo*</a></p>
        [
            linkdef!("foo*", "/url"),
            paragraph!(emph!(plain!("[foo")), plain!("]"))
        ].as_slice(),
        body(&mut StringData::new("[foo*]: /url\r\r*[foo*]\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8384
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8384>
/// <https://spec.commonmark.org/0.29/#example-560>
fn t560_cr_nl() {
    init!("[foo*]: /url\r\n\r\n*[foo*]\r\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">foo*</a></p>
        [
            linkdef!("foo*", "/url"),
            paragraph!(emph!(plain!("[foo")), plain!("]"))
        ].as_slice(),
        body(&mut StringData::new("[foo*]: /url\r\n\r\n*[foo*]\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8384
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8384>
/// <https://spec.commonmark.org/0.29/#example-560>
fn t560_no_nl() {
    init!("[foo*]: /url\n\n*[foo*]");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">foo*</a></p>
        [
            linkdef!("foo*", "/url"),
            paragraph!(emph!(plain!("[foo")), plain!("]"))
        ].as_slice(),
        body(&mut StringData::new("[foo*]: /url\n\n*[foo*]", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8384
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8384>
/// <https://spec.commonmark.org/0.29/#example-560>
fn t560_tab() {
    init!("[foo*]:\t/url\n\n*[foo*]\n");

    assert_eq!(
        // from spec: <p>*<a href=\"/url\">foo*</a></p>
        [
            linkdef!("foo*",	"/url"),
            paragraph!(emph!(plain!("[foo")),	plain!("]"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo*]:\t/url\n\n*[foo*]\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8396
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8396>
/// <https://spec.commonmark.org/0.29/#example-561>
fn t561() {
    init!("[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("foo", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8396
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8396>
/// <https://spec.commonmark.org/0.29/#example-561>
fn t561_cr() {
    init!("[foo][bar]\r\r[foo]: /url1\r[bar]: /url2\r");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("foo", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\r\r[foo]: /url1\r[bar]: /url2\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8396
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8396>
/// <https://spec.commonmark.org/0.29/#example-561>
fn t561_cr_nl() {
    init!("[foo][bar]\r\n\r\n[foo]: /url1\r\n[bar]: /url2\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("foo", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\r\n\r\n[foo]: /url1\r\n[bar]: /url2\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8396
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8396>
/// <https://spec.commonmark.org/0.29/#example-561>
fn t561_no_nl() {
    init!("[foo][bar]\n\n[foo]: /url1\n[bar]: /url2");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo"))),
            linkdef!("foo", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar]\n\n[foo]: /url1\n[bar]: /url2", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8396
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8396>
/// <https://spec.commonmark.org/0.29/#example-561>
fn t561_tab() {
    init!("[foo][bar]\n\n[foo]:\t/url1\n[bar]:\t/url2\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a></p>
        [
            paragraph!(linkref!("bar",	plain!("foo"))),
            linkdef!("foo",	"/url1"),
            linkdef!("bar",	"/url2")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][bar]\n\n[foo]:\t/url1\n[bar]:\t/url2\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8405
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8405>
/// <https://spec.commonmark.org/0.29/#example-562>
fn t562() {
    init!("[foo][]\n\n[foo]: /url1\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\n\n[foo]: /url1\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8405
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8405>
/// <https://spec.commonmark.org/0.29/#example-562>
fn t562_cr() {
    init!("[foo][]\r\r[foo]: /url1\r");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\r\r[foo]: /url1\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8405
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8405>
/// <https://spec.commonmark.org/0.29/#example-562>
fn t562_cr_nl() {
    init!("[foo][]\r\n\r\n[foo]: /url1\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\r\n\r\n[foo]: /url1\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8405
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8405>
/// <https://spec.commonmark.org/0.29/#example-562>
fn t562_no_nl() {
    init!("[foo][]\n\n[foo]: /url1");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo][]\n\n[foo]: /url1", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8405
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8405>
/// <https://spec.commonmark.org/0.29/#example-562>
fn t562_tab() {
    init!("[foo][]\n\n[foo]:\t/url1\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a></p>
        [
            paragraph!(linkref!(plain!("foo"))),
            linkdef!("foo",	"/url1")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][]\n\n[foo]:\t/url1\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8415>
/// <https://spec.commonmark.org/0.29/#example-563>
fn t563() {
    init!("[foo]()\n\n[foo]: /url1\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            paragraph!(link!("", "", plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo]()\n\n[foo]: /url1\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8415>
/// <https://spec.commonmark.org/0.29/#example-563>
fn t563_cr() {
    init!("[foo]()\r\r[foo]: /url1\r");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            paragraph!(link!("", "", plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo]()\r\r[foo]: /url1\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8415>
/// <https://spec.commonmark.org/0.29/#example-563>
fn t563_cr_nl() {
    init!("[foo]()\r\n\r\n[foo]: /url1\r\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            paragraph!(link!("", "", plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo]()\r\n\r\n[foo]: /url1\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8415>
/// <https://spec.commonmark.org/0.29/#example-563>
fn t563_no_nl() {
    init!("[foo]()\n\n[foo]: /url1");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            paragraph!(link!("", "", plain!("foo"))),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo]()\n\n[foo]: /url1", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8415
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8415>
/// <https://spec.commonmark.org/0.29/#example-563>
fn t563_tab() {
    init!("[foo]()\n\n[foo]:\t/url1\n");

    assert_eq!(
        // from spec: <p><a href=\"\">foo</a></p>
        [
            paragraph!(link!("",	"",	plain!("foo"))),
            linkdef!("foo",	"/url1")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo]()\n\n[foo]:\t/url1\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8423>
/// <https://spec.commonmark.org/0.29/#example-564>
fn t564() {
    init!("[foo](not a link)\n\n[foo]: /url1\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a>(not a link)</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("(not a link)")),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo](not a link)\n\n[foo]: /url1\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8423>
/// <https://spec.commonmark.org/0.29/#example-564>
fn t564_cr() {
    init!("[foo](not a link)\r\r[foo]: /url1\r");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a>(not a link)</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("(not a link)")),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo](not a link)\r\r[foo]: /url1\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8423>
/// <https://spec.commonmark.org/0.29/#example-564>
fn t564_cr_nl() {
    init!("[foo](not a link)\r\n\r\n[foo]: /url1\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a>(not a link)</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("(not a link)")),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo](not a link)\r\n\r\n[foo]: /url1\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8423>
/// <https://spec.commonmark.org/0.29/#example-564>
fn t564_no_nl() {
    init!("[foo](not a link)\n\n[foo]: /url1");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a>(not a link)</p>
        [
            paragraph!(linkref!(plain!("foo")), plain!("(not a link)")),
            linkdef!("foo", "/url1")
        ].as_slice(),
        body(&mut StringData::new("[foo](not a link)\n\n[foo]: /url1", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8423
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8423>
/// <https://spec.commonmark.org/0.29/#example-564>
fn t564_tab() {
    init!("[foo](not\ta\tlink)\n\n[foo]:\t/url1\n");

    assert_eq!(
        // from spec: <p><a href=\"/url1\">foo</a>(not a link)</p>
        [
            paragraph!(linkref!(plain!("foo")),	plain!("(not	a	link)")),
            linkdef!("foo",	"/url1")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo](not\ta\tlink)\n\n[foo]:\t/url1\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8434
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8434>
/// <https://spec.commonmark.org/0.29/#example-565>
fn t565() {
    init!("[foo][bar][baz]\n\n[baz]: /url\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url\">bar</a></p>
        [
            // This is a violation of the spec, because the parser doesn't know which
            // labels are valid while parsing. The spec expects
            // `linkref!(plain!("foo")), linkref!("baz", plain!("bar"))`
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8434
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8434>
/// <https://spec.commonmark.org/0.29/#example-565>
fn t565_cr() {
    init!("[foo][bar][baz]\r\r[baz]: /url\r");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url\">bar</a></p>
        [
            // This is a violation of the spec, because the parser doesn't know which
            // labels are valid while parsing. The spec expects
            // `linkref!(plain!("foo")), linkref!("baz", plain!("bar"))`
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\r[baz]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8434
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8434>
/// <https://spec.commonmark.org/0.29/#example-565>
fn t565_cr_nl() {
    init!("[foo][bar][baz]\r\n\r\n[baz]: /url\r\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url\">bar</a></p>
        [
            // This is a violation of the spec, because the parser doesn't know which
            // labels are valid while parsing. The spec expects
            // `linkref!(plain!("foo")), linkref!("baz", plain!("bar"))`
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\n\r\n[baz]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8434
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8434>
/// <https://spec.commonmark.org/0.29/#example-565>
fn t565_no_nl() {
    init!("[foo][bar][baz]\n\n[baz]: /url");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url\">bar</a></p>
        [
            // This is a violation of the spec, because the parser doesn't know which
            // labels are valid while parsing. The spec expects
            // `linkref!(plain!("foo")), linkref!("baz", plain!("bar"))`
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8434
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8434>
/// <https://spec.commonmark.org/0.29/#example-565>
fn t565_tab() {
    init!("[foo][bar][baz]\n\n[baz]:\t/url\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url\">bar</a></p>
        [
            //	This	is	a	violation	of	the	spec,	because	the	parser	doesn't	know	which
            //	labels	are	valid	while	parsing.	The	spec	expects
            //	`linkref!(plain!("foo")),	linkref!("baz",	plain!("bar"))`
            paragraph!(linkref!("bar",	plain!("foo")),	linkref!(plain!("baz"))),
            linkdef!("baz",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][bar][baz]\n\n[baz]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8446
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8446>
/// <https://spec.commonmark.org/0.29/#example-566>
fn t566() {
    init!("[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8446
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8446>
/// <https://spec.commonmark.org/0.29/#example-566>
fn t566_cr() {
    init!("[foo][bar][baz]\r\r[baz]: /url1\r[bar]: /url2\r");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\r[baz]: /url1\r[bar]: /url2\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8446
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8446>
/// <https://spec.commonmark.org/0.29/#example-566>
fn t566_cr_nl() {
    init!("[foo][bar][baz]\r\n\r\n[baz]: /url1\r\n[bar]: /url2\r\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\n\r\n[baz]: /url1\r\n[bar]: /url2\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8446
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8446>
/// <https://spec.commonmark.org/0.29/#example-566>
fn t566_no_nl() {
    init!("[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>
        [
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("bar", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8446
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8446>
/// <https://spec.commonmark.org/0.29/#example-566>
fn t566_tab() {
    init!("[foo][bar][baz]\n\n[baz]:\t/url1\n[bar]:\t/url2\n");

    assert_eq!(
        // from spec: <p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>
        [
            paragraph!(linkref!("bar",	plain!("foo")),	linkref!(plain!("baz"))),
            linkdef!("baz",	"/url1"),
            linkdef!("bar",	"/url2")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][bar][baz]\n\n[baz]:\t/url1\n[bar]:\t/url2\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8459
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8459>
/// <https://spec.commonmark.org/0.29/#example-567>
fn t567() {
    init!("[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url1\">bar</a></p>
        [
            // This is a violation of the spec, because we don't know which labels are
            // valid during parsing
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("foo", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8459
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8459>
/// <https://spec.commonmark.org/0.29/#example-567>
fn t567_cr() {
    init!("[foo][bar][baz]\r\r[baz]: /url1\r[foo]: /url2\r");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url1\">bar</a></p>
        [
            // This is a violation of the spec, because we don't know which labels are
            // valid during parsing
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("foo", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\r[baz]: /url1\r[foo]: /url2\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8459
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8459>
/// <https://spec.commonmark.org/0.29/#example-567>
fn t567_cr_nl() {
    init!("[foo][bar][baz]\r\n\r\n[baz]: /url1\r\n[foo]: /url2\r\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url1\">bar</a></p>
        [
            // This is a violation of the spec, because we don't know which labels are
            // valid during parsing
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("foo", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\r\n\r\n[baz]: /url1\r\n[foo]: /url2\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8459
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8459>
/// <https://spec.commonmark.org/0.29/#example-567>
fn t567_no_nl() {
    init!("[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url1\">bar</a></p>
        [
            // This is a violation of the spec, because we don't know which labels are
            // valid during parsing
            paragraph!(linkref!("bar", plain!("foo")), linkref!(plain!("baz"))),
            linkdef!("baz", "/url1"),
            linkdef!("foo", "/url2")
        ].as_slice(),
        body(&mut StringData::new("[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8459
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8459>
/// <https://spec.commonmark.org/0.29/#example-567>
fn t567_tab() {
    init!("[foo][bar][baz]\n\n[baz]:\t/url1\n[foo]:\t/url2\n");

    assert_eq!(
        // from spec: <p>[foo]<a href=\"/url1\">bar</a></p>
        [
            //	This	is	a	violation	of	the	spec,	because	we	don't	know	which	labels	are
            //	valid	during	parsing
            paragraph!(linkref!("bar",	plain!("foo")),	linkref!(plain!("baz"))),
            linkdef!("baz",	"/url1"),
            linkdef!("foo",	"/url2")
        ].as_slice(),
        space2tab(body(&mut StringData::new("[foo][bar][baz]\n\n[baz]:\t/url1\n[foo]:\t/url2\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8482>
/// <https://spec.commonmark.org/0.29/#example-568>
fn t568() {
    init!("![foo](/url \"title\")\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(image!("/url", "title", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](/url \"title\")\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8482>
/// <https://spec.commonmark.org/0.29/#example-568>
fn t568_cr() {
    init!("![foo](/url \"title\")\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(image!("/url", "title", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](/url \"title\")\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8482>
/// <https://spec.commonmark.org/0.29/#example-568>
fn t568_cr_nl() {
    init!("![foo](/url \"title\")\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(image!("/url", "title", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](/url \"title\")\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8482>
/// <https://spec.commonmark.org/0.29/#example-568>
fn t568_no_nl() {
    init!("![foo](/url \"title\")");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(image!("/url", "title", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](/url \"title\")", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8482
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8482>
/// <https://spec.commonmark.org/0.29/#example-568>
fn t568_tab() {
    init!("![foo](/url\t\"title\")\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(image!("/url", "title", plain!("foo")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo](/url\t\"title\")\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8489
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8489>
/// <https://spec.commonmark.org/0.29/#example-569>
fn t569() {
    init!("![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8489
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8489>
/// <https://spec.commonmark.org/0.29/#example-569>
fn t569_cr() {
    init!("![foo *bar*]\r\r[foo *bar*]: train.jpg \"train & tracks\"\r");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*]\r\r[foo *bar*]: train.jpg \"train & tracks\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8489
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8489>
/// <https://spec.commonmark.org/0.29/#example-569>
fn t569_cr_nl() {
    init!("![foo *bar*]\r\n\r\n[foo *bar*]: train.jpg \"train & tracks\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*]\r\n\r\n[foo *bar*]: train.jpg \"train & tracks\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8489
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8489>
/// <https://spec.commonmark.org/0.29/#example-569>
fn t569_no_nl() {
    init!("![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8489
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8489>
/// <https://spec.commonmark.org/0.29/#example-569>
fn t569_tab() {
    init!("![foo\t*bar*]\n\n[foo\t*bar*]:\ttrain.jpg\t\"train\t&\ttracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo	"),	emph!(plain!("bar")))),
            linkdef!("foo	*bar*",	"train.jpg",	"train	&	tracks")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo\t*bar*]\n\n[foo\t*bar*]:\ttrain.jpg\t\"train\t&\ttracks\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8498
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8498>
/// <https://spec.commonmark.org/0.29/#example-570>
fn t570() {
    init!("![foo ![bar](/url)](/url2)\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), image!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo ![bar](/url)](/url2)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8498
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8498>
/// <https://spec.commonmark.org/0.29/#example-570>
fn t570_cr() {
    init!("![foo ![bar](/url)](/url2)\r");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), image!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo ![bar](/url)](/url2)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8498
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8498>
/// <https://spec.commonmark.org/0.29/#example-570>
fn t570_cr_nl() {
    init!("![foo ![bar](/url)](/url2)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), image!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo ![bar](/url)](/url2)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8498
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8498>
/// <https://spec.commonmark.org/0.29/#example-570>
fn t570_no_nl() {
    init!("![foo ![bar](/url)](/url2)");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), image!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo ![bar](/url)](/url2)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8498
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8498>
/// <https://spec.commonmark.org/0.29/#example-570>
fn t570_tab() {
    init!("![foo\t![bar](/url)](/url2)\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2",	"",	plain!("foo	"),	image!("/url",	"",	plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo\t![bar](/url)](/url2)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8505
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8505>
/// <https://spec.commonmark.org/0.29/#example-571>
fn t571() {
    init!("![foo [bar](/url)](/url2)\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo [bar](/url)](/url2)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8505
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8505>
/// <https://spec.commonmark.org/0.29/#example-571>
fn t571_cr() {
    init!("![foo [bar](/url)](/url2)\r");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo [bar](/url)](/url2)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8505
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8505>
/// <https://spec.commonmark.org/0.29/#example-571>
fn t571_cr_nl() {
    init!("![foo [bar](/url)](/url2)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo [bar](/url)](/url2)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8505
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8505>
/// <https://spec.commonmark.org/0.29/#example-571>
fn t571_no_nl() {
    init!("![foo [bar](/url)](/url2)");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2", "", plain!("foo "), link!("/url", "", plain!("bar"))))
        ].as_slice(),
        body(&mut StringData::new("![foo [bar](/url)](/url2)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8505
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8505>
/// <https://spec.commonmark.org/0.29/#example-571>
fn t571_tab() {
    init!("![foo\t[bar](/url)](/url2)\n");

    assert_eq!(
        // from spec: <p><img src=\"/url2\" alt=\"foo bar\" /></p>
        [
            paragraph!(image!("/url2",	"",	plain!("foo	"),	link!("/url",	"",	plain!("bar"))))
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo\t[bar](/url)](/url2)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8519
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8519>
/// <https://spec.commonmark.org/0.29/#example-572>
fn t572() {
    init!("![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8519
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8519>
/// <https://spec.commonmark.org/0.29/#example-572>
fn t572_cr() {
    init!("![foo *bar*][]\r\r[foo *bar*]: train.jpg \"train & tracks\"\r");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][]\r\r[foo *bar*]: train.jpg \"train & tracks\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8519
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8519>
/// <https://spec.commonmark.org/0.29/#example-572>
fn t572_cr_nl() {
    init!("![foo *bar*][]\r\n\r\n[foo *bar*]: train.jpg \"train & tracks\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][]\r\n\r\n[foo *bar*]: train.jpg \"train & tracks\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8519
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8519>
/// <https://spec.commonmark.org/0.29/#example-572>
fn t572_no_nl() {
    init!("![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo "), emph!(plain!("bar")))),
            linkdef!("foo *bar*", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8519
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8519>
/// <https://spec.commonmark.org/0.29/#example-572>
fn t572_tab() {
    init!("![foo\t*bar*][]\n\n[foo\t*bar*]:\ttrain.jpg\t\"train\t&\ttracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!(plain!("foo	"),	emph!(plain!("bar")))),
            linkdef!("foo	*bar*",	"train.jpg",	"train	&	tracks")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo\t*bar*][]\n\n[foo\t*bar*]:\ttrain.jpg\t\"train\t&\ttracks\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8528>
/// <https://spec.commonmark.org/0.29/#example-573>
fn t573() {
    init!("![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!("foobar", plain!("foo "), emph!(plain!("bar")))),
            linkdef!("FOOBAR", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8528>
/// <https://spec.commonmark.org/0.29/#example-573>
fn t573_cr() {
    init!("![foo *bar*][foobar]\r\r[FOOBAR]: train.jpg \"train & tracks\"\r");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!("foobar", plain!("foo "), emph!(plain!("bar")))),
            linkdef!("FOOBAR", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][foobar]\r\r[FOOBAR]: train.jpg \"train & tracks\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8528>
/// <https://spec.commonmark.org/0.29/#example-573>
fn t573_cr_nl() {
    init!("![foo *bar*][foobar]\r\n\r\n[FOOBAR]: train.jpg \"train & tracks\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!("foobar", plain!("foo "), emph!(plain!("bar")))),
            linkdef!("FOOBAR", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][foobar]\r\n\r\n[FOOBAR]: train.jpg \"train & tracks\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8528>
/// <https://spec.commonmark.org/0.29/#example-573>
fn t573_no_nl() {
    init!("![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!("foobar", plain!("foo "), emph!(plain!("bar")))),
            linkdef!("FOOBAR", "train.jpg", "train & tracks")
        ].as_slice(),
        body(&mut StringData::new("![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8528
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8528>
/// <https://spec.commonmark.org/0.29/#example-573>
fn t573_tab() {
    init!("![foo\t*bar*][foobar]\n\n[FOOBAR]:\ttrain.jpg\t\"train\t&\ttracks\"\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>
        [
            paragraph!(imageref!("foobar",	plain!("foo	"),	emph!(plain!("bar")))),
            linkdef!("FOOBAR",	"train.jpg",	"train	&	tracks")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo\t*bar*][foobar]\n\n[FOOBAR]:\ttrain.jpg\t\"train\t&\ttracks\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8537>
/// <https://spec.commonmark.org/0.29/#example-574>
fn t574() {
    init!("![foo](train.jpg)\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo\" /></p>
        [
            paragraph!(image!("train.jpg", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](train.jpg)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8537>
/// <https://spec.commonmark.org/0.29/#example-574>
fn t574_cr() {
    init!("![foo](train.jpg)\r");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo\" /></p>
        [
            paragraph!(image!("train.jpg", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](train.jpg)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8537>
/// <https://spec.commonmark.org/0.29/#example-574>
fn t574_cr_nl() {
    init!("![foo](train.jpg)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo\" /></p>
        [
            paragraph!(image!("train.jpg", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](train.jpg)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8537
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8537>
/// <https://spec.commonmark.org/0.29/#example-574>
fn t574_no_nl() {
    init!("![foo](train.jpg)");

    assert_eq!(
        // from spec: <p><img src=\"train.jpg\" alt=\"foo\" /></p>
        [
            paragraph!(image!("train.jpg", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](train.jpg)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8544
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8544>
/// <https://spec.commonmark.org/0.29/#example-575>
fn t575() {
    init!("My ![foo bar](/path/to/train.jpg  \"title\"   )\n");

    assert_eq!(
        // from spec: <p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(plain!("My "), image!("/path/to/train.jpg", "title", plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("My ![foo bar](/path/to/train.jpg  \"title\"   )\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8544
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8544>
/// <https://spec.commonmark.org/0.29/#example-575>
fn t575_cr() {
    init!("My ![foo bar](/path/to/train.jpg  \"title\"   )\r");

    assert_eq!(
        // from spec: <p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(plain!("My "), image!("/path/to/train.jpg", "title", plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("My ![foo bar](/path/to/train.jpg  \"title\"   )\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8544
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8544>
/// <https://spec.commonmark.org/0.29/#example-575>
fn t575_cr_nl() {
    init!("My ![foo bar](/path/to/train.jpg  \"title\"   )\r\n");

    assert_eq!(
        // from spec: <p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(plain!("My "), image!("/path/to/train.jpg", "title", plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("My ![foo bar](/path/to/train.jpg  \"title\"   )\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8544
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8544>
/// <https://spec.commonmark.org/0.29/#example-575>
fn t575_no_nl() {
    init!("My ![foo bar](/path/to/train.jpg  \"title\"   )");

    assert_eq!(
        // from spec: <p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(plain!("My "), image!("/path/to/train.jpg", "title", plain!("foo bar")))
        ].as_slice(),
        body(&mut StringData::new("My ![foo bar](/path/to/train.jpg  \"title\"   )", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8544
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8544>
/// <https://spec.commonmark.org/0.29/#example-575>
fn t575_tab() {
    init!("My\t![foo\tbar](/path/to/train.jpg\t\t\"title\"\t\t\t)\n");

    assert_eq!(
        // from spec: <p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(plain!("My	"), image!("/path/to/train.jpg", "title", plain!("foo\tbar")))
        ].as_slice(),
        space2tab(body(&mut StringData::new("My\t![foo\tbar](/path/to/train.jpg\t\t\"title\"\t\t\t)\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8551
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8551>
/// <https://spec.commonmark.org/0.29/#example-576>
fn t576() {
    init!("![foo](<url>)\n");

    assert_eq!(
        // from spec: <p><img src=\"url\" alt=\"foo\" /></p>
        [
            paragraph!(image!("url", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](<url>)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8551
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8551>
/// <https://spec.commonmark.org/0.29/#example-576>
fn t576_cr() {
    init!("![foo](<url>)\r");

    assert_eq!(
        // from spec: <p><img src=\"url\" alt=\"foo\" /></p>
        [
            paragraph!(image!("url", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](<url>)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8551
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8551>
/// <https://spec.commonmark.org/0.29/#example-576>
fn t576_cr_nl() {
    init!("![foo](<url>)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"url\" alt=\"foo\" /></p>
        [
            paragraph!(image!("url", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](<url>)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8551
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8551>
/// <https://spec.commonmark.org/0.29/#example-576>
fn t576_no_nl() {
    init!("![foo](<url>)");

    assert_eq!(
        // from spec: <p><img src=\"url\" alt=\"foo\" /></p>
        [
            paragraph!(image!("url", "", plain!("foo")))
        ].as_slice(),
        body(&mut StringData::new("![foo](<url>)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8558>
/// <https://spec.commonmark.org/0.29/#example-577>
fn t577() {
    init!("![](/url)\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"\" /></p>
        [
            paragraph!(image!("/url", ""))
        ].as_slice(),
        body(&mut StringData::new("![](/url)\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8558>
/// <https://spec.commonmark.org/0.29/#example-577>
fn t577_cr() {
    init!("![](/url)\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"\" /></p>
        [
            paragraph!(image!("/url", ""))
        ].as_slice(),
        body(&mut StringData::new("![](/url)\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8558>
/// <https://spec.commonmark.org/0.29/#example-577>
fn t577_cr_nl() {
    init!("![](/url)\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"\" /></p>
        [
            paragraph!(image!("/url", ""))
        ].as_slice(),
        body(&mut StringData::new("![](/url)\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8558
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8558>
/// <https://spec.commonmark.org/0.29/#example-577>
fn t577_no_nl() {
    init!("![](/url)");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"\" /></p>
        [
            paragraph!(image!("/url", ""))
        ].as_slice(),
        body(&mut StringData::new("![](/url)", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8567>
/// <https://spec.commonmark.org/0.29/#example-578>
fn t578() {
    init!("![foo][bar]\n\n[bar]: /url\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("bar", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\n\n[bar]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8567>
/// <https://spec.commonmark.org/0.29/#example-578>
fn t578_cr() {
    init!("![foo][bar]\r\r[bar]: /url\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("bar", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\r\r[bar]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8567>
/// <https://spec.commonmark.org/0.29/#example-578>
fn t578_cr_nl() {
    init!("![foo][bar]\r\n\r\n[bar]: /url\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("bar", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\r\n\r\n[bar]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8567>
/// <https://spec.commonmark.org/0.29/#example-578>
fn t578_no_nl() {
    init!("![foo][bar]\n\n[bar]: /url");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("bar", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\n\n[bar]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8567
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8567>
/// <https://spec.commonmark.org/0.29/#example-578>
fn t578_tab() {
    init!("![foo][bar]\n\n[bar]:\t/url\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar",	plain!("foo"))),
            linkdef!("bar",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo][bar]\n\n[bar]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8576
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8576>
/// <https://spec.commonmark.org/0.29/#example-579>
fn t579() {
    init!("![foo][bar]\n\n[BAR]: /url\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("BAR", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\n\n[BAR]: /url\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8576
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8576>
/// <https://spec.commonmark.org/0.29/#example-579>
fn t579_cr() {
    init!("![foo][bar]\r\r[BAR]: /url\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("BAR", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\r\r[BAR]: /url\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8576
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8576>
/// <https://spec.commonmark.org/0.29/#example-579>
fn t579_cr_nl() {
    init!("![foo][bar]\r\n\r\n[BAR]: /url\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("BAR", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\r\n\r\n[BAR]: /url\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8576
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8576>
/// <https://spec.commonmark.org/0.29/#example-579>
fn t579_no_nl() {
    init!("![foo][bar]\n\n[BAR]: /url");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar", plain!("foo"))),
            linkdef!("BAR", "/url")
        ].as_slice(),
        body(&mut StringData::new("![foo][bar]\n\n[BAR]: /url", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8576
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8576>
/// <https://spec.commonmark.org/0.29/#example-579>
fn t579_tab() {
    init!("![foo][bar]\n\n[BAR]:\t/url\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" /></p>
        [
            paragraph!(imageref!("bar",	plain!("foo"))),
            linkdef!("BAR",	"/url")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo][bar]\n\n[BAR]:\t/url\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8587
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8587>
/// <https://spec.commonmark.org/0.29/#example-580>
fn t580() {
    init!("![foo][]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo][]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8587
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8587>
/// <https://spec.commonmark.org/0.29/#example-580>
fn t580_cr() {
    init!("![foo][]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo][]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8587
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8587>
/// <https://spec.commonmark.org/0.29/#example-580>
fn t580_cr_nl() {
    init!("![foo][]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo][]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8587
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8587>
/// <https://spec.commonmark.org/0.29/#example-580>
fn t580_no_nl() {
    init!("![foo][]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo][]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8587
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8587>
/// <https://spec.commonmark.org/0.29/#example-580>
fn t580_tab() {
    init!("![foo][]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo][]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8596
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8596>
/// <https://spec.commonmark.org/0.29/#example-581>
fn t581() {
    init!("![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8596
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8596>
/// <https://spec.commonmark.org/0.29/#example-581>
fn t581_cr() {
    init!("![*foo* bar][]\r\r[*foo* bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar][]\r\r[*foo* bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8596
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8596>
/// <https://spec.commonmark.org/0.29/#example-581>
fn t581_cr_nl() {
    init!("![*foo* bar][]\r\n\r\n[*foo* bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar][]\r\n\r\n[*foo* bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8596
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8596>
/// <https://spec.commonmark.org/0.29/#example-581>
fn t581_no_nl() {
    init!("![*foo* bar][]\n\n[*foo* bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar][]\n\n[*foo* bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8596
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8596>
/// <https://spec.commonmark.org/0.29/#example-581>
fn t581_tab() {
    init!("![*foo*\tbar][]\n\n[*foo*\tbar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")),	plain!("	bar"))),
            linkdef!("*foo*	bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![*foo*\tbar][]\n\n[*foo*\tbar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8607
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8607>
/// <https://spec.commonmark.org/0.29/#example-582>
fn t582() {
    init!("![Foo][]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo][]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8607
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8607>
/// <https://spec.commonmark.org/0.29/#example-582>
fn t582_cr() {
    init!("![Foo][]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo][]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8607
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8607>
/// <https://spec.commonmark.org/0.29/#example-582>
fn t582_cr_nl() {
    init!("![Foo][]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo][]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8607
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8607>
/// <https://spec.commonmark.org/0.29/#example-582>
fn t582_no_nl() {
    init!("![Foo][]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo][]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8607
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8607>
/// <https://spec.commonmark.org/0.29/#example-582>
fn t582_tab() {
    init!("![Foo][]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![Foo][]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8619>
/// <https://spec.commonmark.org/0.29/#example-583>
fn t583() {
    init!("![foo] \n[]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>
        [
            paragraph!(imageref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo] \n[]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8619>
/// <https://spec.commonmark.org/0.29/#example-583>
fn t583_cr() {
    init!("![foo] \r[]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>
        [
            paragraph!(imageref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo] \r[]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8619>
/// <https://spec.commonmark.org/0.29/#example-583>
fn t583_cr_nl() {
    init!("![foo] \r\n[]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>
        [
            paragraph!(imageref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo] \r\n[]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8619
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8619>
/// <https://spec.commonmark.org/0.29/#example-583>
fn t583_no_nl() {
    init!("![foo] \n[]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>
        [
            paragraph!(imageref!(plain!("foo")), SoftBreak, plain!("[]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo] \n[]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8632>
/// <https://spec.commonmark.org/0.29/#example-584>
fn t584() {
    init!("![foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8632>
/// <https://spec.commonmark.org/0.29/#example-584>
fn t584_cr() {
    init!("![foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8632>
/// <https://spec.commonmark.org/0.29/#example-584>
fn t584_cr_nl() {
    init!("![foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8632>
/// <https://spec.commonmark.org/0.29/#example-584>
fn t584_no_nl() {
    init!("![foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8632
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8632>
/// <https://spec.commonmark.org/0.29/#example-584>
fn t584_tab() {
    init!("![foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8641>
/// <https://spec.commonmark.org/0.29/#example-585>
fn t585() {
    init!("![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8641>
/// <https://spec.commonmark.org/0.29/#example-585>
fn t585_cr() {
    init!("![*foo* bar]\r\r[*foo* bar]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar]\r\r[*foo* bar]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8641>
/// <https://spec.commonmark.org/0.29/#example-585>
fn t585_cr_nl() {
    init!("![*foo* bar]\r\n\r\n[*foo* bar]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar]\r\n\r\n[*foo* bar]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8641>
/// <https://spec.commonmark.org/0.29/#example-585>
fn t585_no_nl() {
    init!("![*foo* bar]\n\n[*foo* bar]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")), plain!(" bar"))),
            linkdef!("*foo* bar", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![*foo* bar]\n\n[*foo* bar]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8641
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8641>
/// <https://spec.commonmark.org/0.29/#example-585>
fn t585_tab() {
    init!("![*foo*\tbar]\n\n[*foo*\tbar]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>
        [
            paragraph!(imageref!(emph!(plain!("foo")),	plain!("	bar"))),
            linkdef!("*foo*	bar",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![*foo*\tbar]\n\n[*foo*\tbar]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8652
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8652>
/// <https://spec.commonmark.org/0.29/#example-586>
fn t586() {
    init!("![[foo]]\n\n[[foo]]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>
        [
            paragraph!(imageref!(linkref!(plain!("foo")))),
            paragraph!(
              linkref!(linkref!(plain!("foo"))),
              plain!(": /url \"title\"")
            )
        ].as_slice(),
        body(&mut StringData::new("![[foo]]\n\n[[foo]]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8652
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8652>
/// <https://spec.commonmark.org/0.29/#example-586>
fn t586_cr() {
    init!("![[foo]]\r\r[[foo]]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>
        [
            paragraph!(imageref!(linkref!(plain!("foo")))),
            paragraph!(
              linkref!(linkref!(plain!("foo"))),
              plain!(": /url \"title\"")
            )
        ].as_slice(),
        body(&mut StringData::new("![[foo]]\r\r[[foo]]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8652
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8652>
/// <https://spec.commonmark.org/0.29/#example-586>
fn t586_cr_nl() {
    init!("![[foo]]\r\n\r\n[[foo]]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>
        [
            paragraph!(imageref!(linkref!(plain!("foo")))),
            paragraph!(
              linkref!(linkref!(plain!("foo"))),
              plain!(": /url \"title\"")
            )
        ].as_slice(),
        body(&mut StringData::new("![[foo]]\r\n\r\n[[foo]]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8652
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8652>
/// <https://spec.commonmark.org/0.29/#example-586>
fn t586_no_nl() {
    init!("![[foo]]\n\n[[foo]]: /url \"title\"");

    assert_eq!(
        // from spec: <p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>
        [
            paragraph!(imageref!(linkref!(plain!("foo")))),
            paragraph!(
              linkref!(linkref!(plain!("foo"))),
              plain!(": /url \"title\"")
            )
        ].as_slice(),
        body(&mut StringData::new("![[foo]]\n\n[[foo]]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8652
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8652>
/// <https://spec.commonmark.org/0.29/#example-586>
fn t586_tab() {
    init!("![[foo]]\n\n[[foo]]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>
        [
            paragraph!(imageref!(linkref!(plain!("foo")))),
            paragraph!(
            		linkref!(linkref!(plain!("foo"))),
            		plain!(":	/url	\"title\"")
            )
        ].as_slice(),
        space2tab(body(&mut StringData::new("![[foo]]\n\n[[foo]]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8664
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8664>
/// <https://spec.commonmark.org/0.29/#example-587>
fn t587() {
    init!("![Foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8664
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8664>
/// <https://spec.commonmark.org/0.29/#example-587>
fn t587_cr() {
    init!("![Foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8664
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8664>
/// <https://spec.commonmark.org/0.29/#example-587>
fn t587_cr_nl() {
    init!("![Foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8664
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8664>
/// <https://spec.commonmark.org/0.29/#example-587>
fn t587_no_nl() {
    init!("![Foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("![Foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8664
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8664>
/// <https://spec.commonmark.org/0.29/#example-587>
fn t587_tab() {
    init!("![Foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>
        [
            paragraph!(imageref!(plain!("Foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("![Foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8676>
/// <https://spec.commonmark.org/0.29/#example-588>
fn t588() {
    init!("!\\[foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>![foo]</p>
        [
            paragraph!(plain!("![foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("!\\[foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8676>
/// <https://spec.commonmark.org/0.29/#example-588>
fn t588_cr() {
    init!("!\\[foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>![foo]</p>
        [
            paragraph!(plain!("![foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("!\\[foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8676>
/// <https://spec.commonmark.org/0.29/#example-588>
fn t588_cr_nl() {
    init!("!\\[foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>![foo]</p>
        [
            paragraph!(plain!("![foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("!\\[foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8676>
/// <https://spec.commonmark.org/0.29/#example-588>
fn t588_no_nl() {
    init!("!\\[foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p>![foo]</p>
        [
            paragraph!(plain!("![foo]")),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("!\\[foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8676
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8676>
/// <https://spec.commonmark.org/0.29/#example-588>
fn t588_tab() {
    init!("!\\[foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>![foo]</p>
        [
            paragraph!(plain!("![foo]")),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("!\\[foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8688>
/// <https://spec.commonmark.org/0.29/#example-589>
fn t589() {
    init!("\\![foo]\n\n[foo]: /url \"title\"\n");

    assert_eq!(
        // from spec: <p>!<a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(plain!("!"), linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\![foo]\n\n[foo]: /url \"title\"\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8688>
/// <https://spec.commonmark.org/0.29/#example-589>
fn t589_cr() {
    init!("\\![foo]\r\r[foo]: /url \"title\"\r");

    assert_eq!(
        // from spec: <p>!<a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(plain!("!"), linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\![foo]\r\r[foo]: /url \"title\"\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8688>
/// <https://spec.commonmark.org/0.29/#example-589>
fn t589_cr_nl() {
    init!("\\![foo]\r\n\r\n[foo]: /url \"title\"\r\n");

    assert_eq!(
        // from spec: <p>!<a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(plain!("!"), linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\![foo]\r\n\r\n[foo]: /url \"title\"\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8688>
/// <https://spec.commonmark.org/0.29/#example-589>
fn t589_no_nl() {
    init!("\\![foo]\n\n[foo]: /url \"title\"");

    assert_eq!(
        // from spec: <p>!<a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(plain!("!"), linkref!(plain!("foo"))),
            linkdef!("foo", "/url", "title")
        ].as_slice(),
        body(&mut StringData::new("\\![foo]\n\n[foo]: /url \"title\"", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8688
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8688>
/// <https://spec.commonmark.org/0.29/#example-589>
fn t589_tab() {
    init!("\\![foo]\n\n[foo]:\t/url\t\"title\"\n");

    assert_eq!(
        // from spec: <p>!<a href=\"/url\" title=\"title\">foo</a></p>
        [
            paragraph!(plain!("!"),	linkref!(plain!("foo"))),
            linkdef!("foo",	"/url",	"title")
        ].as_slice(),
        space2tab(body(&mut StringData::new("\\![foo]\n\n[foo]:\t/url\t\"title\"\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8721
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8721>
/// <https://spec.commonmark.org/0.29/#example-590>
fn t590() {
    init!("<http://foo.bar.baz>\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>
        [
            paragraph!(link!("http://foo.bar.baz", "", plain!("http://foo.bar.baz")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8721
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8721>
/// <https://spec.commonmark.org/0.29/#example-590>
fn t590_cr() {
    init!("<http://foo.bar.baz>\r");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>
        [
            paragraph!(link!("http://foo.bar.baz", "", plain!("http://foo.bar.baz")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8721
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8721>
/// <https://spec.commonmark.org/0.29/#example-590>
fn t590_cr_nl() {
    init!("<http://foo.bar.baz>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>
        [
            paragraph!(link!("http://foo.bar.baz", "", plain!("http://foo.bar.baz")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8721
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8721>
/// <https://spec.commonmark.org/0.29/#example-590>
fn t590_no_nl() {
    init!("<http://foo.bar.baz>");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>
        [
            paragraph!(link!("http://foo.bar.baz", "", plain!("http://foo.bar.baz")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8728
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8728>
/// <https://spec.commonmark.org/0.29/#example-591>
fn t591() {
    init!("<http://foo.bar.baz/test?q=hello&id=22&boolean>\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
        [
            paragraph!(link!("http://foo.bar.baz/test?q=hello&id=22&boolean", "", plain!("http://foo.bar.baz/test?q=hello&id=22&boolean")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz/test?q=hello&id=22&boolean>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8728
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8728>
/// <https://spec.commonmark.org/0.29/#example-591>
fn t591_cr() {
    init!("<http://foo.bar.baz/test?q=hello&id=22&boolean>\r");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
        [
            paragraph!(link!("http://foo.bar.baz/test?q=hello&id=22&boolean", "", plain!("http://foo.bar.baz/test?q=hello&id=22&boolean")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz/test?q=hello&id=22&boolean>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8728
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8728>
/// <https://spec.commonmark.org/0.29/#example-591>
fn t591_cr_nl() {
    init!("<http://foo.bar.baz/test?q=hello&id=22&boolean>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
        [
            paragraph!(link!("http://foo.bar.baz/test?q=hello&id=22&boolean", "", plain!("http://foo.bar.baz/test?q=hello&id=22&boolean")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz/test?q=hello&id=22&boolean>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8728
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8728>
/// <https://spec.commonmark.org/0.29/#example-591>
fn t591_no_nl() {
    init!("<http://foo.bar.baz/test?q=hello&id=22&boolean>");

    assert_eq!(
        // from spec: <p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
        [
            paragraph!(link!("http://foo.bar.baz/test?q=hello&id=22&boolean", "", plain!("http://foo.bar.baz/test?q=hello&id=22&boolean")))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar.baz/test?q=hello&id=22&boolean>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8735
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8735>
/// <https://spec.commonmark.org/0.29/#example-592>
fn t592() {
    init!("<irc://foo.bar:2233/baz>\n");

    assert_eq!(
        // from spec: <p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>
        [
            paragraph!(link!("irc://foo.bar:2233/baz", "", plain!("irc://foo.bar:2233/baz")))
        ].as_slice(),
        body(&mut StringData::new("<irc://foo.bar:2233/baz>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8735
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8735>
/// <https://spec.commonmark.org/0.29/#example-592>
fn t592_cr() {
    init!("<irc://foo.bar:2233/baz>\r");

    assert_eq!(
        // from spec: <p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>
        [
            paragraph!(link!("irc://foo.bar:2233/baz", "", plain!("irc://foo.bar:2233/baz")))
        ].as_slice(),
        body(&mut StringData::new("<irc://foo.bar:2233/baz>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8735
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8735>
/// <https://spec.commonmark.org/0.29/#example-592>
fn t592_cr_nl() {
    init!("<irc://foo.bar:2233/baz>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>
        [
            paragraph!(link!("irc://foo.bar:2233/baz", "", plain!("irc://foo.bar:2233/baz")))
        ].as_slice(),
        body(&mut StringData::new("<irc://foo.bar:2233/baz>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8735
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8735>
/// <https://spec.commonmark.org/0.29/#example-592>
fn t592_no_nl() {
    init!("<irc://foo.bar:2233/baz>");

    assert_eq!(
        // from spec: <p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>
        [
            paragraph!(link!("irc://foo.bar:2233/baz", "", plain!("irc://foo.bar:2233/baz")))
        ].as_slice(),
        body(&mut StringData::new("<irc://foo.bar:2233/baz>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8744
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8744>
/// <https://spec.commonmark.org/0.29/#example-593>
fn t593() {
    init!("<MAILTO:FOO@BAR.BAZ>\n");

    assert_eq!(
        // from spec: <p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>
        [
            paragraph!(link!("MAILTO:FOO@BAR.BAZ", "", plain!("MAILTO:FOO@BAR.BAZ")))
        ].as_slice(),
        body(&mut StringData::new("<MAILTO:FOO@BAR.BAZ>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8744
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8744>
/// <https://spec.commonmark.org/0.29/#example-593>
fn t593_cr() {
    init!("<MAILTO:FOO@BAR.BAZ>\r");

    assert_eq!(
        // from spec: <p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>
        [
            paragraph!(link!("MAILTO:FOO@BAR.BAZ", "", plain!("MAILTO:FOO@BAR.BAZ")))
        ].as_slice(),
        body(&mut StringData::new("<MAILTO:FOO@BAR.BAZ>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8744
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8744>
/// <https://spec.commonmark.org/0.29/#example-593>
fn t593_cr_nl() {
    init!("<MAILTO:FOO@BAR.BAZ>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>
        [
            paragraph!(link!("MAILTO:FOO@BAR.BAZ", "", plain!("MAILTO:FOO@BAR.BAZ")))
        ].as_slice(),
        body(&mut StringData::new("<MAILTO:FOO@BAR.BAZ>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8744
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8744>
/// <https://spec.commonmark.org/0.29/#example-593>
fn t593_no_nl() {
    init!("<MAILTO:FOO@BAR.BAZ>");

    assert_eq!(
        // from spec: <p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>
        [
            paragraph!(link!("MAILTO:FOO@BAR.BAZ", "", plain!("MAILTO:FOO@BAR.BAZ")))
        ].as_slice(),
        body(&mut StringData::new("<MAILTO:FOO@BAR.BAZ>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8756
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8756>
/// <https://spec.commonmark.org/0.29/#example-594>
fn t594() {
    init!("<a+b+c:d>\n");

    assert_eq!(
        // from spec: <p><a href=\"a+b+c:d\">a+b+c:d</a></p>
        [
            paragraph!(link!("a+b+c:d", "", plain!("a+b+c:d")))
        ].as_slice(),
        body(&mut StringData::new("<a+b+c:d>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8756
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8756>
/// <https://spec.commonmark.org/0.29/#example-594>
fn t594_cr() {
    init!("<a+b+c:d>\r");

    assert_eq!(
        // from spec: <p><a href=\"a+b+c:d\">a+b+c:d</a></p>
        [
            paragraph!(link!("a+b+c:d", "", plain!("a+b+c:d")))
        ].as_slice(),
        body(&mut StringData::new("<a+b+c:d>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8756
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8756>
/// <https://spec.commonmark.org/0.29/#example-594>
fn t594_cr_nl() {
    init!("<a+b+c:d>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"a+b+c:d\">a+b+c:d</a></p>
        [
            paragraph!(link!("a+b+c:d", "", plain!("a+b+c:d")))
        ].as_slice(),
        body(&mut StringData::new("<a+b+c:d>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8756
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8756>
/// <https://spec.commonmark.org/0.29/#example-594>
fn t594_no_nl() {
    init!("<a+b+c:d>");

    assert_eq!(
        // from spec: <p><a href=\"a+b+c:d\">a+b+c:d</a></p>
        [
            paragraph!(link!("a+b+c:d", "", plain!("a+b+c:d")))
        ].as_slice(),
        body(&mut StringData::new("<a+b+c:d>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8763
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8763>
/// <https://spec.commonmark.org/0.29/#example-595>
fn t595() {
    init!("<made-up-scheme://foo,bar>\n");

    assert_eq!(
        // from spec: <p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>
        [
            paragraph!(link!("made-up-scheme://foo,bar", "", plain!("made-up-scheme://foo,bar")))
        ].as_slice(),
        body(&mut StringData::new("<made-up-scheme://foo,bar>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8763
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8763>
/// <https://spec.commonmark.org/0.29/#example-595>
fn t595_cr() {
    init!("<made-up-scheme://foo,bar>\r");

    assert_eq!(
        // from spec: <p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>
        [
            paragraph!(link!("made-up-scheme://foo,bar", "", plain!("made-up-scheme://foo,bar")))
        ].as_slice(),
        body(&mut StringData::new("<made-up-scheme://foo,bar>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8763
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8763>
/// <https://spec.commonmark.org/0.29/#example-595>
fn t595_cr_nl() {
    init!("<made-up-scheme://foo,bar>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>
        [
            paragraph!(link!("made-up-scheme://foo,bar", "", plain!("made-up-scheme://foo,bar")))
        ].as_slice(),
        body(&mut StringData::new("<made-up-scheme://foo,bar>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8763
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8763>
/// <https://spec.commonmark.org/0.29/#example-595>
fn t595_no_nl() {
    init!("<made-up-scheme://foo,bar>");

    assert_eq!(
        // from spec: <p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>
        [
            paragraph!(link!("made-up-scheme://foo,bar", "", plain!("made-up-scheme://foo,bar")))
        ].as_slice(),
        body(&mut StringData::new("<made-up-scheme://foo,bar>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8770
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8770>
/// <https://spec.commonmark.org/0.29/#example-596>
fn t596() {
    init!("<http://../>\n");

    assert_eq!(
        // from spec: <p><a href=\"http://../\">http://../</a></p>
        [
            paragraph!(link!("http://../", "", plain!("http://../")))
        ].as_slice(),
        body(&mut StringData::new("<http://../>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8770
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8770>
/// <https://spec.commonmark.org/0.29/#example-596>
fn t596_cr() {
    init!("<http://../>\r");

    assert_eq!(
        // from spec: <p><a href=\"http://../\">http://../</a></p>
        [
            paragraph!(link!("http://../", "", plain!("http://../")))
        ].as_slice(),
        body(&mut StringData::new("<http://../>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8770
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8770>
/// <https://spec.commonmark.org/0.29/#example-596>
fn t596_cr_nl() {
    init!("<http://../>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://../\">http://../</a></p>
        [
            paragraph!(link!("http://../", "", plain!("http://../")))
        ].as_slice(),
        body(&mut StringData::new("<http://../>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8770
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8770>
/// <https://spec.commonmark.org/0.29/#example-596>
fn t596_no_nl() {
    init!("<http://../>");

    assert_eq!(
        // from spec: <p><a href=\"http://../\">http://../</a></p>
        [
            paragraph!(link!("http://../", "", plain!("http://../")))
        ].as_slice(),
        body(&mut StringData::new("<http://../>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8777
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8777>
/// <https://spec.commonmark.org/0.29/#example-597>
fn t597() {
    init!("<localhost:5001/foo>\n");

    assert_eq!(
        // from spec: <p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>
        [
            paragraph!(link!("localhost:5001/foo", "", plain!("localhost:5001/foo")))
        ].as_slice(),
        body(&mut StringData::new("<localhost:5001/foo>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8777
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8777>
/// <https://spec.commonmark.org/0.29/#example-597>
fn t597_cr() {
    init!("<localhost:5001/foo>\r");

    assert_eq!(
        // from spec: <p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>
        [
            paragraph!(link!("localhost:5001/foo", "", plain!("localhost:5001/foo")))
        ].as_slice(),
        body(&mut StringData::new("<localhost:5001/foo>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8777
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8777>
/// <https://spec.commonmark.org/0.29/#example-597>
fn t597_cr_nl() {
    init!("<localhost:5001/foo>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>
        [
            paragraph!(link!("localhost:5001/foo", "", plain!("localhost:5001/foo")))
        ].as_slice(),
        body(&mut StringData::new("<localhost:5001/foo>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8777
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8777>
/// <https://spec.commonmark.org/0.29/#example-597>
fn t597_no_nl() {
    init!("<localhost:5001/foo>");

    assert_eq!(
        // from spec: <p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>
        [
            paragraph!(link!("localhost:5001/foo", "", plain!("localhost:5001/foo")))
        ].as_slice(),
        body(&mut StringData::new("<localhost:5001/foo>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8786>
/// <https://spec.commonmark.org/0.29/#example-598>
fn t598() {
    init!("<http://foo.bar/baz bim>\n");

    assert_eq!(
        // from spec: <p>&lt;http://foo.bar/baz bim&gt;</p>
        [
            paragraph!(plain!("<http://foo.bar/baz bim>"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar/baz bim>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8786>
/// <https://spec.commonmark.org/0.29/#example-598>
fn t598_cr() {
    init!("<http://foo.bar/baz bim>\r");

    assert_eq!(
        // from spec: <p>&lt;http://foo.bar/baz bim&gt;</p>
        [
            paragraph!(plain!("<http://foo.bar/baz bim>"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar/baz bim>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8786>
/// <https://spec.commonmark.org/0.29/#example-598>
fn t598_cr_nl() {
    init!("<http://foo.bar/baz bim>\r\n");

    assert_eq!(
        // from spec: <p>&lt;http://foo.bar/baz bim&gt;</p>
        [
            paragraph!(plain!("<http://foo.bar/baz bim>"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar/baz bim>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8786>
/// <https://spec.commonmark.org/0.29/#example-598>
fn t598_no_nl() {
    init!("<http://foo.bar/baz bim>");

    assert_eq!(
        // from spec: <p>&lt;http://foo.bar/baz bim&gt;</p>
        [
            paragraph!(plain!("<http://foo.bar/baz bim>"))
        ].as_slice(),
        body(&mut StringData::new("<http://foo.bar/baz bim>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8786
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8786>
/// <https://spec.commonmark.org/0.29/#example-598>
fn t598_tab() {
    init!("<http://foo.bar/baz\tbim>\n");

    assert_eq!(
        // from spec: <p>&lt;http://foo.bar/baz bim&gt;</p>
        [
            paragraph!(plain!("<http://foo.bar/baz	bim>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<http://foo.bar/baz\tbim>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8795
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8795>
/// <https://spec.commonmark.org/0.29/#example-599>
fn t599() {
    init!("<http://example.com/\\[\\>\n");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>
        [
            paragraph!(link!("http://example.com/\\[\\", "", plain!("http://example.com/\\[\\")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com/\\[\\>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8795
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8795>
/// <https://spec.commonmark.org/0.29/#example-599>
fn t599_cr() {
    init!("<http://example.com/\\[\\>\r");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>
        [
            paragraph!(link!("http://example.com/\\[\\", "", plain!("http://example.com/\\[\\")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com/\\[\\>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8795
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8795>
/// <https://spec.commonmark.org/0.29/#example-599>
fn t599_cr_nl() {
    init!("<http://example.com/\\[\\>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>
        [
            paragraph!(link!("http://example.com/\\[\\", "", plain!("http://example.com/\\[\\")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com/\\[\\>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8795
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8795>
/// <https://spec.commonmark.org/0.29/#example-599>
fn t599_no_nl() {
    init!("<http://example.com/\\[\\>");

    assert_eq!(
        // from spec: <p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>
        [
            paragraph!(link!("http://example.com/\\[\\", "", plain!("http://example.com/\\[\\")))
        ].as_slice(),
        body(&mut StringData::new("<http://example.com/\\[\\>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8817>
/// <https://spec.commonmark.org/0.29/#example-600>
fn t600() {
    init!("<foo@bar.example.com>\n");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>
        [
            paragraph!(link!("mailto:foo@bar.example.com", "", plain!("foo@bar.example.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo@bar.example.com>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8817>
/// <https://spec.commonmark.org/0.29/#example-600>
fn t600_cr() {
    init!("<foo@bar.example.com>\r");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>
        [
            paragraph!(link!("mailto:foo@bar.example.com", "", plain!("foo@bar.example.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo@bar.example.com>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8817>
/// <https://spec.commonmark.org/0.29/#example-600>
fn t600_cr_nl() {
    init!("<foo@bar.example.com>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>
        [
            paragraph!(link!("mailto:foo@bar.example.com", "", plain!("foo@bar.example.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo@bar.example.com>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8817
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8817>
/// <https://spec.commonmark.org/0.29/#example-600>
fn t600_no_nl() {
    init!("<foo@bar.example.com>");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>
        [
            paragraph!(link!("mailto:foo@bar.example.com", "", plain!("foo@bar.example.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo@bar.example.com>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8824>
/// <https://spec.commonmark.org/0.29/#example-601>
fn t601() {
    init!("<foo+special@Bar.baz-bar0.com>\n");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>
        [
            paragraph!(link!("mailto:foo+special@Bar.baz-bar0.com", "", plain!("foo+special@Bar.baz-bar0.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo+special@Bar.baz-bar0.com>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8824>
/// <https://spec.commonmark.org/0.29/#example-601>
fn t601_cr() {
    init!("<foo+special@Bar.baz-bar0.com>\r");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>
        [
            paragraph!(link!("mailto:foo+special@Bar.baz-bar0.com", "", plain!("foo+special@Bar.baz-bar0.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo+special@Bar.baz-bar0.com>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8824>
/// <https://spec.commonmark.org/0.29/#example-601>
fn t601_cr_nl() {
    init!("<foo+special@Bar.baz-bar0.com>\r\n");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>
        [
            paragraph!(link!("mailto:foo+special@Bar.baz-bar0.com", "", plain!("foo+special@Bar.baz-bar0.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo+special@Bar.baz-bar0.com>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8824
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8824>
/// <https://spec.commonmark.org/0.29/#example-601>
fn t601_no_nl() {
    init!("<foo+special@Bar.baz-bar0.com>");

    assert_eq!(
        // from spec: <p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>
        [
            paragraph!(link!("mailto:foo+special@Bar.baz-bar0.com", "", plain!("foo+special@Bar.baz-bar0.com")))
        ].as_slice(),
        body(&mut StringData::new("<foo+special@Bar.baz-bar0.com>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8833
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8833>
/// <https://spec.commonmark.org/0.29/#example-602>
fn t602() {
    init!("<foo\\+@bar.example.com>\n");

    assert_eq!(
        // from spec: <p>&lt;foo+@bar.example.com&gt;</p>
        [
            paragraph!(plain!("<foo+@bar.example.com>"))
        ].as_slice(),
        body(&mut StringData::new("<foo\\+@bar.example.com>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8833
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8833>
/// <https://spec.commonmark.org/0.29/#example-602>
fn t602_cr() {
    init!("<foo\\+@bar.example.com>\r");

    assert_eq!(
        // from spec: <p>&lt;foo+@bar.example.com&gt;</p>
        [
            paragraph!(plain!("<foo+@bar.example.com>"))
        ].as_slice(),
        body(&mut StringData::new("<foo\\+@bar.example.com>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8833
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8833>
/// <https://spec.commonmark.org/0.29/#example-602>
fn t602_cr_nl() {
    init!("<foo\\+@bar.example.com>\r\n");

    assert_eq!(
        // from spec: <p>&lt;foo+@bar.example.com&gt;</p>
        [
            paragraph!(plain!("<foo+@bar.example.com>"))
        ].as_slice(),
        body(&mut StringData::new("<foo\\+@bar.example.com>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8833
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8833>
/// <https://spec.commonmark.org/0.29/#example-602>
fn t602_no_nl() {
    init!("<foo\\+@bar.example.com>");

    assert_eq!(
        // from spec: <p>&lt;foo+@bar.example.com&gt;</p>
        [
            paragraph!(plain!("<foo+@bar.example.com>"))
        ].as_slice(),
        body(&mut StringData::new("<foo\\+@bar.example.com>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8842>
/// <https://spec.commonmark.org/0.29/#example-603>
fn t603() {
    init!("<>\n");

    assert_eq!(
        // from spec: <p>&lt;&gt;</p>
        [
            paragraph!(plain!("<>"))
        ].as_slice(),
        body(&mut StringData::new("<>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8842>
/// <https://spec.commonmark.org/0.29/#example-603>
fn t603_cr() {
    init!("<>\r");

    assert_eq!(
        // from spec: <p>&lt;&gt;</p>
        [
            paragraph!(plain!("<>"))
        ].as_slice(),
        body(&mut StringData::new("<>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8842>
/// <https://spec.commonmark.org/0.29/#example-603>
fn t603_cr_nl() {
    init!("<>\r\n");

    assert_eq!(
        // from spec: <p>&lt;&gt;</p>
        [
            paragraph!(plain!("<>"))
        ].as_slice(),
        body(&mut StringData::new("<>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8842
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8842>
/// <https://spec.commonmark.org/0.29/#example-603>
fn t603_no_nl() {
    init!("<>");

    assert_eq!(
        // from spec: <p>&lt;&gt;</p>
        [
            paragraph!(plain!("<>"))
        ].as_slice(),
        body(&mut StringData::new("<>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8849>
/// <https://spec.commonmark.org/0.29/#example-604>
fn t604() {
    init!("< http://foo.bar >\n");

    assert_eq!(
        // from spec: <p>&lt; http://foo.bar &gt;</p>
        [
            paragraph!(plain!("< http://foo.bar >"))
        ].as_slice(),
        body(&mut StringData::new("< http://foo.bar >\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8849>
/// <https://spec.commonmark.org/0.29/#example-604>
fn t604_cr() {
    init!("< http://foo.bar >\r");

    assert_eq!(
        // from spec: <p>&lt; http://foo.bar &gt;</p>
        [
            paragraph!(plain!("< http://foo.bar >"))
        ].as_slice(),
        body(&mut StringData::new("< http://foo.bar >\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8849>
/// <https://spec.commonmark.org/0.29/#example-604>
fn t604_cr_nl() {
    init!("< http://foo.bar >\r\n");

    assert_eq!(
        // from spec: <p>&lt; http://foo.bar &gt;</p>
        [
            paragraph!(plain!("< http://foo.bar >"))
        ].as_slice(),
        body(&mut StringData::new("< http://foo.bar >\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8849>
/// <https://spec.commonmark.org/0.29/#example-604>
fn t604_no_nl() {
    init!("< http://foo.bar >");

    assert_eq!(
        // from spec: <p>&lt; http://foo.bar &gt;</p>
        [
            paragraph!(plain!("< http://foo.bar >"))
        ].as_slice(),
        body(&mut StringData::new("< http://foo.bar >", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8849
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8849>
/// <https://spec.commonmark.org/0.29/#example-604>
fn t604_tab() {
    init!("<\thttp://foo.bar\t>\n");

    assert_eq!(
        // from spec: <p>&lt; http://foo.bar &gt;</p>
        [
            paragraph!(plain!("<	http://foo.bar	>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<\thttp://foo.bar\t>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8856
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8856>
/// <https://spec.commonmark.org/0.29/#example-605>
fn t605() {
    init!("<m:abc>\n");

    assert_eq!(
        // from spec: <p>&lt;m:abc&gt;</p>
        [
            paragraph!(plain!("<m:abc>"))
        ].as_slice(),
        body(&mut StringData::new("<m:abc>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8856
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8856>
/// <https://spec.commonmark.org/0.29/#example-605>
fn t605_cr() {
    init!("<m:abc>\r");

    assert_eq!(
        // from spec: <p>&lt;m:abc&gt;</p>
        [
            paragraph!(plain!("<m:abc>"))
        ].as_slice(),
        body(&mut StringData::new("<m:abc>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8856
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8856>
/// <https://spec.commonmark.org/0.29/#example-605>
fn t605_cr_nl() {
    init!("<m:abc>\r\n");

    assert_eq!(
        // from spec: <p>&lt;m:abc&gt;</p>
        [
            paragraph!(plain!("<m:abc>"))
        ].as_slice(),
        body(&mut StringData::new("<m:abc>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8856
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8856>
/// <https://spec.commonmark.org/0.29/#example-605>
fn t605_no_nl() {
    init!("<m:abc>");

    assert_eq!(
        // from spec: <p>&lt;m:abc&gt;</p>
        [
            paragraph!(plain!("<m:abc>"))
        ].as_slice(),
        body(&mut StringData::new("<m:abc>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8863
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8863>
/// <https://spec.commonmark.org/0.29/#example-606>
fn t606() {
    init!("<foo.bar.baz>\n");

    assert_eq!(
        // from spec: <p>&lt;foo.bar.baz&gt;</p>
        [
            paragraph!(plain!("<foo.bar.baz>"))
        ].as_slice(),
        body(&mut StringData::new("<foo.bar.baz>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8863
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8863>
/// <https://spec.commonmark.org/0.29/#example-606>
fn t606_cr() {
    init!("<foo.bar.baz>\r");

    assert_eq!(
        // from spec: <p>&lt;foo.bar.baz&gt;</p>
        [
            paragraph!(plain!("<foo.bar.baz>"))
        ].as_slice(),
        body(&mut StringData::new("<foo.bar.baz>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8863
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8863>
/// <https://spec.commonmark.org/0.29/#example-606>
fn t606_cr_nl() {
    init!("<foo.bar.baz>\r\n");

    assert_eq!(
        // from spec: <p>&lt;foo.bar.baz&gt;</p>
        [
            paragraph!(plain!("<foo.bar.baz>"))
        ].as_slice(),
        body(&mut StringData::new("<foo.bar.baz>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8863
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8863>
/// <https://spec.commonmark.org/0.29/#example-606>
fn t606_no_nl() {
    init!("<foo.bar.baz>");

    assert_eq!(
        // from spec: <p>&lt;foo.bar.baz&gt;</p>
        [
            paragraph!(plain!("<foo.bar.baz>"))
        ].as_slice(),
        body(&mut StringData::new("<foo.bar.baz>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8870>
/// <https://spec.commonmark.org/0.29/#example-607>
fn t607() {
    init!("http://example.com\n");

    assert_eq!(
        // from spec: <p>http://example.com</p>
        [
            paragraph!(plain!("http://example.com"))
        ].as_slice(),
        body(&mut StringData::new("http://example.com\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8870>
/// <https://spec.commonmark.org/0.29/#example-607>
fn t607_cr() {
    init!("http://example.com\r");

    assert_eq!(
        // from spec: <p>http://example.com</p>
        [
            paragraph!(plain!("http://example.com"))
        ].as_slice(),
        body(&mut StringData::new("http://example.com\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8870>
/// <https://spec.commonmark.org/0.29/#example-607>
fn t607_cr_nl() {
    init!("http://example.com\r\n");

    assert_eq!(
        // from spec: <p>http://example.com</p>
        [
            paragraph!(plain!("http://example.com"))
        ].as_slice(),
        body(&mut StringData::new("http://example.com\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8870
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8870>
/// <https://spec.commonmark.org/0.29/#example-607>
fn t607_no_nl() {
    init!("http://example.com");

    assert_eq!(
        // from spec: <p>http://example.com</p>
        [
            paragraph!(plain!("http://example.com"))
        ].as_slice(),
        body(&mut StringData::new("http://example.com", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8877>
/// <https://spec.commonmark.org/0.29/#example-608>
fn t608() {
    init!("foo@bar.example.com\n");

    assert_eq!(
        // from spec: <p>foo@bar.example.com</p>
        [
            paragraph!(plain!("foo@bar.example.com"))
        ].as_slice(),
        body(&mut StringData::new("foo@bar.example.com\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8877>
/// <https://spec.commonmark.org/0.29/#example-608>
fn t608_cr() {
    init!("foo@bar.example.com\r");

    assert_eq!(
        // from spec: <p>foo@bar.example.com</p>
        [
            paragraph!(plain!("foo@bar.example.com"))
        ].as_slice(),
        body(&mut StringData::new("foo@bar.example.com\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8877>
/// <https://spec.commonmark.org/0.29/#example-608>
fn t608_cr_nl() {
    init!("foo@bar.example.com\r\n");

    assert_eq!(
        // from spec: <p>foo@bar.example.com</p>
        [
            paragraph!(plain!("foo@bar.example.com"))
        ].as_slice(),
        body(&mut StringData::new("foo@bar.example.com\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8877
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8877>
/// <https://spec.commonmark.org/0.29/#example-608>
fn t608_no_nl() {
    init!("foo@bar.example.com");

    assert_eq!(
        // from spec: <p>foo@bar.example.com</p>
        [
            paragraph!(plain!("foo@bar.example.com"))
        ].as_slice(),
        body(&mut StringData::new("foo@bar.example.com", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8959
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8959>
/// <https://spec.commonmark.org/0.29/#example-609>
fn t609() {
    init!("<a><bab><c2c>\n");

    assert_eq!(
        // from spec: <p><a><bab><c2c></p>
        [
            paragraph!(html!("<a>"), html!("<bab>"), html!("<c2c>"))
        ].as_slice(),
        body(&mut StringData::new("<a><bab><c2c>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8959
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8959>
/// <https://spec.commonmark.org/0.29/#example-609>
fn t609_cr() {
    init!("<a><bab><c2c>\r");

    assert_eq!(
        // from spec: <p><a><bab><c2c></p>
        [
            paragraph!(html!("<a>"), html!("<bab>"), html!("<c2c>"))
        ].as_slice(),
        body(&mut StringData::new("<a><bab><c2c>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8959
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8959>
/// <https://spec.commonmark.org/0.29/#example-609>
fn t609_cr_nl() {
    init!("<a><bab><c2c>\r\n");

    assert_eq!(
        // from spec: <p><a><bab><c2c></p>
        [
            paragraph!(html!("<a>"), html!("<bab>"), html!("<c2c>"))
        ].as_slice(),
        body(&mut StringData::new("<a><bab><c2c>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8959
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8959>
/// <https://spec.commonmark.org/0.29/#example-609>
fn t609_no_nl() {
    init!("<a><bab><c2c>");

    assert_eq!(
        // from spec: <p><a><bab><c2c></p>
        [
            paragraph!(html!("<a>"), html!("<bab>"), html!("<c2c>"))
        ].as_slice(),
        body(&mut StringData::new("<a><bab><c2c>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8968
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8968>
/// <https://spec.commonmark.org/0.29/#example-610>
fn t610() {
    init!("<a/><b2/>\n");

    assert_eq!(
        // from spec: <p><a/><b2/></p>
        [
            paragraph!(html!("<a/>"), html!("<b2/>"))
        ].as_slice(),
        body(&mut StringData::new("<a/><b2/>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8968
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8968>
/// <https://spec.commonmark.org/0.29/#example-610>
fn t610_cr() {
    init!("<a/><b2/>\r");

    assert_eq!(
        // from spec: <p><a/><b2/></p>
        [
            paragraph!(html!("<a/>"), html!("<b2/>"))
        ].as_slice(),
        body(&mut StringData::new("<a/><b2/>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8968
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8968>
/// <https://spec.commonmark.org/0.29/#example-610>
fn t610_cr_nl() {
    init!("<a/><b2/>\r\n");

    assert_eq!(
        // from spec: <p><a/><b2/></p>
        [
            paragraph!(html!("<a/>"), html!("<b2/>"))
        ].as_slice(),
        body(&mut StringData::new("<a/><b2/>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8968
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8968>
/// <https://spec.commonmark.org/0.29/#example-610>
fn t610_no_nl() {
    init!("<a/><b2/>");

    assert_eq!(
        // from spec: <p><a/><b2/></p>
        [
            paragraph!(html!("<a/>"), html!("<b2/>"))
        ].as_slice(),
        body(&mut StringData::new("<a/><b2/>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8977
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8977>
/// <https://spec.commonmark.org/0.29/#example-611>
fn t611() {
    init!("<a  /><b2\ndata=\"foo\" >\n");

    assert_eq!(
        // from spec: <p><a  /><b2\ndata=\"foo\" ></p>
        [
            paragraph!(html!("<a  />"), html!("<b2\ndata=\"foo\" >"))
        ].as_slice(),
        body(&mut StringData::new("<a  /><b2\ndata=\"foo\" >\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8977
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8977>
/// <https://spec.commonmark.org/0.29/#example-611>
fn t611_cr() {
    init!("<a  /><b2\rdata=\"foo\" >\r");

    assert_eq!(
        // from spec: <p><a  /><b2\ndata=\"foo\" ></p>
        [
            paragraph!(html!("<a  />"), html!("<b2\rdata=\"foo\" >"))
        ].as_slice(),
        body(&mut StringData::new("<a  /><b2\rdata=\"foo\" >\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8977
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8977>
/// <https://spec.commonmark.org/0.29/#example-611>
fn t611_cr_nl() {
    init!("<a  /><b2\r\ndata=\"foo\" >\r\n");

    assert_eq!(
        // from spec: <p><a  /><b2\ndata=\"foo\" ></p>
        [
            paragraph!(html!("<a  />"), html!("<b2\r\ndata=\"foo\" >"))
        ].as_slice(),
        body(&mut StringData::new("<a  /><b2\r\ndata=\"foo\" >\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8977
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8977>
/// <https://spec.commonmark.org/0.29/#example-611>
fn t611_no_nl() {
    init!("<a  /><b2\ndata=\"foo\" >");

    assert_eq!(
        // from spec: <p><a  /><b2\ndata=\"foo\" ></p>
        [
            paragraph!(html!("<a  />"), html!("<b2\ndata=\"foo\" >"))
        ].as_slice(),
        body(&mut StringData::new("<a  /><b2\ndata=\"foo\" >", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8977
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8977>
/// <https://spec.commonmark.org/0.29/#example-611>
fn t611_tab() {
    init!("<a\t\t/><b2\ndata=\"foo\"\t>\n");

    assert_eq!(
        // from spec: <p><a  /><b2\ndata=\"foo\" ></p>
        [
            paragraph!(html!("<a		/>"),	html!("<b2\ndata=\"foo\"	>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\t\t/><b2\ndata=\"foo\"\t>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8988
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8988>
/// <https://spec.commonmark.org/0.29/#example-612>
fn t612() {
    init!("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 />\n");

    assert_eq!(
        // from spec: <p><a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 /></p>
        [
            paragraph!(html!("<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />"))
        ].as_slice(),
        body(&mut StringData::new("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 />\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8988
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8988>
/// <https://spec.commonmark.org/0.29/#example-612>
fn t612_cr() {
    init!("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\r_boolean zoop:33=zoop:33 />\r");

    assert_eq!(
        // from spec: <p><a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 /></p>
        [
            paragraph!(html!("<a foo=\"bar\" bam = 'baz <em>\"</em>'\r_boolean zoop:33=zoop:33 />"))
        ].as_slice(),
        body(&mut StringData::new("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\r_boolean zoop:33=zoop:33 />\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8988
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8988>
/// <https://spec.commonmark.org/0.29/#example-612>
fn t612_cr_nl() {
    init!("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\r\n_boolean zoop:33=zoop:33 />\r\n");

    assert_eq!(
        // from spec: <p><a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 /></p>
        [
            paragraph!(html!("<a foo=\"bar\" bam = 'baz <em>\"</em>'\r\n_boolean zoop:33=zoop:33 />"))
        ].as_slice(),
        body(&mut StringData::new("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\r\n_boolean zoop:33=zoop:33 />\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8988
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8988>
/// <https://spec.commonmark.org/0.29/#example-612>
fn t612_no_nl() {
    init!("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 />");

    assert_eq!(
        // from spec: <p><a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 /></p>
        [
            paragraph!(html!("<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />"))
        ].as_slice(),
        body(&mut StringData::new("<a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 />", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8988
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8988>
/// <https://spec.commonmark.org/0.29/#example-612>
fn t612_tab() {
    init!("<a\tfoo=\"bar\"\tbam\t=\t\'baz\t<em>\"</em>\'\n_boolean\tzoop:33=zoop:33\t/>\n");

    assert_eq!(
        // from spec: <p><a foo=\"bar\" bam = \'baz <em>\"</em>\'\n_boolean zoop:33=zoop:33 /></p>
        [
            paragraph!(html!("<a	foo=\"bar\"	bam	=	'baz	<em>\"</em>'\n_boolean	zoop:33=zoop:33	/>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\tfoo=\"bar\"\tbam\t=\t\'baz\t<em>\"</em>\'\n_boolean\tzoop:33=zoop:33\t/>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8999>
/// <https://spec.commonmark.org/0.29/#example-613>
fn t613() {
    init!("Foo <responsive-image src=\"foo.jpg\" />\n");

    assert_eq!(
        // from spec: <p>Foo <responsive-image src=\"foo.jpg\" /></p>
        [
            paragraph!(plain!("Foo "), html!("<responsive-image src=\"foo.jpg\" />"))
        ].as_slice(),
        body(&mut StringData::new("Foo <responsive-image src=\"foo.jpg\" />\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8999>
/// <https://spec.commonmark.org/0.29/#example-613>
fn t613_cr() {
    init!("Foo <responsive-image src=\"foo.jpg\" />\r");

    assert_eq!(
        // from spec: <p>Foo <responsive-image src=\"foo.jpg\" /></p>
        [
            paragraph!(plain!("Foo "), html!("<responsive-image src=\"foo.jpg\" />"))
        ].as_slice(),
        body(&mut StringData::new("Foo <responsive-image src=\"foo.jpg\" />\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8999>
/// <https://spec.commonmark.org/0.29/#example-613>
fn t613_cr_nl() {
    init!("Foo <responsive-image src=\"foo.jpg\" />\r\n");

    assert_eq!(
        // from spec: <p>Foo <responsive-image src=\"foo.jpg\" /></p>
        [
            paragraph!(plain!("Foo "), html!("<responsive-image src=\"foo.jpg\" />"))
        ].as_slice(),
        body(&mut StringData::new("Foo <responsive-image src=\"foo.jpg\" />\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8999>
/// <https://spec.commonmark.org/0.29/#example-613>
fn t613_no_nl() {
    init!("Foo <responsive-image src=\"foo.jpg\" />");

    assert_eq!(
        // from spec: <p>Foo <responsive-image src=\"foo.jpg\" /></p>
        [
            paragraph!(plain!("Foo "), html!("<responsive-image src=\"foo.jpg\" />"))
        ].as_slice(),
        body(&mut StringData::new("Foo <responsive-image src=\"foo.jpg\" />", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 8999
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L8999>
/// <https://spec.commonmark.org/0.29/#example-613>
fn t613_tab() {
    init!("Foo\t<responsive-image\tsrc=\"foo.jpg\"\t/>\n");

    assert_eq!(
        // from spec: <p>Foo <responsive-image src=\"foo.jpg\" /></p>
        [
            paragraph!(plain!("Foo	"),	html!("<responsive-image	src=\"foo.jpg\"	/>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\t<responsive-image\tsrc=\"foo.jpg\"\t/>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9008>
/// <https://spec.commonmark.org/0.29/#example-614>
fn t614() {
    init!("<33> <__>\n");

    assert_eq!(
        // from spec: <p>&lt;33&gt; &lt;__&gt;</p>
        [
            paragraph!(plain!("<33> <__>"))
        ].as_slice(),
        body(&mut StringData::new("<33> <__>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9008>
/// <https://spec.commonmark.org/0.29/#example-614>
fn t614_cr() {
    init!("<33> <__>\r");

    assert_eq!(
        // from spec: <p>&lt;33&gt; &lt;__&gt;</p>
        [
            paragraph!(plain!("<33> <__>"))
        ].as_slice(),
        body(&mut StringData::new("<33> <__>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9008>
/// <https://spec.commonmark.org/0.29/#example-614>
fn t614_cr_nl() {
    init!("<33> <__>\r\n");

    assert_eq!(
        // from spec: <p>&lt;33&gt; &lt;__&gt;</p>
        [
            paragraph!(plain!("<33> <__>"))
        ].as_slice(),
        body(&mut StringData::new("<33> <__>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9008>
/// <https://spec.commonmark.org/0.29/#example-614>
fn t614_no_nl() {
    init!("<33> <__>");

    assert_eq!(
        // from spec: <p>&lt;33&gt; &lt;__&gt;</p>
        [
            paragraph!(plain!("<33> <__>"))
        ].as_slice(),
        body(&mut StringData::new("<33> <__>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9008
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9008>
/// <https://spec.commonmark.org/0.29/#example-614>
fn t614_tab() {
    init!("<33>\t<__>\n");

    assert_eq!(
        // from spec: <p>&lt;33&gt; &lt;__&gt;</p>
        [
            paragraph!(plain!("<33>	<__>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<33>\t<__>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9017
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9017>
/// <https://spec.commonmark.org/0.29/#example-615>
fn t615() {
    init!("<a h*#ref=\"hi\">\n");

    assert_eq!(
        // from spec: <p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
        [
            paragraph!(plain!("<a h*#ref=\"hi\">"))
        ].as_slice(),
        body(&mut StringData::new("<a h*#ref=\"hi\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9017
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9017>
/// <https://spec.commonmark.org/0.29/#example-615>
fn t615_cr() {
    init!("<a h*#ref=\"hi\">\r");

    assert_eq!(
        // from spec: <p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
        [
            paragraph!(plain!("<a h*#ref=\"hi\">"))
        ].as_slice(),
        body(&mut StringData::new("<a h*#ref=\"hi\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9017
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9017>
/// <https://spec.commonmark.org/0.29/#example-615>
fn t615_cr_nl() {
    init!("<a h*#ref=\"hi\">\r\n");

    assert_eq!(
        // from spec: <p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
        [
            paragraph!(plain!("<a h*#ref=\"hi\">"))
        ].as_slice(),
        body(&mut StringData::new("<a h*#ref=\"hi\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9017
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9017>
/// <https://spec.commonmark.org/0.29/#example-615>
fn t615_no_nl() {
    init!("<a h*#ref=\"hi\">");

    assert_eq!(
        // from spec: <p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
        [
            paragraph!(plain!("<a h*#ref=\"hi\">"))
        ].as_slice(),
        body(&mut StringData::new("<a h*#ref=\"hi\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9017
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9017>
/// <https://spec.commonmark.org/0.29/#example-615>
fn t615_tab() {
    init!("<a\th*#ref=\"hi\">\n");

    assert_eq!(
        // from spec: <p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
        [
            paragraph!(plain!("<a	h*#ref=\"hi\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\th*#ref=\"hi\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9026
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9026>
/// <https://spec.commonmark.org/0.29/#example-616>
fn t616() {
    init!("<a href=\"hi\'> <a href=hi\'>\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;hi\'&gt; &lt;a href=hi\'&gt;</p>
        [
            paragraph!(plain!("<a href=\"hi\'> <a href=hi\'>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"hi\'> <a href=hi\'>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9026
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9026>
/// <https://spec.commonmark.org/0.29/#example-616>
fn t616_cr() {
    init!("<a href=\"hi\'> <a href=hi\'>\r");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;hi\'&gt; &lt;a href=hi\'&gt;</p>
        [
            paragraph!(plain!("<a href=\"hi\'> <a href=hi\'>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"hi\'> <a href=hi\'>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9026
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9026>
/// <https://spec.commonmark.org/0.29/#example-616>
fn t616_cr_nl() {
    init!("<a href=\"hi\'> <a href=hi\'>\r\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;hi\'&gt; &lt;a href=hi\'&gt;</p>
        [
            paragraph!(plain!("<a href=\"hi\'> <a href=hi\'>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"hi\'> <a href=hi\'>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9026
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9026>
/// <https://spec.commonmark.org/0.29/#example-616>
fn t616_no_nl() {
    init!("<a href=\"hi\'> <a href=hi\'>");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;hi\'&gt; &lt;a href=hi\'&gt;</p>
        [
            paragraph!(plain!("<a href=\"hi\'> <a href=hi\'>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"hi\'> <a href=hi\'>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9026
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9026>
/// <https://spec.commonmark.org/0.29/#example-616>
fn t616_tab() {
    init!("<a\thref=\"hi\'>\t<a\thref=hi\'>\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;hi\'&gt; &lt;a href=hi\'&gt;</p>
        [
            paragraph!(plain!("<a	href=\"hi\'>	<a	href=hi\'>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"hi\'>\t<a\thref=hi\'>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9035
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9035>
/// <https://spec.commonmark.org/0.29/#example-617>
fn t617() {
    init!("< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n");

    assert_eq!(
        // from spec: <p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>
        [
            paragraph!(plain!("< a><"), SoftBreak, plain!("foo><bar/ >"), SoftBreak, plain!("<foo bar=baz"), SoftBreak, plain!("bim!bop />"))
        ].as_slice(),
        body(&mut StringData::new("< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9035
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9035>
/// <https://spec.commonmark.org/0.29/#example-617>
fn t617_cr() {
    init!("< a><\rfoo><bar/ >\r<foo bar=baz\rbim!bop />\r");

    assert_eq!(
        // from spec: <p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>
        [
            paragraph!(plain!("< a><"), SoftBreak, plain!("foo><bar/ >"), SoftBreak, plain!("<foo bar=baz"), SoftBreak, plain!("bim!bop />"))
        ].as_slice(),
        body(&mut StringData::new("< a><\rfoo><bar/ >\r<foo bar=baz\rbim!bop />\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9035
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9035>
/// <https://spec.commonmark.org/0.29/#example-617>
fn t617_cr_nl() {
    init!("< a><\r\nfoo><bar/ >\r\n<foo bar=baz\r\nbim!bop />\r\n");

    assert_eq!(
        // from spec: <p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>
        [
            paragraph!(plain!("< a><"), SoftBreak, plain!("foo><bar/ >"), SoftBreak, plain!("<foo bar=baz"), SoftBreak, plain!("bim!bop />"))
        ].as_slice(),
        body(&mut StringData::new("< a><\r\nfoo><bar/ >\r\n<foo bar=baz\r\nbim!bop />\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9035
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9035>
/// <https://spec.commonmark.org/0.29/#example-617>
fn t617_no_nl() {
    init!("< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />");

    assert_eq!(
        // from spec: <p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>
        [
            paragraph!(plain!("< a><"), SoftBreak, plain!("foo><bar/ >"), SoftBreak, plain!("<foo bar=baz"), SoftBreak, plain!("bim!bop />"))
        ].as_slice(),
        body(&mut StringData::new("< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9035
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9035>
/// <https://spec.commonmark.org/0.29/#example-617>
fn t617_tab() {
    init!("<\ta><\nfoo><bar/\t>\n<foo\tbar=baz\nbim!bop\t/>\n");

    assert_eq!(
        // from spec: <p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>
        [
            paragraph!(plain!("<	a><"), SoftBreak, plain!("foo><bar/	>"), SoftBreak, plain!("<foo	bar=baz"), SoftBreak, plain!("bim!bop	/>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<\ta><\nfoo><bar/\t>\n<foo\tbar=baz\nbim!bop\t/>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9050>
/// <https://spec.commonmark.org/0.29/#example-618>
fn t618() {
    init!("<a href=\'bar\'title=title>\n");

    assert_eq!(
        // from spec: <p>&lt;a href=\'bar\'title=title&gt;</p>
        [
            paragraph!(plain!("<a href=\'bar\'title=title>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\'bar\'title=title>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9050>
/// <https://spec.commonmark.org/0.29/#example-618>
fn t618_cr() {
    init!("<a href=\'bar\'title=title>\r");

    assert_eq!(
        // from spec: <p>&lt;a href=\'bar\'title=title&gt;</p>
        [
            paragraph!(plain!("<a href=\'bar\'title=title>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\'bar\'title=title>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9050>
/// <https://spec.commonmark.org/0.29/#example-618>
fn t618_cr_nl() {
    init!("<a href=\'bar\'title=title>\r\n");

    assert_eq!(
        // from spec: <p>&lt;a href=\'bar\'title=title&gt;</p>
        [
            paragraph!(plain!("<a href=\'bar\'title=title>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\'bar\'title=title>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9050>
/// <https://spec.commonmark.org/0.29/#example-618>
fn t618_no_nl() {
    init!("<a href=\'bar\'title=title>");

    assert_eq!(
        // from spec: <p>&lt;a href=\'bar\'title=title&gt;</p>
        [
            paragraph!(plain!("<a href=\'bar\'title=title>"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\'bar\'title=title>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9050
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9050>
/// <https://spec.commonmark.org/0.29/#example-618>
fn t618_tab() {
    init!("<a\thref=\'bar\'title=title>\n");

    assert_eq!(
        // from spec: <p>&lt;a href=\'bar\'title=title&gt;</p>
        [
            paragraph!(plain!("<a	href=\'bar\'title=title>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\'bar\'title=title>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9059>
/// <https://spec.commonmark.org/0.29/#example-619>
fn t619() {
    init!("</a></foo >\n");

    assert_eq!(
        // from spec: <p></a></foo ></p>
        [
            paragraph!(html!("</a>"), html!("</foo >"))
        ].as_slice(),
        body(&mut StringData::new("</a></foo >\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9059>
/// <https://spec.commonmark.org/0.29/#example-619>
fn t619_cr() {
    init!("</a></foo >\r");

    assert_eq!(
        // from spec: <p></a></foo ></p>
        [
            paragraph!(html!("</a>"), html!("</foo >"))
        ].as_slice(),
        body(&mut StringData::new("</a></foo >\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9059>
/// <https://spec.commonmark.org/0.29/#example-619>
fn t619_cr_nl() {
    init!("</a></foo >\r\n");

    assert_eq!(
        // from spec: <p></a></foo ></p>
        [
            paragraph!(html!("</a>"), html!("</foo >"))
        ].as_slice(),
        body(&mut StringData::new("</a></foo >\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9059>
/// <https://spec.commonmark.org/0.29/#example-619>
fn t619_no_nl() {
    init!("</a></foo >");

    assert_eq!(
        // from spec: <p></a></foo ></p>
        [
            paragraph!(html!("</a>"), html!("</foo >"))
        ].as_slice(),
        body(&mut StringData::new("</a></foo >", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9059
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9059>
/// <https://spec.commonmark.org/0.29/#example-619>
fn t619_tab() {
    init!("</a></foo\t>\n");

    assert_eq!(
        // from spec: <p></a></foo ></p>
        [
            paragraph!(html!("</a>"),	html!("</foo	>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("</a></foo\t>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9068
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9068>
/// <https://spec.commonmark.org/0.29/#example-620>
fn t620() {
    init!("</a href=\"foo\">\n");

    assert_eq!(
        // from spec: <p>&lt;/a href=&quot;foo&quot;&gt;</p>
        [
            paragraph!(plain!("</a href=\"foo\">"))
        ].as_slice(),
        body(&mut StringData::new("</a href=\"foo\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9068
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9068>
/// <https://spec.commonmark.org/0.29/#example-620>
fn t620_cr() {
    init!("</a href=\"foo\">\r");

    assert_eq!(
        // from spec: <p>&lt;/a href=&quot;foo&quot;&gt;</p>
        [
            paragraph!(plain!("</a href=\"foo\">"))
        ].as_slice(),
        body(&mut StringData::new("</a href=\"foo\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9068
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9068>
/// <https://spec.commonmark.org/0.29/#example-620>
fn t620_cr_nl() {
    init!("</a href=\"foo\">\r\n");

    assert_eq!(
        // from spec: <p>&lt;/a href=&quot;foo&quot;&gt;</p>
        [
            paragraph!(plain!("</a href=\"foo\">"))
        ].as_slice(),
        body(&mut StringData::new("</a href=\"foo\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9068
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9068>
/// <https://spec.commonmark.org/0.29/#example-620>
fn t620_no_nl() {
    init!("</a href=\"foo\">");

    assert_eq!(
        // from spec: <p>&lt;/a href=&quot;foo&quot;&gt;</p>
        [
            paragraph!(plain!("</a href=\"foo\">"))
        ].as_slice(),
        body(&mut StringData::new("</a href=\"foo\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9068
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9068>
/// <https://spec.commonmark.org/0.29/#example-620>
fn t620_tab() {
    init!("</a\thref=\"foo\">\n");

    assert_eq!(
        // from spec: <p>&lt;/a href=&quot;foo&quot;&gt;</p>
        [
            paragraph!(plain!("</a	href=\"foo\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("</a\thref=\"foo\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9077
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9077>
/// <https://spec.commonmark.org/0.29/#example-621>
fn t621() {
    init!("foo <!-- this is a\ncomment - with hyphen -->\n");

    assert_eq!(
        // from spec: <p>foo <!-- this is a\ncomment - with hyphen --></p>
        [
            paragraph!(plain!("foo "), html!("<!-- this is a\ncomment - with hyphen -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- this is a\ncomment - with hyphen -->\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9077
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9077>
/// <https://spec.commonmark.org/0.29/#example-621>
fn t621_cr() {
    init!("foo <!-- this is a\rcomment - with hyphen -->\r");

    assert_eq!(
        // from spec: <p>foo <!-- this is a\ncomment - with hyphen --></p>
        [
            paragraph!(plain!("foo "), html!("<!-- this is a\rcomment - with hyphen -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- this is a\rcomment - with hyphen -->\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9077
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9077>
/// <https://spec.commonmark.org/0.29/#example-621>
fn t621_cr_nl() {
    init!("foo <!-- this is a\r\ncomment - with hyphen -->\r\n");

    assert_eq!(
        // from spec: <p>foo <!-- this is a\ncomment - with hyphen --></p>
        [
            paragraph!(plain!("foo "), html!("<!-- this is a\r\ncomment - with hyphen -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- this is a\r\ncomment - with hyphen -->\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9077
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9077>
/// <https://spec.commonmark.org/0.29/#example-621>
fn t621_no_nl() {
    init!("foo <!-- this is a\ncomment - with hyphen -->");

    assert_eq!(
        // from spec: <p>foo <!-- this is a\ncomment - with hyphen --></p>
        [
            paragraph!(plain!("foo "), html!("<!-- this is a\ncomment - with hyphen -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- this is a\ncomment - with hyphen -->", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9077
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9077>
/// <https://spec.commonmark.org/0.29/#example-621>
fn t621_tab() {
    init!("foo\t<!--\tthis\tis\ta\ncomment\t-\twith\thyphen\t-->\n");

    assert_eq!(
        // from spec: <p>foo <!-- this is a\ncomment - with hyphen --></p>
        [
            paragraph!(plain!("foo	"), html!("<!--\tthis\tis\ta\ncomment\t-\twith\thyphen\t-->"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<!--\tthis\tis\ta\ncomment\t-\twith\thyphen\t-->\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9086
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9086>
/// <https://spec.commonmark.org/0.29/#example-622>
fn t622() {
    init!("foo <!-- not a comment -- two hyphens -->\n");

    assert_eq!(
        // from spec: <p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>
        [
            paragraph!(plain!("foo <!-- not a comment -- two hyphens -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- not a comment -- two hyphens -->\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9086
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9086>
/// <https://spec.commonmark.org/0.29/#example-622>
fn t622_cr() {
    init!("foo <!-- not a comment -- two hyphens -->\r");

    assert_eq!(
        // from spec: <p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>
        [
            paragraph!(plain!("foo <!-- not a comment -- two hyphens -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- not a comment -- two hyphens -->\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9086
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9086>
/// <https://spec.commonmark.org/0.29/#example-622>
fn t622_cr_nl() {
    init!("foo <!-- not a comment -- two hyphens -->\r\n");

    assert_eq!(
        // from spec: <p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>
        [
            paragraph!(plain!("foo <!-- not a comment -- two hyphens -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- not a comment -- two hyphens -->\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9086
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9086>
/// <https://spec.commonmark.org/0.29/#example-622>
fn t622_no_nl() {
    init!("foo <!-- not a comment -- two hyphens -->");

    assert_eq!(
        // from spec: <p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>
        [
            paragraph!(plain!("foo <!-- not a comment -- two hyphens -->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!-- not a comment -- two hyphens -->", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9086
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9086>
/// <https://spec.commonmark.org/0.29/#example-622>
fn t622_tab() {
    init!("foo\t<!--\tnot\ta\tcomment\t--\ttwo\thyphens\t-->\n");

    assert_eq!(
        // from spec: <p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>
        [
            paragraph!(plain!("foo	<!--	not	a	comment	--	two	hyphens	-->"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<!--\tnot\ta\tcomment\t--\ttwo\thyphens\t-->\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9095
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9095>
/// <https://spec.commonmark.org/0.29/#example-623>
fn t623() {
    init!("foo <!--> foo -->\n\nfoo <!-- foo--->\n");

    assert_eq!(
        // from spec: <p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>
        [
            paragraph!(plain!("foo <!--> foo -->")), paragraph!(plain!("foo <!-- foo--->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!--> foo -->\n\nfoo <!-- foo--->\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9095
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9095>
/// <https://spec.commonmark.org/0.29/#example-623>
fn t623_cr() {
    init!("foo <!--> foo -->\r\rfoo <!-- foo--->\r");

    assert_eq!(
        // from spec: <p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>
        [
            paragraph!(plain!("foo <!--> foo -->")), paragraph!(plain!("foo <!-- foo--->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!--> foo -->\r\rfoo <!-- foo--->\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9095
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9095>
/// <https://spec.commonmark.org/0.29/#example-623>
fn t623_cr_nl() {
    init!("foo <!--> foo -->\r\n\r\nfoo <!-- foo--->\r\n");

    assert_eq!(
        // from spec: <p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>
        [
            paragraph!(plain!("foo <!--> foo -->")), paragraph!(plain!("foo <!-- foo--->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!--> foo -->\r\n\r\nfoo <!-- foo--->\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9095
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9095>
/// <https://spec.commonmark.org/0.29/#example-623>
fn t623_no_nl() {
    init!("foo <!--> foo -->\n\nfoo <!-- foo--->");

    assert_eq!(
        // from spec: <p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>
        [
            paragraph!(plain!("foo <!--> foo -->")), paragraph!(plain!("foo <!-- foo--->"))
        ].as_slice(),
        body(&mut StringData::new("foo <!--> foo -->\n\nfoo <!-- foo--->", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9095
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9095>
/// <https://spec.commonmark.org/0.29/#example-623>
fn t623_tab() {
    init!("foo\t<!-->\tfoo\t-->\n\nfoo\t<!--\tfoo--->\n");

    assert_eq!(
        // from spec: <p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>
        [
            paragraph!(plain!("foo	<!-->	foo	-->")), paragraph!(plain!("foo	<!--	foo--->"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<!-->\tfoo\t-->\n\nfoo\t<!--\tfoo--->\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9107
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9107>
/// <https://spec.commonmark.org/0.29/#example-624>
fn t624() {
    init!("foo <?php echo $a; ?>\n");

    assert_eq!(
        // from spec: <p>foo <?php echo $a; ?></p>
        [
            paragraph!(plain!("foo "), html!("<?php echo $a; ?>"))
        ].as_slice(),
        body(&mut StringData::new("foo <?php echo $a; ?>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9107
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9107>
/// <https://spec.commonmark.org/0.29/#example-624>
fn t624_cr() {
    init!("foo <?php echo $a; ?>\r");

    assert_eq!(
        // from spec: <p>foo <?php echo $a; ?></p>
        [
            paragraph!(plain!("foo "), html!("<?php echo $a; ?>"))
        ].as_slice(),
        body(&mut StringData::new("foo <?php echo $a; ?>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9107
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9107>
/// <https://spec.commonmark.org/0.29/#example-624>
fn t624_cr_nl() {
    init!("foo <?php echo $a; ?>\r\n");

    assert_eq!(
        // from spec: <p>foo <?php echo $a; ?></p>
        [
            paragraph!(plain!("foo "), html!("<?php echo $a; ?>"))
        ].as_slice(),
        body(&mut StringData::new("foo <?php echo $a; ?>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9107
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9107>
/// <https://spec.commonmark.org/0.29/#example-624>
fn t624_no_nl() {
    init!("foo <?php echo $a; ?>");

    assert_eq!(
        // from spec: <p>foo <?php echo $a; ?></p>
        [
            paragraph!(plain!("foo "), html!("<?php echo $a; ?>"))
        ].as_slice(),
        body(&mut StringData::new("foo <?php echo $a; ?>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9107
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9107>
/// <https://spec.commonmark.org/0.29/#example-624>
fn t624_tab() {
    init!("foo\t<?php\techo\t$a;\t?>\n");

    assert_eq!(
        // from spec: <p>foo <?php echo $a; ?></p>
        [
            paragraph!(plain!("foo	"), html!("<?php\techo\t$a;\t?>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<?php\techo\t$a;\t?>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9116>
/// <https://spec.commonmark.org/0.29/#example-625>
fn t625() {
    init!("foo <!ELEMENT br EMPTY>\n");

    assert_eq!(
        // from spec: <p>foo <!ELEMENT br EMPTY></p>
        [
            paragraph!(plain!("foo "), html!("<!ELEMENT br EMPTY>"))
        ].as_slice(),
        body(&mut StringData::new("foo <!ELEMENT br EMPTY>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9116>
/// <https://spec.commonmark.org/0.29/#example-625>
fn t625_cr() {
    init!("foo <!ELEMENT br EMPTY>\r");

    assert_eq!(
        // from spec: <p>foo <!ELEMENT br EMPTY></p>
        [
            paragraph!(plain!("foo "), html!("<!ELEMENT br EMPTY>"))
        ].as_slice(),
        body(&mut StringData::new("foo <!ELEMENT br EMPTY>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9116>
/// <https://spec.commonmark.org/0.29/#example-625>
fn t625_cr_nl() {
    init!("foo <!ELEMENT br EMPTY>\r\n");

    assert_eq!(
        // from spec: <p>foo <!ELEMENT br EMPTY></p>
        [
            paragraph!(plain!("foo "), html!("<!ELEMENT br EMPTY>"))
        ].as_slice(),
        body(&mut StringData::new("foo <!ELEMENT br EMPTY>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9116>
/// <https://spec.commonmark.org/0.29/#example-625>
fn t625_no_nl() {
    init!("foo <!ELEMENT br EMPTY>");

    assert_eq!(
        // from spec: <p>foo <!ELEMENT br EMPTY></p>
        [
            paragraph!(plain!("foo "), html!("<!ELEMENT br EMPTY>"))
        ].as_slice(),
        body(&mut StringData::new("foo <!ELEMENT br EMPTY>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9116
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9116>
/// <https://spec.commonmark.org/0.29/#example-625>
fn t625_tab() {
    init!("foo\t<!ELEMENT\tbr\tEMPTY>\n");

    assert_eq!(
        // from spec: <p>foo <!ELEMENT br EMPTY></p>
        [
            paragraph!(plain!("foo	"),	html!("<!ELEMENT	br	EMPTY>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<!ELEMENT\tbr\tEMPTY>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9125
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9125>
/// <https://spec.commonmark.org/0.29/#example-626>
fn t626() {
    init!("foo <![CDATA[>&<]]>\n");

    assert_eq!(
        // from spec: <p>foo <![CDATA[>&<]]></p>
        [
            paragraph!(plain!("foo "), html!("<![CDATA[>&<]]>"))
        ].as_slice(),
        body(&mut StringData::new("foo <![CDATA[>&<]]>\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9125
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9125>
/// <https://spec.commonmark.org/0.29/#example-626>
fn t626_cr() {
    init!("foo <![CDATA[>&<]]>\r");

    assert_eq!(
        // from spec: <p>foo <![CDATA[>&<]]></p>
        [
            paragraph!(plain!("foo "), html!("<![CDATA[>&<]]>"))
        ].as_slice(),
        body(&mut StringData::new("foo <![CDATA[>&<]]>\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9125
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9125>
/// <https://spec.commonmark.org/0.29/#example-626>
fn t626_cr_nl() {
    init!("foo <![CDATA[>&<]]>\r\n");

    assert_eq!(
        // from spec: <p>foo <![CDATA[>&<]]></p>
        [
            paragraph!(plain!("foo "), html!("<![CDATA[>&<]]>"))
        ].as_slice(),
        body(&mut StringData::new("foo <![CDATA[>&<]]>\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9125
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9125>
/// <https://spec.commonmark.org/0.29/#example-626>
fn t626_no_nl() {
    init!("foo <![CDATA[>&<]]>");

    assert_eq!(
        // from spec: <p>foo <![CDATA[>&<]]></p>
        [
            paragraph!(plain!("foo "), html!("<![CDATA[>&<]]>"))
        ].as_slice(),
        body(&mut StringData::new("foo <![CDATA[>&<]]>", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9125
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9125>
/// <https://spec.commonmark.org/0.29/#example-626>
fn t626_tab() {
    init!("foo\t<![CDATA[>&<]]>\n");

    assert_eq!(
        // from spec: <p>foo <![CDATA[>&<]]></p>
        [
            paragraph!(plain!("foo	"),	html!("<![CDATA[>&<]]>"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<![CDATA[>&<]]>\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9135>
/// <https://spec.commonmark.org/0.29/#example-627>
fn t627() {
    init!("foo <a href=\"&ouml;\">\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"&ouml;\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="&ouml;">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"&ouml;\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9135>
/// <https://spec.commonmark.org/0.29/#example-627>
fn t627_cr() {
    init!("foo <a href=\"&ouml;\">\r");

    assert_eq!(
        // from spec: <p>foo <a href=\"&ouml;\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="&ouml;">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"&ouml;\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9135>
/// <https://spec.commonmark.org/0.29/#example-627>
fn t627_cr_nl() {
    init!("foo <a href=\"&ouml;\">\r\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"&ouml;\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="&ouml;">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"&ouml;\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9135>
/// <https://spec.commonmark.org/0.29/#example-627>
fn t627_no_nl() {
    init!("foo <a href=\"&ouml;\">");

    assert_eq!(
        // from spec: <p>foo <a href=\"&ouml;\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="&ouml;">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"&ouml;\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9135
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9135>
/// <https://spec.commonmark.org/0.29/#example-627>
fn t627_tab() {
    init!("foo\t<a\thref=\"&ouml;\">\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"&ouml;\"></p>
        [
            paragraph!(plain!("foo	"),	html!(r#"<a	href="&ouml;">"#))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<a\thref=\"&ouml;\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9144
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9144>
/// <https://spec.commonmark.org/0.29/#example-628>
fn t628() {
    init!("foo <a href=\"\\*\">\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"\\*\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="\*">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"\\*\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9144
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9144>
/// <https://spec.commonmark.org/0.29/#example-628>
fn t628_cr() {
    init!("foo <a href=\"\\*\">\r");

    assert_eq!(
        // from spec: <p>foo <a href=\"\\*\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="\*">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"\\*\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9144
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9144>
/// <https://spec.commonmark.org/0.29/#example-628>
fn t628_cr_nl() {
    init!("foo <a href=\"\\*\">\r\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"\\*\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="\*">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"\\*\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9144
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9144>
/// <https://spec.commonmark.org/0.29/#example-628>
fn t628_no_nl() {
    init!("foo <a href=\"\\*\">");

    assert_eq!(
        // from spec: <p>foo <a href=\"\\*\"></p>
        [
            paragraph!(plain!("foo "), html!(r#"<a href="\*">"#))
        ].as_slice(),
        body(&mut StringData::new("foo <a href=\"\\*\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9144
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9144>
/// <https://spec.commonmark.org/0.29/#example-628>
fn t628_tab() {
    init!("foo\t<a\thref=\"\\*\">\n");

    assert_eq!(
        // from spec: <p>foo <a href=\"\\*\"></p>
        [
            paragraph!(plain!("foo	"),	html!(r#"<a	href="\*">"#))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\t<a\thref=\"\\*\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9151>
/// <https://spec.commonmark.org/0.29/#example-629>
fn t629() {
    init!("<a href=\"\\\"\">\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;&quot;&quot;&gt;</p>
        [
            paragraph!(plain!("<a href=\"\"\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"\\\"\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9151>
/// <https://spec.commonmark.org/0.29/#example-629>
fn t629_cr() {
    init!("<a href=\"\\\"\">\r");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;&quot;&quot;&gt;</p>
        [
            paragraph!(plain!("<a href=\"\"\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"\\\"\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9151>
/// <https://spec.commonmark.org/0.29/#example-629>
fn t629_cr_nl() {
    init!("<a href=\"\\\"\">\r\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;&quot;&quot;&gt;</p>
        [
            paragraph!(plain!("<a href=\"\"\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"\\\"\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9151>
/// <https://spec.commonmark.org/0.29/#example-629>
fn t629_no_nl() {
    init!("<a href=\"\\\"\">");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;&quot;&quot;&gt;</p>
        [
            paragraph!(plain!("<a href=\"\"\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"\\\"\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9151
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9151>
/// <https://spec.commonmark.org/0.29/#example-629>
fn t629_tab() {
    init!("<a\thref=\"\\\"\">\n");

    assert_eq!(
        // from spec: <p>&lt;a href=&quot;&quot;&quot;&gt;</p>
        [
            paragraph!(plain!("<a	href=\"\"\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"\\\"\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9165
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9165>
/// <https://spec.commonmark.org/0.29/#example-630>
fn t630() {
    init!("foo  \nbaz\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo  \nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9165
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9165>
/// <https://spec.commonmark.org/0.29/#example-630>
fn t630_cr() {
    init!("foo  \rbaz\r");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo  \rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9165
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9165>
/// <https://spec.commonmark.org/0.29/#example-630>
fn t630_cr_nl() {
    init!("foo  \r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo  \r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9165
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9165>
/// <https://spec.commonmark.org/0.29/#example-630>
fn t630_no_nl() {
    init!("foo  \nbaz");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo  \nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9177>
/// <https://spec.commonmark.org/0.29/#example-631>
fn t631() {
    init!("foo\\\nbaz\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbaz</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9177>
/// <https://spec.commonmark.org/0.29/#example-631>
fn t631_cr() {
    init!("foo\\\rbaz\r");

    assert_eq!(
        // from spec: <p>foo<br />\nbaz</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9177>
/// <https://spec.commonmark.org/0.29/#example-631>
fn t631_cr_nl() {
    init!("foo\\\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbaz</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9177
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9177>
/// <https://spec.commonmark.org/0.29/#example-631>
fn t631_no_nl() {
    init!("foo\\\nbaz");

    assert_eq!(
        // from spec: <p>foo<br />\nbaz</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9188>
/// <https://spec.commonmark.org/0.29/#example-632>
fn t632() {
    init!("foo       \nbaz\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo       \nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9188>
/// <https://spec.commonmark.org/0.29/#example-632>
fn t632_cr() {
    init!("foo       \rbaz\r");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo       \rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9188>
/// <https://spec.commonmark.org/0.29/#example-632>
fn t632_cr_nl() {
    init!("foo       \r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo       \r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9188
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9188>
/// <https://spec.commonmark.org/0.29/#example-632>
fn t632_no_nl() {
    init!("foo       \nbaz");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo       \nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9199>
/// <https://spec.commonmark.org/0.29/#example-633>
fn t633() {
    init!("foo  \n     bar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo  \n     bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9199>
/// <https://spec.commonmark.org/0.29/#example-633>
fn t633_cr() {
    init!("foo  \r     bar\r");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo  \r     bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9199>
/// <https://spec.commonmark.org/0.29/#example-633>
fn t633_cr_nl() {
    init!("foo  \r\n     bar\r\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo  \r\n     bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9199>
/// <https://spec.commonmark.org/0.29/#example-633>
fn t633_no_nl() {
    init!("foo  \n     bar");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo  \n     bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9199
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9199>
/// <https://spec.commonmark.org/0.29/#example-633>
fn t633_tab() {
    init!("foo  \n    \tbar\n");

    assert_eq!(
        // from spec: <p>foo\nbar</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo  \n    \tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9208
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9208>
/// <https://spec.commonmark.org/0.29/#example-634>
fn t634() {
    init!("foo\\\n     bar\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\n     bar\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9208
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9208>
/// <https://spec.commonmark.org/0.29/#example-634>
fn t634_cr() {
    init!("foo\\\r     bar\r");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r     bar\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9208
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9208>
/// <https://spec.commonmark.org/0.29/#example-634>
fn t634_cr_nl() {
    init!("foo\\\r\n     bar\r\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r\n     bar\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9208
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9208>
/// <https://spec.commonmark.org/0.29/#example-634>
fn t634_no_nl() {
    init!("foo\\\n     bar");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\n     bar", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9208
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9208>
/// <https://spec.commonmark.org/0.29/#example-634>
fn t634_tab() {
    init!("foo\\\n    \tbar\n");

    assert_eq!(
        // from spec: <p>foo<br />\nbar</p>
        [
            paragraph!(plain!("foo"), HardBreak, plain!("bar"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("foo\\\n    \tbar\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9220>
/// <https://spec.commonmark.org/0.29/#example-635>
fn t635() {
    init!("*foo  \nbar*\n");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo  \nbar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9220>
/// <https://spec.commonmark.org/0.29/#example-635>
fn t635_cr() {
    init!("*foo  \rbar*\r");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo  \rbar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9220>
/// <https://spec.commonmark.org/0.29/#example-635>
fn t635_cr_nl() {
    init!("*foo  \r\nbar*\r\n");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo  \r\nbar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9220
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9220>
/// <https://spec.commonmark.org/0.29/#example-635>
fn t635_no_nl() {
    init!("*foo  \nbar*");

    assert_eq!(
        // from spec: <p><em>foo\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), SoftBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo  \nbar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9229
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9229>
/// <https://spec.commonmark.org/0.29/#example-636>
fn t636() {
    init!("*foo\\\nbar*\n");

    assert_eq!(
        // from spec: <p><em>foo<br />\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), HardBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\\\nbar*\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9229
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9229>
/// <https://spec.commonmark.org/0.29/#example-636>
fn t636_cr() {
    init!("*foo\\\rbar*\r");

    assert_eq!(
        // from spec: <p><em>foo<br />\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), HardBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\\\rbar*\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9229
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9229>
/// <https://spec.commonmark.org/0.29/#example-636>
fn t636_cr_nl() {
    init!("*foo\\\r\nbar*\r\n");

    assert_eq!(
        // from spec: <p><em>foo<br />\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), HardBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\\\r\nbar*\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9229
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9229>
/// <https://spec.commonmark.org/0.29/#example-636>
fn t636_no_nl() {
    init!("*foo\\\nbar*");

    assert_eq!(
        // from spec: <p><em>foo<br />\nbar</em></p>
        [
            paragraph!(emph!(plain!("foo"), HardBreak, plain!("bar")))
        ].as_slice(),
        body(&mut StringData::new("*foo\\\nbar*", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9240
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9240>
/// <https://spec.commonmark.org/0.29/#example-637>
fn t637() {
    init!("`code \nspan`\n");

    assert_eq!(
        // from spec: <p><code>code  span</code></p>
        [
            paragraph!(code!("code  span"))
        ].as_slice(),
        body(&mut StringData::new("`code \nspan`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9240
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9240>
/// <https://spec.commonmark.org/0.29/#example-637>
fn t637_cr() {
    init!("`code \rspan`\r");

    assert_eq!(
        // from spec: <p><code>code  span</code></p>
        [
            paragraph!(code!("code  span"))
        ].as_slice(),
        body(&mut StringData::new("`code \rspan`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9240
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9240>
/// <https://spec.commonmark.org/0.29/#example-637>
fn t637_cr_nl() {
    init!("`code \r\nspan`\r\n");

    assert_eq!(
        // from spec: <p><code>code  span</code></p>
        [
            paragraph!(code!("code  span"))
        ].as_slice(),
        body(&mut StringData::new("`code \r\nspan`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9240
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9240>
/// <https://spec.commonmark.org/0.29/#example-637>
fn t637_no_nl() {
    init!("`code \nspan`");

    assert_eq!(
        // from spec: <p><code>code  span</code></p>
        [
            paragraph!(code!("code  span"))
        ].as_slice(),
        body(&mut StringData::new("`code \nspan`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9240
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9240>
/// <https://spec.commonmark.org/0.29/#example-637>
fn t637_tab() {
    init!("`code\t\nspan`\n");

    assert_eq!(
        // from spec: <p><code>code  span</code></p>
        [
            paragraph!(code!("code\t\tspan"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("`code\t\nspan`\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9248>
/// <https://spec.commonmark.org/0.29/#example-638>
fn t638() {
    init!("`code\\\nspan`\n");

    assert_eq!(
        // from spec: <p><code>code\\ span</code></p>
        [
            paragraph!(code!("code\\ span"))
        ].as_slice(),
        body(&mut StringData::new("`code\\\nspan`\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9248>
/// <https://spec.commonmark.org/0.29/#example-638>
fn t638_cr() {
    init!("`code\\\rspan`\r");

    assert_eq!(
        // from spec: <p><code>code\\ span</code></p>
        [
            paragraph!(code!("code\\ span"))
        ].as_slice(),
        body(&mut StringData::new("`code\\\rspan`\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9248>
/// <https://spec.commonmark.org/0.29/#example-638>
fn t638_cr_nl() {
    init!("`code\\\r\nspan`\r\n");

    assert_eq!(
        // from spec: <p><code>code\\ span</code></p>
        [
            paragraph!(code!("code\\ span"))
        ].as_slice(),
        body(&mut StringData::new("`code\\\r\nspan`\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9248
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9248>
/// <https://spec.commonmark.org/0.29/#example-638>
fn t638_no_nl() {
    init!("`code\\\nspan`");

    assert_eq!(
        // from spec: <p><code>code\\ span</code></p>
        [
            paragraph!(code!("code\\ span"))
        ].as_slice(),
        body(&mut StringData::new("`code\\\nspan`", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9258>
/// <https://spec.commonmark.org/0.29/#example-639>
fn t639() {
    init!("<a href=\"foo  \nbar\">\n");

    assert_eq!(
        // from spec: <p><a href=\"foo  \nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo  \nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo  \nbar\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9258>
/// <https://spec.commonmark.org/0.29/#example-639>
fn t639_cr() {
    init!("<a href=\"foo  \rbar\">\r");

    assert_eq!(
        // from spec: <p><a href=\"foo  \nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo  \rbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo  \rbar\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9258>
/// <https://spec.commonmark.org/0.29/#example-639>
fn t639_cr_nl() {
    init!("<a href=\"foo  \r\nbar\">\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo  \nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo  \r\nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo  \r\nbar\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9258
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9258>
/// <https://spec.commonmark.org/0.29/#example-639>
fn t639_no_nl() {
    init!("<a href=\"foo  \nbar\">");

    assert_eq!(
        // from spec: <p><a href=\"foo  \nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo  \nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo  \nbar\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9267>
/// <https://spec.commonmark.org/0.29/#example-640>
fn t640() {
    init!("<a href=\"foo\\\nbar\">\n");

    assert_eq!(
        // from spec: <p><a href=\"foo\\\nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo\\\nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\\\nbar\">\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9267>
/// <https://spec.commonmark.org/0.29/#example-640>
fn t640_cr() {
    init!("<a href=\"foo\\\rbar\">\r");

    assert_eq!(
        // from spec: <p><a href=\"foo\\\nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo\\\rbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\\\rbar\">\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9267>
/// <https://spec.commonmark.org/0.29/#example-640>
fn t640_cr_nl() {
    init!("<a href=\"foo\\\r\nbar\">\r\n");

    assert_eq!(
        // from spec: <p><a href=\"foo\\\nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo\\\r\nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\\\r\nbar\">\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9267>
/// <https://spec.commonmark.org/0.29/#example-640>
fn t640_no_nl() {
    init!("<a href=\"foo\\\nbar\">");

    assert_eq!(
        // from spec: <p><a href=\"foo\\\nbar\"></p>
        [
            paragraph!(html!("<a href=\"foo\\\nbar\">"))
        ].as_slice(),
        body(&mut StringData::new("<a href=\"foo\\\nbar\">", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9267
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9267>
/// <https://spec.commonmark.org/0.29/#example-640>
fn t640_tab() {
    init!("<a\thref=\"foo\\\nbar\">\n");

    assert_eq!(
        // from spec: <p><a href=\"foo\\\nbar\"></p>
        [
            paragraph!(html!("<a	href=\"foo\\\nbar\">"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("<a\thref=\"foo\\\nbar\">\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9280
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9280>
/// <https://spec.commonmark.org/0.29/#example-641>
fn t641() {
    init!("foo\\\n");

    assert_eq!(
        // from spec: <p>foo\\</p>
        [
            paragraph!(plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9280
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9280>
/// <https://spec.commonmark.org/0.29/#example-641>
fn t641_cr() {
    init!("foo\\\r");

    assert_eq!(
        // from spec: <p>foo\\</p>
        [
            paragraph!(plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9280
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9280>
/// <https://spec.commonmark.org/0.29/#example-641>
fn t641_cr_nl() {
    init!("foo\\\r\n");

    assert_eq!(
        // from spec: <p>foo\\</p>
        [
            paragraph!(plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("foo\\\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9280
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9280>
/// <https://spec.commonmark.org/0.29/#example-641>
fn t641_no_nl() {
    init!("foo\\");

    assert_eq!(
        // from spec: <p>foo\\</p>
        [
            paragraph!(plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("foo\\", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9287
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9287>
/// <https://spec.commonmark.org/0.29/#example-642>
fn t642() {
    init!("foo  \n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("foo  \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9287
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9287>
/// <https://spec.commonmark.org/0.29/#example-642>
fn t642_cr() {
    init!("foo  \r");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("foo  \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9287
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9287>
/// <https://spec.commonmark.org/0.29/#example-642>
fn t642_cr_nl() {
    init!("foo  \r\n");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("foo  \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9287
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9287>
/// <https://spec.commonmark.org/0.29/#example-642>
fn t642_no_nl() {
    init!("foo  ");

    assert_eq!(
        // from spec: <p>foo</p>
        [
            paragraph!(plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("foo  ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9294
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9294>
/// <https://spec.commonmark.org/0.29/#example-643>
fn t643() {
    init!("### foo\\\n");

    assert_eq!(
        // from spec: <h3>foo\\</h3>
        [
            heading!(3, plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("### foo\\\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9294
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9294>
/// <https://spec.commonmark.org/0.29/#example-643>
fn t643_cr() {
    init!("### foo\\\r");

    assert_eq!(
        // from spec: <h3>foo\\</h3>
        [
            heading!(3, plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("### foo\\\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9294
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9294>
/// <https://spec.commonmark.org/0.29/#example-643>
fn t643_cr_nl() {
    init!("### foo\\\r\n");

    assert_eq!(
        // from spec: <h3>foo\\</h3>
        [
            heading!(3, plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("### foo\\\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9294
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9294>
/// <https://spec.commonmark.org/0.29/#example-643>
fn t643_no_nl() {
    init!("### foo\\");

    assert_eq!(
        // from spec: <h3>foo\\</h3>
        [
            heading!(3, plain!("foo\\"))
        ].as_slice(),
        body(&mut StringData::new("### foo\\", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9294
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9294>
/// <https://spec.commonmark.org/0.29/#example-643>
fn t643_tab() {
    init!("###\tfoo\\\n");

    assert_eq!(
        // from spec: <h3>foo\\</h3>
        [
            heading!(3, plain!("foo\\"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("###\tfoo\\\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9301
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9301>
/// <https://spec.commonmark.org/0.29/#example-644>
fn t644() {
    init!("### foo  \n");

    assert_eq!(
        // from spec: <h3>foo</h3>
        [
            heading!(3, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("### foo  \n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9301
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9301>
/// <https://spec.commonmark.org/0.29/#example-644>
fn t644_cr() {
    init!("### foo  \r");

    assert_eq!(
        // from spec: <h3>foo</h3>
        [
            heading!(3, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("### foo  \r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9301
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9301>
/// <https://spec.commonmark.org/0.29/#example-644>
fn t644_cr_nl() {
    init!("### foo  \r\n");

    assert_eq!(
        // from spec: <h3>foo</h3>
        [
            heading!(3, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("### foo  \r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9301
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9301>
/// <https://spec.commonmark.org/0.29/#example-644>
fn t644_no_nl() {
    init!("### foo  ");

    assert_eq!(
        // from spec: <h3>foo</h3>
        [
            heading!(3, plain!("foo"))
        ].as_slice(),
        body(&mut StringData::new("### foo  ", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9301
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9301>
/// <https://spec.commonmark.org/0.29/#example-644>
fn t644_tab() {
    init!("###\tfoo  \n");

    assert_eq!(
        // from spec: <h3>foo</h3>
        [
            heading!(3, plain!("foo"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("###\tfoo  \n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9316>
/// <https://spec.commonmark.org/0.29/#example-645>
fn t645() {
    init!("foo\nbaz\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\nbaz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9316>
/// <https://spec.commonmark.org/0.29/#example-645>
fn t645_cr() {
    init!("foo\rbaz\r");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\rbaz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9316>
/// <https://spec.commonmark.org/0.29/#example-645>
fn t645_cr_nl() {
    init!("foo\r\nbaz\r\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\r\nbaz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9316
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9316>
/// <https://spec.commonmark.org/0.29/#example-645>
fn t645_no_nl() {
    init!("foo\nbaz");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo\nbaz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9328
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9328>
/// <https://spec.commonmark.org/0.29/#example-646>
fn t646() {
    init!("foo \n baz\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo \n baz\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9328
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9328>
/// <https://spec.commonmark.org/0.29/#example-646>
fn t646_cr() {
    init!("foo \r baz\r");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo \r baz\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9328
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9328>
/// <https://spec.commonmark.org/0.29/#example-646>
fn t646_cr_nl() {
    init!("foo \r\n baz\r\n");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo \r\n baz\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9328
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9328>
/// <https://spec.commonmark.org/0.29/#example-646>
fn t646_no_nl() {
    init!("foo \n baz");

    assert_eq!(
        // from spec: <p>foo\nbaz</p>
        [
            paragraph!(plain!("foo"), SoftBreak, plain!("baz"))
        ].as_slice(),
        body(&mut StringData::new("foo \n baz", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9348>
/// <https://spec.commonmark.org/0.29/#example-647>
fn t647() {
    init!("hello $.;\'there\n");

    assert_eq!(
        // from spec: <p>hello $.;\'there</p>
        [
            paragraph!(plain!("hello $.;\'there"))
        ].as_slice(),
        body(&mut StringData::new("hello $.;\'there\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9348>
/// <https://spec.commonmark.org/0.29/#example-647>
fn t647_cr() {
    init!("hello $.;\'there\r");

    assert_eq!(
        // from spec: <p>hello $.;\'there</p>
        [
            paragraph!(plain!("hello $.;\'there"))
        ].as_slice(),
        body(&mut StringData::new("hello $.;\'there\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9348>
/// <https://spec.commonmark.org/0.29/#example-647>
fn t647_cr_nl() {
    init!("hello $.;\'there\r\n");

    assert_eq!(
        // from spec: <p>hello $.;\'there</p>
        [
            paragraph!(plain!("hello $.;\'there"))
        ].as_slice(),
        body(&mut StringData::new("hello $.;\'there\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9348>
/// <https://spec.commonmark.org/0.29/#example-647>
fn t647_no_nl() {
    init!("hello $.;\'there");

    assert_eq!(
        // from spec: <p>hello $.;\'there</p>
        [
            paragraph!(plain!("hello $.;\'there"))
        ].as_slice(),
        body(&mut StringData::new("hello $.;\'there", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9348
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9348>
/// <https://spec.commonmark.org/0.29/#example-647>
fn t647_tab() {
    init!("hello\t$.;\'there\n");

    assert_eq!(
        // from spec: <p>hello $.;\'there</p>
        [
            paragraph!(plain!("hello	$.;\'there"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("hello\t$.;\'there\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9355>
/// <https://spec.commonmark.org/0.29/#example-648>
fn t648() {
    init!("Foo χρῆν\n");

    assert_eq!(
        // from spec: <p>Foo χρῆν</p>
        [
            paragraph!(plain!("Foo χρῆν"))
        ].as_slice(),
        body(&mut StringData::new("Foo \u{3c7}\u{3c1}\u{1fc6}\u{3bd}\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9355>
/// <https://spec.commonmark.org/0.29/#example-648>
fn t648_cr() {
    init!("Foo χρῆν\r");

    assert_eq!(
        // from spec: <p>Foo χρῆν</p>
        [
            paragraph!(plain!("Foo χρῆν"))
        ].as_slice(),
        body(&mut StringData::new("Foo \u{3c7}\u{3c1}\u{1fc6}\u{3bd}\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9355>
/// <https://spec.commonmark.org/0.29/#example-648>
fn t648_cr_nl() {
    init!("Foo χρῆν\r\n");

    assert_eq!(
        // from spec: <p>Foo χρῆν</p>
        [
            paragraph!(plain!("Foo χρῆν"))
        ].as_slice(),
        body(&mut StringData::new("Foo \u{3c7}\u{3c1}\u{1fc6}\u{3bd}\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9355>
/// <https://spec.commonmark.org/0.29/#example-648>
fn t648_no_nl() {
    init!("Foo χρῆν");

    assert_eq!(
        // from spec: <p>Foo χρῆν</p>
        [
            paragraph!(plain!("Foo χρῆν"))
        ].as_slice(),
        body(&mut StringData::new("Foo \u{3c7}\u{3c1}\u{1fc6}\u{3bd}", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9355
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9355>
/// <https://spec.commonmark.org/0.29/#example-648>
fn t648_tab() {
    init!("Foo\tχρῆν\n");

    assert_eq!(
        // from spec: <p>Foo χρῆν</p>
        [
            paragraph!(plain!("Foo	χρῆν"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Foo\t\u{3c7}\u{3c1}\u{1fc6}\u{3bd}\n", ParserSettings::Html))),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9364>
/// <https://spec.commonmark.org/0.29/#example-649>
fn t649() {
    init!("Multiple     spaces\n");

    assert_eq!(
        // from spec: <p>Multiple     spaces</p>
        [
            paragraph!(plain!("Multiple     spaces"))
        ].as_slice(),
        body(&mut StringData::new("Multiple     spaces\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9364>
/// <https://spec.commonmark.org/0.29/#example-649>
fn t649_cr() {
    init!("Multiple     spaces\r");

    assert_eq!(
        // from spec: <p>Multiple     spaces</p>
        [
            paragraph!(plain!("Multiple     spaces"))
        ].as_slice(),
        body(&mut StringData::new("Multiple     spaces\r", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9364>
/// <https://spec.commonmark.org/0.29/#example-649>
fn t649_cr_nl() {
    init!("Multiple     spaces\r\n");

    assert_eq!(
        // from spec: <p>Multiple     spaces</p>
        [
            paragraph!(plain!("Multiple     spaces"))
        ].as_slice(),
        body(&mut StringData::new("Multiple     spaces\r\n", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9364>
/// <https://spec.commonmark.org/0.29/#example-649>
fn t649_no_nl() {
    init!("Multiple     spaces");

    assert_eq!(
        // from spec: <p>Multiple     spaces</p>
        [
            paragraph!(plain!("Multiple     spaces"))
        ].as_slice(),
        body(&mut StringData::new("Multiple     spaces", ParserSettings::Html)),
    );
}

#[test]
/// Test case generated from Commonmark Spec line 9364
/// <https://github.com/commonmark/commonmark-spec/blob/master/spec.txt#L9364>
/// <https://spec.commonmark.org/0.29/#example-649>
fn t649_tab() {
    init!("Multiple\t\t\t\t\tspaces\n");

    assert_eq!(
        // from spec: <p>Multiple     spaces</p>
        [
            paragraph!(plain!("Multiple					spaces"))
        ].as_slice(),
        space2tab(body(&mut StringData::new("Multiple\t\t\t\t\tspaces\n", ParserSettings::Html))),
    );
}
